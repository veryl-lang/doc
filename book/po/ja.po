msgid ""
msgstr ""
"Project-Id-Version: The Veryl Hardware Description Language\n"
"POT-Creation-Date: 2025-10-02T11:08:58+09:00\n"
"PO-Revision-Date: 2023-12-28 23:02+0900\n"
"Last-Translator: Naoya Hatta <dalance@gmail.com>\n"
"Language-Team: Japanese\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: src/SUMMARY.md:1
msgid "Summary"
msgstr "Summary"

#: src/SUMMARY.md:3
msgid "Introduction"
msgstr "概要"

#: src/SUMMARY.md:4 src/02_features.md:1
msgid "Features"
msgstr "特徴"

#: src/SUMMARY.md:5 src/03_getting_started.md:1
msgid "Getting Started"
msgstr "はじめに"

#: src/SUMMARY.md:6 src/03_getting_started/01_installation.md:1
msgid "Installation"
msgstr "インストール"

#: src/SUMMARY.md:7 src/03_getting_started/02_hello_world.md:1
msgid "Hello, World!"
msgstr "Hello, World!"

#: src/SUMMARY.md:8 src/04_code_examples.md:1
msgid "Code Examples"
msgstr "コード例"

#: src/SUMMARY.md:9 src/SUMMARY.md:58 src/04_code_examples/01_module.md:1
#: src/05_language_reference/07_module.md:1
#: src/05_language_reference/14_generics/02_prototype.md:139
msgid "Module"
msgstr "モジュール"

#: src/SUMMARY.md:10 src/SUMMARY.md:54
#: src/04_code_examples/02_instantiation.md:1
#: src/05_language_reference/06_declaration/10_instantiation.md:1
msgid "Instantiation"
msgstr "インスタンス"

#: src/SUMMARY.md:11 src/SUMMARY.md:59 src/04_code_examples/03_interface.md:1
#: src/05_language_reference/08_interface.md:1
#: src/05_language_reference/14_generics/02_prototype.md:140
msgid "Interface"
msgstr "インターフェース"

#: src/SUMMARY.md:12 src/SUMMARY.md:60 src/04_code_examples/04_package.md:1
#: src/05_language_reference/09_package.md:1
#: src/05_language_reference/14_generics/02_prototype.md:141
msgid "Package"
msgstr "パッケージ"

#: src/SUMMARY.md:13 src/05_language_reference.md:1
msgid "Language Reference"
msgstr "言語リファレンス"

#: src/SUMMARY.md:14 src/05_language_reference/01_source_code_structure.md:1
msgid "Source Code Structure"
msgstr "ソースコードの構造"

#: src/SUMMARY.md:15 src/05_language_reference/02_lexical_structure.md:1
msgid "Lexical Structure"
msgstr "字句構造"

#: src/SUMMARY.md:16
#: src/05_language_reference/02_lexical_structure/01_operator.md:1
#: src/05_language_reference/04_expression/01_operator_precedence.md:5
msgid "Operator"
msgstr "演算子"

#: src/SUMMARY.md:17
#: src/05_language_reference/02_lexical_structure/02_number.md:1
msgid "Number"
msgstr "数値"

#: src/SUMMARY.md:18
#: src/05_language_reference/02_lexical_structure/03_array_literal.md:1
msgid "Array Literal"
msgstr "配列リテラル"

#: src/SUMMARY.md:19 src/05_language_reference/03_data_type.md:1
msgid "Data Type"
msgstr "データ型"

#: src/SUMMARY.md:20
#: src/05_language_reference/03_data_type/01_builtin_type.md:1
msgid "Builtin Type"
msgstr "組み込み型"

#: src/SUMMARY.md:21
#: src/05_language_reference/03_data_type/02_user_defined_type.md:1
msgid "User Defined Type"
msgstr "ユーザ定義型"

#: src/SUMMARY.md:22 src/05_language_reference/03_data_type/03_array.md:1
msgid "Array"
msgstr "配列"

#: src/SUMMARY.md:23 src/05_language_reference/03_data_type/04_clock_reset.md:1
msgid "Clock / Reset"
msgstr "クロックとリセット"

#: src/SUMMARY.md:24 src/05_language_reference/04_expression.md:1
msgid "Expression"
msgstr "式"

#: src/SUMMARY.md:25
#: src/05_language_reference/04_expression/01_operator_precedence.md:1
msgid "Operator Precedence"
msgstr "演算子の優先順位"

#: src/SUMMARY.md:26 src/SUMMARY.md:38
#: src/05_language_reference/04_expression/02_function_call.md:1
#: src/05_language_reference/05_statement/02_function_call.md:1
msgid "Function Call"
msgstr "関数呼び出し"

#: src/SUMMARY.md:27
#: src/05_language_reference/04_expression/03_concatenation.md:1
msgid "Concatenation"
msgstr "連結"

#: src/SUMMARY.md:28 src/SUMMARY.md:39
#: src/05_language_reference/04_expression/04_if.md:1
#: src/05_language_reference/05_statement/03_if.md:1
msgid "If"
msgstr "if"

#: src/SUMMARY.md:29 src/SUMMARY.md:40
#: src/05_language_reference/04_expression/05_case_switch.md:1
#: src/05_language_reference/05_statement/04_case_switch.md:1
msgid "Case / Switch"
msgstr ""

#: src/SUMMARY.md:30 src/05_language_reference/04_expression/06_bit_select.md:1
msgid "Bit Select"
msgstr "ビット選択"

#: src/SUMMARY.md:31 src/05_language_reference/04_expression/07_range.md:1
msgid "Range"
msgstr "範囲"

#: src/SUMMARY.md:32 src/05_language_reference/04_expression/08_msb_lsb.md:1
msgid "Msb / Lsb"
msgstr "msb / lsb"

#: src/SUMMARY.md:33
#: src/05_language_reference/04_expression/09_inside_outside.md:1
msgid "Inside / Outside"
msgstr "inside / outside"

#: src/SUMMARY.md:34 src/05_language_reference/04_expression/10_type_cast.md:1
msgid "Type Cast"
msgstr "型キャスト"

#: src/SUMMARY.md:35
#: src/05_language_reference/04_expression/11_struct_constructor.md:1
msgid "Struct Constructor"
msgstr "構造体コンストラクタ"

#: src/SUMMARY.md:36 src/05_language_reference/05_statement.md:1
msgid "Statement"
msgstr "文"

#: src/SUMMARY.md:37 src/05_language_reference/05_statement/01_assignment.md:1
msgid "Assignment"
msgstr "代入"

#: src/SUMMARY.md:41 src/05_language_reference/05_statement/05_for.md:1
msgid "For"
msgstr "for"

#: src/SUMMARY.md:42 src/05_language_reference/05_statement/06_return.md:1
msgid "Return"
msgstr "return"

#: src/SUMMARY.md:43 src/05_language_reference/05_statement/07_let.md:1
msgid "Let"
msgstr "let"

#: src/SUMMARY.md:44 src/05_language_reference/06_declaration.md:1
msgid "Declaration"
msgstr "宣言"

#: src/SUMMARY.md:45 src/05_language_reference/06_declaration/01_variable.md:1
#: src/05_language_reference/14_generics/02_prototype.md:137
#: src/05_language_reference/14_generics/02_prototype.md:178
msgid "Variable"
msgstr "変数"

#: src/SUMMARY.md:46 src/05_language_reference/06_declaration/02_parameter.md:1
#: src/05_language_reference/14_generics/02_prototype.md:137
#: src/05_language_reference/14_generics/02_prototype.md:143
msgid "Parameter"
msgstr "パラメータ"

#: src/SUMMARY.md:47 src/05_language_reference/06_declaration/03_register.md:1
msgid "Register"
msgstr "レジスタ"

#: src/SUMMARY.md:48
#: src/05_language_reference/06_declaration/04_combinational.md:1
msgid "Combinational"
msgstr "組み合わせ回路"

#: src/SUMMARY.md:49 src/05_language_reference/06_declaration/05_assign.md:1
msgid "Assign"
msgstr "assign"

#: src/SUMMARY.md:50 src/05_language_reference/06_declaration/06_function.md:1
#: src/05_language_reference/14_generics/02_prototype.md:137
#: src/05_language_reference/14_generics/02_prototype.md:253
msgid "Function"
msgstr "関数"

#: src/SUMMARY.md:51
#: src/05_language_reference/06_declaration/07_initial_final.md:1
msgid "Initial / Final"
msgstr "initial / final"

#: src/SUMMARY.md:52 src/05_language_reference/06_declaration/08_attribute.md:1
msgid "Attribute"
msgstr "アトリビュート"

#: src/SUMMARY.md:53 src/05_language_reference/06_declaration/09_generate.md:1
msgid "Generate"
msgstr "生成"

#: src/SUMMARY.md:55
#: src/05_language_reference/06_declaration/11_named_block.md:1
msgid "Named Block"
msgstr "名前付きブロック"

#: src/SUMMARY.md:56
msgid "Import / Export"
msgstr "Import / Export"

#: src/SUMMARY.md:57 src/05_language_reference/06_declaration/13_connect.md:1
msgid "Connect"
msgstr "Connect"

#: src/SUMMARY.md:61
#: src/05_language_reference/10_systemverilog_interoperation.md:1
msgid "SystemVerilog Interoperation"
msgstr "SystemVerilogとの相互運用"

#: src/SUMMARY.md:62 src/05_language_reference/11_visibility.md:1
msgid "Visibility"
msgstr "可視性"

#: src/SUMMARY.md:63
#: src/05_language_reference/12_foreign_language_integration.md:1
msgid "Foreign Language Integration"
msgstr "他言語組み込み"

#: src/SUMMARY.md:64 src/05_language_reference/13_integrated_test.md:1
msgid "Integrated Test"
msgstr "組み込みテスト"

#: src/SUMMARY.md:65 src/02_features.md:67
#: src/05_language_reference/14_generics.md:1
msgid "Generics"
msgstr "ジェネリクス"

#: src/SUMMARY.md:66
#: src/05_language_reference/14_generics/01_default_parameter.md:1
msgid "Default Parameter"
msgstr "デフォルトパラメータ"

#: src/SUMMARY.md:67 src/05_language_reference/14_generics/02_prototype.md:1
#: src/05_language_reference/14_generics/02_prototype.md:137
msgid "Prototype"
msgstr "プロトタイプ"

#: src/SUMMARY.md:68 src/02_features.md:123
#: src/05_language_reference/15_clock_domain_annotation.md:1
msgid "Clock Domain Annotation"
msgstr "クロックドメインアノテーション"

#: src/SUMMARY.md:69
#: src/05_language_reference/15_clock_domain_annotation/01_unsafe_cdc.md:1
msgid "Unsafe CDC"
msgstr "Unsafe CDC"

#: src/SUMMARY.md:70 src/05_language_reference/16_standard_library.md:1
msgid "Standard Library"
msgstr "標準ライブラリ"

#: src/SUMMARY.md:71 src/05_language_reference/14_generics/02_prototype.md:137
#: src/05_language_reference/17_alias.md:1
msgid "Alias"
msgstr "エイリアス"

#: src/SUMMARY.md:72 src/06_development_environment.md:1
msgid "Development Environment"
msgstr "開発環境"

#: src/SUMMARY.md:73
#: src/06_development_environment/01_project_configuration.md:1
msgid "Project Configuration"
msgstr "プロジェクト設定"

#: src/SUMMARY.md:74
#: src/06_development_environment/01_project_configuration/01_build.md:1
msgid "Build"
msgstr "Build"

#: src/SUMMARY.md:75
#: src/06_development_environment/01_project_configuration/02_format.md:1
msgid "Format"
msgstr "Format"

#: src/SUMMARY.md:76
#: src/06_development_environment/01_project_configuration/03_lint.md:1
msgid "Lint"
msgstr "Lint"

#: src/SUMMARY.md:77
#: src/06_development_environment/01_project_configuration/04_test.md:1
#: src/06_development_environment/11_github_action.md:47
msgid "Test"
msgstr "Test"

#: src/SUMMARY.md:78
#: src/06_development_environment/01_project_configuration/05_publish.md:1
msgid "Publish"
msgstr "Publish"

#: src/SUMMARY.md:79 src/06_development_environment/02_dependencies.md:1
msgid "Dependencies"
msgstr "依存関係"

#: src/SUMMARY.md:80 src/06_development_environment/03_publish_project.md:1
msgid "Publish Project"
msgstr "プロジェクトを公開する"

#: src/SUMMARY.md:81 src/06_development_environment/04_directory_layout.md:1
msgid "Directory Layout"
msgstr "ディレクトリ構成"

#: src/SUMMARY.md:82 src/06_development_environment/05_formatter.md:1
msgid "Formatter"
msgstr "フォーマッタ"

#: src/SUMMARY.md:83 src/06_development_environment/06_linter.md:1
msgid "Linter"
msgstr "リンタ"

#: src/SUMMARY.md:84 src/06_development_environment/07_simulator.md:1
msgid "Simulator"
msgstr "シミュレータ"

#: src/SUMMARY.md:85 src/06_development_environment/08_language_server.md:1
msgid "Language Server"
msgstr "言語サーバ"

#: src/SUMMARY.md:86 src/06_development_environment/09_compatibility.md:1
msgid "Compatibility"
msgstr "互換性"

#: src/SUMMARY.md:87 src/06_development_environment/10_documentation.md:1
msgid "Documentation"
msgstr "ドキュメンテーション"

#: src/SUMMARY.md:88 src/06_development_environment/11_github_action.md:1
msgid "GitHub Action"
msgstr "GitHub Action"

#: src/SUMMARY.md:89 src/06_development_environment/12_source_map.md:1
msgid "Source Map"
msgstr "ソースマップ"

#: src/SUMMARY.md:90 src/06_development_environment/13_verylup.md:1
msgid "verylup"
msgstr "verylup"

#: src/SUMMARY.md:91
#: src/06_development_environment/14_migrate_to_new_version.md:1
msgid "Migrate to New Version"
msgstr "新バージョンへの移行"

#: src/SUMMARY.md:92 src/06_development_environment/15_docker_image.md:1
msgid "Docker Image"
msgstr "Docker イメージ"

#: src/SUMMARY.md:93 src/07_appendix.md:1
msgid "Appendix"
msgstr "補遺"

#: src/SUMMARY.md:94 src/07_appendix/01_formal_syntax.md:1
msgid "Formal Syntax"
msgstr "構文"

#: src/SUMMARY.md:95 src/07_appendix/02_semantic_error.md:1
msgid "Semantic Error"
msgstr "セマンティックエラー"

#: src/01_introduction.md:1
msgid "The Veryl Hardware Description Language"
msgstr "ハードウェア記述言語 Veryl"

#: src/01_introduction.md:3
msgid ""
"![Veryl](https://github.com/veryl-lang/veryl/raw/master/support/logo/"
"veryl_wide.png)"
msgstr ""
"![Veryl](https://github.com/veryl-lang/veryl/raw/master/support/logo/"
"veryl_wide.png)"

#: src/01_introduction.md:5
msgid ""
"Veryl is a hardware description language based on SystemVerilog, providing "
"the following advantages:"
msgstr ""
"Veryl は SystemVerilog をベースに設計されたハードウェア記述言語であり、以下の"
"ような特徴があります。"

#: src/01_introduction.md:7
msgid "Optimized Syntax"
msgstr "最適化された構文"

#: src/01_introduction.md:8
msgid ""
"Veryl adopts syntax optimized for logic design while being based on a "
"familiar basic syntax for SystemVerilog experts. This optimization includes "
"guarantees for synthesizability, ensuring consistency between simulation "
"results, and providing numerous syntax simplifications for common idioms. "
"This approach enables ease of learning, improves the reliability and "
"efficiency of the design process, and facilitates ease of code writing."
msgstr ""
"Verylは、SystemVerilogの経験者にとって親しみやすい基本構文に基づきながら、論"
"理設計に最適化された構文を採用しています。この最適化には、たとえば合成可能性"
"の保証やシミュレーション結果の一致の保証、頻出する定型文を簡素化する多数の構"
"文などの提供が含まれます。このアプローチにより、学習の容易さ、設計プロセスの"
"信頼性と効率の向上、およびコードの記述の容易さが実現されます。"

#: src/01_introduction.md:12
msgid "Interoperability"
msgstr "相互運用性"

#: src/01_introduction.md:13
msgid ""
"Designed with interoperability with SystemVerilog in mind, Veryl allows "
"smooth integration and partial replacement with existing SystemVerilog "
"components and projects. Furthermore, SystemVerilog source code transpiled "
"from Veryl retains high readability, enabling seamless integration and "
"debugging."
msgstr ""
"VerylはSystemVerilogとの相互運用性を考慮して設計されており、既存の"
"SystemVerilogコンポーネントやプロジェクトとの組み合わせや部分的な置き換えをス"
"ムーズに行うことができます。さらに、Verylからトランスパイルされた"
"SystemVerilogソースコードは、その高い可読性により、シームレスな統合やデバッグ"
"を可能にします。"

#: src/01_introduction.md:16
msgid "Productivity"
msgstr "生産性"

#: src/01_introduction.md:17
msgid ""
"Veryl comes with a rich set of development support tools, including package "
"managers, build tools, real-time checkers compatible with major editors such "
"as VSCode, Vim, Emacs, automatic completion, and automatic formatting. These "
"tools accelerate the development process and significantly enhance "
"productivity."
msgstr ""
"Verylはパッケージマネージャ、ビルドツール、そしてVSCode、Vim、Emacsなどの主要"
"なエディタに対応するリアルタイムチェッカー、自動補完機能、自動フォーマッタな"
"ど、豊富な開発支援ツールを備えています。これらのツールは、開発プロセスを加速"
"し、生産性を大幅に向上させることができます。"

#: src/01_introduction.md:20
msgid ""
"With these features, Veryl provides powerful support for designers to "
"efficiently and productively conduct high-quality hardware design."
msgstr ""
"これらの特性により、Verylは設計者が高品質なハードウェア設計をより効率的かつ生"
"産的に行うための強力なサポートを提供します。"

#: src/02_features.md:3
msgid ""
"In this chapter, we introduce the features of Veryl along with clear "
"examples."
msgstr "この章ではVerylの特徴的な機能をわかりやすい例とともに紹介します。"

#: src/02_features.md:5
msgid "[Real-time diagnostics](02_features.md#real-time-diagnostics)"
msgstr "[リアルタイム診断](02_features.md#real-time-diagnostics)"

#: src/02_features.md:6
msgid "[Auto formatting](02_features.md#auto-formatting)"
msgstr "[自動フォーマット](02_features.md#auto-formatting)"

#: src/02_features.md:7
msgid "[Integrated test](02_features.md#integrated-test)"
msgstr "[組み込みテスト](02_features.md#integrated-test)"

#: src/02_features.md:8
msgid "[Dependency management](02_features.md#dependency-management)"
msgstr "[依存関係管理](02_features.md#dependency-management)"

#: src/02_features.md:9
msgid "[Generics](02_features.md#generics)"
msgstr "[ジェネリクス](02_features.md#generics)"

#: src/02_features.md:10
msgid "[Clock Domain Annotation](02_features.md#clock-domain-annotation)"
msgstr ""
"[クロックドメインアノテーション](02_features.md#clock-domain-annotation)"

#: src/02_features.md:11
msgid "[Trailing comma](02_features.md#trailing-comma)"
msgstr "[末尾カンマ](02_features.md#trailing-comma)"

#: src/02_features.md:12
msgid ""
"[Abstraction of clock and reset](02_features.md#abstraction-of-clock-and-"
"reset)"
msgstr ""
"[クロックとリセットの抽象化](02_features.md#abstraction-of-clock-and-reset)"

#: src/02_features.md:13
msgid "[Documentation comment](02_features.md#documentation-comment)"
msgstr "[ドキュメンテーションコメント](02_features.md#documentation-comment)"

#: src/02_features.md:14
msgid ""
"[Compound assignment operator in `always_ff`](02_features.md#compound-"
"assignment-operator-in-always_ff)"
msgstr ""
"[`always_ff` での複合代入演算子](02_features.md#compound-assignment-operator-"
"in-always_ff)"

#: src/02_features.md:15
msgid ""
"[Individual namespace of enum variant](02_features.md#individual-namespace-"
"of-enum-variant)"
msgstr ""
"[独立した名前空間を持つenumバリアント](02_features.md#individual-namespace-"
"of-enum-variant)"

#: src/02_features.md:16
msgid "[`repeat` of concatenation](02_features.md#repeat-of-concatenation)"
msgstr "[ビット連結における `repeat`](02_features.md#repeat-of-concatenation)"

#: src/02_features.md:17
msgid "[`if` / `case` expression](02_features.md#if--case-expression)"
msgstr "[`if` / `case` 式](02_features.md#if--case-expression)"

#: src/02_features.md:18
msgid ""
"[Range-based `for` / `inside` / `outside`](02_features.md#range-based-for--"
"inside--outside)"
msgstr ""
"[範囲 `for` / `inside` / `outside`](02_features.md#range-based-for--inside--"
"outside)"

#: src/02_features.md:19
msgid "[`msb` notation](02_features.md#msb-notation)"
msgstr "[`msb` 記法](02_features.md#msb-notation)"

#: src/02_features.md:20
msgid "[`let` statement](02_features.md#let-statement)"
msgstr "[`let` 文](02_features.md#let-statement)"

#: src/02_features.md:21
msgid "[`<>` operator](02_features.md#connect-operator)"
msgstr "[`<>` 演算子](02_features.md#connect-operator)"

#: src/02_features.md:22
msgid "[Named block](02_features.md#named-block)"
msgstr "[名前付きブロック](02_features.md#named-block)"

#: src/02_features.md:23
msgid "[Visibility control](02_features.md#visibility-control)"
msgstr "[可視性制御](02_features.md#visibility-control)"

#: src/02_features.md:25
msgid "Real-time diagnostics"
msgstr "リアルタイム診断"

#: src/02_features.md:27
msgid ""
"Issues such as undefined, unused, or unassigned variables are notified in "
"real-time while editing in the editor. In the following example, adding the "
"`_` prefix to variables flagged as unused explicitly indicates their unused "
"status, suppressing warnings."
msgstr ""
"変数の未定義・未使用・未代入といった問題はエディタでの編集中にリアルタイムに"
"通知されます。次の例では、未使用変数として通知された変数に `_` プレフィックス"
"を付加することで未使用であることを明示し、警告を抑制しています。"

#: src/02_features.md:33
msgid "Auto formatting"
msgstr "自動フォーマット"

#: src/02_features.md:35
msgid ""
"In addition to the automatic formatting feature integrated with the editor, "
"formatting through the command line and formatting checks in CI are also "
"possible."
msgstr ""
"エディタと連携した自動フォーマット機能のほか、コマンドラインでのフォーマット"
"やCIでのフォーマットチェックも可能です。"

#: src/02_features.md:41
msgid "Integrated test"
msgstr "組み込みテスト"

#: src/02_features.md:43
msgid ""
"Test code written by SystemVerilog or [cocotb](https://www.cocotb.org) can "
"be embeded in Veryl code, it can be executed through `veryl test` command."
msgstr ""
"SystemVerilogまたは[cocotb](https://www.cocotb.org)で書かれたテストコードを"
"Verylに埋め込み、`veryl test` コマンドで実行することができます。"

#: src/02_features.md:46
msgid ""
"```veryl\n"
"#[test(test1)]\n"
"embed (inline) sv{{{\n"
"    module test1;\n"
"        initial begin\n"
"            assert (0) else $error(\"error\");\n"
"        end\n"
"    endmodule\n"
"}}}\n"
"```"
msgstr ""

#: src/02_features.md:57
msgid "Dependency management"
msgstr "依存関係管理"

#: src/02_features.md:59
msgid ""
"Veryl includes a built-in dependency management feature, allowing for easy "
"incorporation of libraries by simply adding the repository path and version "
"of the library on project settings like below."
msgstr ""
"Verylには依存関係の管理機能が組み込まれており、プロジェクト設定に以下のように"
"ライブラリのリポジトリパスとバージョンを追加するだけで、簡単にライブラリを組"
"み込むことができます。"

#: src/02_features.md:62
msgid ""
"```toml\n"
"[dependencies]\n"
"veryl_sample = {git = \"https://github.com/veryl-lang/veryl_sample\", "
"version = \"0.1.0\"}\n"
"```"
msgstr ""
"```toml\n"
"[dependencies]\n"
"veryl_sample = {git = \"https://github.com/veryl-lang/veryl_sample\", "
"version = \"0.1.0\"}\n"
"```"

#: src/02_features.md:69
msgid ""
"Code generation through generics achieves more reusable code than "
"traditional parameter override. Parameters in function like the following "
"example, but also module names of instantiation, type names of struct "
"definition, and so on can be parameterized."
msgstr ""
"ジェネリクスによるコード生成は従来のパラメータオーバーライドよりさらに再利用"
"性の高いコードを記述することができます。以下の例のような関数のパラメータだけ"
"でなく、インスタンスのモジュール名や構造体定義の型名もパラメータ化することが"
"できます。"

#: src/02_features.md:125
msgid ""
"If there are some clocks in a module, explicit clock domain annotation and "
"`unsafe (cdc)` block at the clock domain boundaries are required. By the "
"annotation, Veryl compiler detects unexpected clock domain crossing as "
"error, and explicit `unsafe (cdc)` block eases to review clock domain "
"crossing."
msgstr ""
"モジュール内に複数のクロックがある場合、明示的なクロックドメインアノテーショ"
"ンとクロックドメイン境界への `unsafe (cdc)` ブロックが必要です。Veryl コンパ"
"イラは意図しないクロックドメインクロッシングをエラーとして検出し、明示的な "
"`unsafe (cdc)` ブロックによりレビューが容易になります。"

#: src/02_features.md:136
msgid ""
"```verilog\n"
"module ModuleA (\n"
"    input  i_clk_a,\n"
"    input  i_dat_a,\n"
"    output o_dat_a,\n"
"    input  i_clk_b,\n"
"    input  i_dat_b,\n"
"    output o_dat_b\n"
");\n"
"    // Carefully!!!\n"
"    // From i_clk_a to i_clk_b\n"
"    assign o_dat_b = i_dat_a;\n"
"endmodule\n"
"```"
msgstr ""
"```verilog\n"
"module ModuleA (\n"
"    input  i_clk_a,\n"
"    input  i_dat_a,\n"
"    output o_dat_a,\n"
"    input  i_clk_b,\n"
"    input  i_dat_b,\n"
"    output o_dat_b\n"
");\n"
"    // 注意!!!\n"
"    // i_clk_a から i_clk_b へ\n"
"    assign o_dat_b = i_dat_a;\n"
"endmodule\n"
"```"

#: src/02_features.md:173
msgid "Trailing comma"
msgstr "末尾カンマ"

#: src/02_features.md:175
msgid ""
"Trailing comma is a syntax where a comma is placed after the last element in "
"a list. It facilitates the addition and removal of elements and reduces "
"unnecessary differences in version control systems."
msgstr ""
"末尾カンマは、リストの最後の要素の後ろにカンマが置かれる構文です。これによ"
"り、要素の追加や削除が容易になり、バージョン管理システムにおける不必要な差異"
"を減らすことができます。"

#: src/02_features.md:211
msgid "Abstraction of clock and reset"
msgstr "クロックとリセットの抽象化"

#: src/02_features.md:213
msgid ""
"There is no need to specify the polarity and synchronicity of the clock and "
"reset in the syntax; these can be specified during build-time configuration. "
"This allows generating code for both ASICs with negative asynchronous reset "
"and FPGAs with positive synchronous reset from the same Veryl code."
msgstr ""
"クロックの極性やリセットの極性と同期性を構文上指定する必要はなく、ビルド時の"
"設定で指定することができます。これにより同じVerylのコードからASIC向けの負極"
"性・非同期リセットとFPGA向けの正極性・同期リセットのそれぞれのコードを生成す"
"ることができます。"

#: src/02_features.md:218
msgid ""
"Additionally, explicit `clock` and `reset` type enables to check whether "
"clock and reset are correctly connected to registers. If there is a single "
"clock and reset in the module, the connection can be omitted."
msgstr ""
"さらに、明示的な `clock` と `reset` 型により、レジスタへのクロック・リセット"
"接続が正しく行われているかどうかを確認することができます。モジュール内にク"
"ロックとリセットが1つだけの場合、レジスタへの接続を省略することもできます。"

#: src/02_features.md:264 src/05_language_reference/02_lexical_structure.md:33
msgid "Documentation comment"
msgstr "ドキュメンテーションコメント"

#: src/02_features.md:266
msgid ""
"Writing module descriptions as documentation comments allows for automatic "
"documentation generation. You can use not only plain text but also the "
"following formats:"
msgstr ""
"ドキュメンテーションコメントとしてモジュールの説明を書いておくとドキュメント"
"を自動生成することができます。単なるテキストだけでなく、以下のフォーマットを"
"使用することができます。"

#: src/02_features.md:269
msgid "[Markdown](https://www.markdownguide.org)"
msgstr "[Markdown](https://www.markdownguide.org)"

#: src/02_features.md:270
msgid "Waveform using [WaveDrom](https://wavedrom.com)"
msgstr "[WaveDrom](https://wavedrom.com)による波形記述"

#: src/02_features.md:271
msgid "Diagram using [Mermaid](https://mermaid.js.org)"
msgstr "[Mermaid](https://mermaid.js.org)によるダイアグラム記述"

#: src/02_features.md:281
msgid ""
"```verilog\n"
"// Comment\n"
"module ModuleA;\n"
"endmodule\n"
"```"
msgstr ""
"```verilog\n"
"// コメント\n"
"module ModuleA;\n"
"endmodule\n"
"```"

#: src/02_features.md:290
msgid ""
"````veryl\n"
"/// Documentation comment written by Markdown\n"
"///\n"
"/// * list\n"
"/// * list\n"
"///\n"
"/// ```wavedrom\n"
"/// { signal: [{ name: \"Alfa\", wave: \"01.zx=ud.23.456789\" }] }\n"
"/// ```\n"
"module ModuleA {\n"
"}\n"
"````"
msgstr ""
"````veryl\n"
"/// マークダウン形式のドキュメンテーションコメント\n"
"///\n"
"/// * リスト\n"
"/// * リスト\n"
"///\n"
"/// ```wavedrom\n"
"/// { signal: [{ name: \"Alfa\", wave: \"01.zx=ud.23.456789\" }] }\n"
"/// ```\n"
"module ModuleA {\n"
"}\n"
"````"

#: src/02_features.md:307
msgid "Compound assignment operator in `always_ff`"
msgstr "`always_ff` での複合代入演算子"

#: src/02_features.md:309
msgid ""
"There is no dedicated non-blocking assignment operator; within `always_ff`, "
"non-blocking assignments are inferred, while within `always_comb`, blocking "
"assignments are inferred. Therefore, various compound assignment operators "
"can be used within `always_ff` just like within `always_comb`."
msgstr ""
"ノンブロッキング専用の代入演算子はなく、`always_ff` 内ではノンブロッキング代"
"入が、 `always_comb` 内ではブロッキング代入が推論されます。そのため "
"`always_ff` 内でも `always_comb` 内と同様に様々な複合代入演算子を使用すること"
"ができます。"

#: src/02_features.md:344
msgid "Individual namespace of enum variant"
msgstr "独立した名前空間を持つenumバリアント"

#: src/02_features.md:346
msgid ""
"Variants of an enum are defined within separate namespaces for each enum, "
"thus preventing unintended name collisions."
msgstr ""
"enumのバリアントはenum毎に独立した名前空間を持っており意図しない名前の衝突を"
"防ぐことができます。"

#: src/02_features.md:384
msgid "`repeat` of concatenation"
msgstr "ビット連結における `repeat`"

#: src/02_features.md:386
msgid ""
"By adopting the explicit `repeat` syntax as a repetition description in bit "
"concatenation, readability improves over complex combinations of `{}`."
msgstr ""
"ビット連結における繰り返し記述として明示的な `repeat` 記法を採用し、 複雑な "
"`{}` の組み合わせより可読性が向上しています。"

#: src/02_features.md:414
msgid "`if` / `case` expression"
msgstr "`if` / `case` 式"

#: src/02_features.md:416
msgid ""
"By adopting `if` and `case` expressions instead of the ternary operator, "
"readability improves, especially when comparing a large number of items."
msgstr ""
"三項演算子の代わりに if 式と case 式を採用することで、比較するアイテム数が多"
"い場合の可読性が向上します。"

#: src/02_features.md:452
msgid "Range-based `for` / `inside` / `outside`"
msgstr "範囲 `for` / `inside` / `outside`"

#: src/02_features.md:454
msgid ""
"With notation representing closed intervals `..=` and half-open intervals `.."
"`, it is possible to uniformly describe ranges using `for`, `inside`, and "
"`outside` (which denotes the inverse of `inside`)."
msgstr ""
"閉区間 `..=` と半開区間 `..` を表す記法を導入し、 `for` 、`inside` で範囲を統"
"一的に記述できるようにしました。また、`inside` の逆を意味する `outside` も導"
"入しました。"

#: src/02_features.md:486
msgid "`msb` notation"
msgstr "`msb` 記法"

#: src/02_features.md:488
msgid ""
"The `msb` notation, indicating the most significant bit, eliminates the need "
"to calculate the most significant bit from parameters, making intentions "
"clearer."
msgstr ""
"最上位ビットを示す `msb` 記法により、パラメータから最上位ビットを計算する必要"
"がなくなり、より意図を明確にすることができます。"

#: src/02_features.md:517
msgid "`let` statement"
msgstr "`let` 文"

#: src/02_features.md:519
msgid ""
"There is a dedicated `let` statement available for binding values "
"simultaneously with variable declaration, which can be used in various "
"contexts that were not supported in SystemVerilog."
msgstr ""
"変数宣言と同時に値を束縛する専用の `let` 文が用意されており、SystemVerilogで"
"はサポートされていなかった様々な場所で使用することができます。"

#: src/02_features.md:552
msgid "`<>` operator"
msgstr "`<>` 演算子"

#: src/02_features.md:554
msgid ""
"`<>` operator can connect two interfaces. It simplifies SystemVerilog's "
"interface connection requiring each member assignments."
msgstr ""
"`<>` 演算子は2つのインターフェースを接続します。SystemVerilogではインター"
"フェースを接続するためにぞれぞれのメンバーを代入する必要がありましたが、簡単"
"に接続することができるようになります。"

#: src/02_features.md:591
msgid "Named block"
msgstr "名前付きブロック"

#: src/02_features.md:593
msgid "You can define named blocks to limit the scope of variables."
msgstr ""
"変数のスコープを限定するための名前付きブロックを定義することができます。"

#: src/02_features.md:620
msgid "Visibility control"
msgstr "可視性制御"

#: src/02_features.md:622
msgid ""
"Modules without the `pub` keyword cannot be referenced from outside the "
"project and are not included in automatic documentation generation. This "
"allows distinguishing between what should be exposed externally from the "
"project and internal implementations."
msgstr ""
"`pub` キーワードの付かないモジュールはプロジェクト外から参照できず、ドキュメ"
"ントの自動生成にも含まれません。これによりプロジェクト外に公開したいものと内"
"部実装とを区別することができます。"

#: src/03_getting_started.md:3
msgid ""
"Let's start to use Veryl. In this section, we will install Veryl, create an "
"example project, and build it."
msgstr ""
"Veryl を使ってみましょう。この章では Veryl のインストール、サンプルプロジェク"
"トの作成とビルドまでを行います。"

#: src/03_getting_started/01_installation.md:3
msgid ""
"Veryl can be intalled through the official toolchain installer `verylup`. We "
"recommend to use `verylup` because it provides some usefule features like "
"toolchain update."
msgstr ""
"Veryl は公式のツールチェーンインストーラ `verylup` を使ってインストールできま"
"す。ツールチェーンのアップデートなど便利な機能があるので `verylup` の使用を推"
"奨します。"

#: src/03_getting_started/01_installation.md:6
msgid ""
"Note: If you want install on an enviromnent without internet access, you can "
"use [offline installation](../06_development_environment/13_verylup."
"md#offline-installation)."
msgstr ""
"注: インターネットアクセスのない環境にインストールしたい場合は [オフラインイ"
"ンストール](../06_development_environment/13_verylup.md#offline-"
"installation) が利用できます。"

#: src/03_getting_started/01_installation.md:8
msgid "Requirement"
msgstr "要件"

#: src/03_getting_started/01_installation.md:10
msgid ""
"Veryl uses `git` command internally. Please confirm `git` can be launched."
msgstr ""
"Veryl は `git` コマンドを内部で使用します。 `git` が起動できることを確認して"
"おいてください。"

#: src/03_getting_started/01_installation.md:12
msgid "Install verylup"
msgstr "verylup のインストール"

#: src/03_getting_started/01_installation.md:14
msgid "Download binary"
msgstr "バイナリのダウンロード"

#: src/03_getting_started/01_installation.md:16
msgid ""
"Download from [release page](https://github.com/veryl-lang/verylup/releases/"
"latest), and extract to the directory in `PATH`."
msgstr ""
"[リリースページ](https://github.com/veryl-lang/verylup/releases/latest)からダ"
"ウンロードして、パスの通ったところに展開してください。"

#: src/03_getting_started/01_installation.md:18
msgid "Cargo"
msgstr "Cargo"

#: src/03_getting_started/01_installation.md:20
msgid "You can install with [cargo](https://crates.io/crates/verylup)."
msgstr ""
"[cargo](https://crates.io/crates/verylup) コマンドからインストールすることも"
"できます。"

#: src/03_getting_started/01_installation.md:26
msgid "Setup verylup"
msgstr "verylup のセットアップ"

#: src/03_getting_started/01_installation.md:28
msgid ""
"After installing verylup, the following command is required once at first. "
"It downloads the latest toolchain and creates `veryl` and `veryl-ls` command "
"at the same location as verylup."
msgstr ""
"verylup をインストールした後、以下のコマンドを1回実行してください。最新のツー"
"ルチェーンをダウンロードし、`veryl` と `veryl-ls` コマンドをverylupと同じ場所"
"に作成します。"

#: src/03_getting_started/01_installation.md:35
msgid "Now `veryl` command can be used!"
msgstr "これで `veryl` コマンドが使えるようになりました。"

#: src/03_getting_started/01_installation.md:37
msgid "Editor integration"
msgstr "エディタ設定"

#: src/03_getting_started/01_installation.md:39
msgid ""
"[Visual Studio Code](https://azure.microsoft.com/ja-jp/products/visual-"
"studio-code) and [Vim](https://github.com/vim/vim) / [Neovim](https://neovim."
"io) are supported officially."
msgstr ""
"公式には [Visual Studio Code](https://azure.microsoft.com/ja-jp/products/"
"visual-studio-code) と [Vim](https://github.com/vim/vim) / [Neovim](https://"
"neovim.io) がサポートされています。"

#: src/03_getting_started/01_installation.md:41
msgid "Visual Studio Code"
msgstr "Visual Studio Code"

#: src/03_getting_started/01_installation.md:43
msgid ""
"For Visual Studio Code, Veryl extension is provided. The extension provides "
"file type detection, syntex highlight and language server integration. You "
"can install it by searching \"Veryl\" in extension panel or the following "
"URL."
msgstr ""
"Visual Studio Code 向けに Veryl 拡張が提供されています。拡張はファイルタイプ"
"の検出とシンタックスハイライト、言語サーバの組み込みを提供します。拡張パネル"
"から \"Veryl\" で検索するか、以下の URL からインストールしてください。"

#: src/03_getting_started/01_installation.md:47
msgid ""
"[Veryl extension for Visual Studio Code](https://marketplace.visualstudio."
"com/items?itemName=dalance.vscode-veryl)"
msgstr ""
"[Veryl extension for Visual Studio Code](https://marketplace.visualstudio."
"com/items?itemName=dalance.vscode-veryl)"

#: src/03_getting_started/01_installation.md:49
msgid "Vim / Neovim"
msgstr "Vim / Neovim"

#: src/03_getting_started/01_installation.md:51
msgid ""
"For Vim / Neovim, Veryl plugin is provided. The plugin provides file type "
"detection, syntex highlight. There are some instructions for plugin "
"installation and language server integration in the following URL."
msgstr ""
"Vim / Neovim 向けに Veryl プラグインが提供されています。プラグインはファイル"
"タイプの検出とシンタックスハイライトを提供します。プラグインのインストールと"
"言語サーバの組み込みは以下の URL を参照してください。"

#: src/03_getting_started/01_installation.md:55
msgid "[Vim / Neovim plugin](https://github.com/veryl-lang/veryl.vim)"
msgstr "[Vim / Neovim plugin](https://github.com/veryl-lang/veryl.vim)"

#: src/03_getting_started/01_installation.md:57
msgid "Other Editors"
msgstr "そのほかのエディタ"

#: src/03_getting_started/01_installation.md:59
msgid ""
"Veryl provides language server. So other editors supporting language server "
"(ex. Emacs) can use it."
msgstr ""
"Veryl は言語サーバを提供しているので、言語サーバをサポートしているエディタ"
"（例えば Emacs）であれば利用できます。"

#: src/03_getting_started/01_installation.md:61
msgid "Shell Completion"
msgstr "シェル補完"

#: src/03_getting_started/01_installation.md:63
msgid ""
"Shell completion script for `veryl` and `verylup` is provided through "
"`verylup completion`. For example, the following command generates "
"completion script for zsh."
msgstr ""
"`veryl` と `verylup` のシェル補完スクリプトは `verylup completion` によって提"
"供されます。例えば以下のコマンドはzsh向けの補完スクリプトを生成します。"

#: src/03_getting_started/01_installation.md:71
msgid "Supported shells are below:"
msgstr "サポートされているシェルは以下の通りです。"

#: src/03_getting_started/01_installation.md:73
msgid "Bash"
msgstr "Bash"

#: src/03_getting_started/01_installation.md:74
msgid "Elvish"
msgstr "Elvish"

#: src/03_getting_started/01_installation.md:75
msgid "Fish"
msgstr "Fish"

#: src/03_getting_started/01_installation.md:76
msgid "PowerShell"
msgstr "PowerShell"

#: src/03_getting_started/01_installation.md:77
msgid "Zsh"
msgstr "Zsh"

#: src/03_getting_started/01_installation.md:79
msgid ""
"Please refer the documentation of each shell for usage of generated scripts."
msgstr ""
"生成されたスクリプトの使い方は各シェルのドキュメントを参照してください。"

#: src/03_getting_started/02_hello_world.md:3
msgid "Create Project"
msgstr "プロジェクトを作る"

#: src/03_getting_started/02_hello_world.md:5
msgid "At first, a new Veryl project can be created by:"
msgstr "まず始めに、新しい Veryl プロジェクトを作りましょう。"

#: src/03_getting_started/02_hello_world.md:11
msgid ""
"After the command, the following directory and file will be created. If "
"`git` command is available, the directory is initialized as Git repository "
"and the default `.gitignore` are added."
msgstr ""
"コマンドを実行すると、以下のディレクトリとファイルが作成されます。もし `git` "
"コマンドが利用できれば、ディレクトリは Git リポジトリとして初期化され、デフォ"
"ルトの `.gitignore` ファイルも追加されます。"

#: src/03_getting_started/02_hello_world.md:14
msgid ""
"```\n"
"$ veryl new hello\n"
"[INFO ]      Created \"hello\" project\n"
"$ cd hello\n"
"$ tree\n"
".\n"
"├── src\n"
"└── Veryl.toml\n"
"\n"
"1 directory, 1 file\n"
"```"
msgstr ""
"```\n"
"$ veryl new hello\n"
"[INFO ]      Created \"hello\" project\n"
"$ cd hello\n"
"$ tree\n"
".\n"
"├── src\n"
"└── Veryl.toml\n"
"\n"
"1 directory, 1 file\n"
"```"

#: src/03_getting_started/02_hello_world.md:26
msgid "`Veryl.toml` is the project configuration."
msgstr "`Veryl.toml` はプロジェクトの設定ファイルです。"

#: src/03_getting_started/02_hello_world.md:28
msgid ""
"```toml\n"
"[project]\n"
"name = \"hello\"\n"
"version = \"0.1.0\"\n"
"[build]\n"
"source = \"src\"\n"
"target = {type = \"directory\", path = \"target\"}\n"
"```"
msgstr ""
"```toml\n"
"[project]\n"
"name = \"hello\"\n"
"version = \"0.1.0\"\n"
"[build]\n"
"source = \"src\"\n"
"target = {type = \"directory\", path = \"target\"}\n"
"```"

#: src/03_getting_started/02_hello_world.md:37
msgid ""
"The description of all configuration is [here]"
"(../06_development_environment/01_project_configuration.md)."
msgstr ""
"全設定の説明は[こちら]"
"(../06_development_environment/01_project_configuration.md)。"

#: src/03_getting_started/02_hello_world.md:39
msgid "Write Code"
msgstr "コードを書く"

#: src/03_getting_started/02_hello_world.md:41
msgid ""
"You can add source codes at an arbitrary position in the project directory. "
"This is because Veryl project can be independent or integrated to other "
"SystemVerilog project. The extension of Veryl's source codes is `.veryl`."
msgstr ""
"ソースコードはプロジェクトディレクトリ内のどこに書いても構いません。これは "
"Veryl プロジェクトが独立したプロジェクトである場合もあれば、他の"
"SystemVerilog プロジェクトに組み込まれている場合もあるからです。Veryl のソー"
"スコードの拡張子は `.veryl` です。"

#: src/03_getting_started/02_hello_world.md:45
msgid "For example, put the following code to `src/hello.veryl`."
msgstr "例えば以下のコードを `src/hello.veryl` に書いてみましょう。"

#: src/03_getting_started/02_hello_world.md:47
#: src/05_language_reference/05_statement/02_function_call.md:6
msgid ""
"```veryl,playground\n"
"module ModuleA {\n"
"    initial {\n"
"        $display(\"Hello, world!\");\n"
"    }\n"
"}\n"
"```"
msgstr ""
"```veryl,playground\n"
"module ModuleA {\n"
"    initial {\n"
"        $display(\"Hello, world!\");\n"
"    }\n"
"}\n"
"```"

#: src/03_getting_started/02_hello_world.md:65
msgid ""
"Note: Some source codes in the book have play button \"▶\" which will be "
"appeared when mouse cursor is hovered at the code. If you click the button, "
"the transpiled SystemVerilog code will appear. Please try to click the "
"button of `module ModuleA` code."
msgstr ""
"注：この本のいくつかのソースコードには、マウスをホバーすると現れるプレイボタ"
"ン \"▶\" があります。ボタンをクリックすると、トランスパイルされた "
"SystemVerilog のコードが現れます。`module ModuleA` のコードのボタンを押してみ"
"ましょう。"

#: src/03_getting_started/02_hello_world.md:68
msgid "Build Code"
msgstr "ビルドする"

#: src/03_getting_started/02_hello_world.md:70
msgid "You can generate a SystemVerilog code by `veryl build`."
msgstr "`veryl build` コマンドで SystemVerilog のソースコードを生成できます。"

#: src/03_getting_started/02_hello_world.md:91
msgid ""
"By default, SystemVerilog code will be generated at the same directory as "
"Veryl code. The generated code is `src/hello.sv`."
msgstr ""
"デフォルトでは SystemVerilog のコードは Veryl のコードと同じディレクトリに生"
"成されます。つまり `src/hello.sv` です。"

#: src/03_getting_started/02_hello_world.md:94
msgid ""
"```verilog\n"
"module hello_ModuleA;\n"
"    initial begin\n"
"        $display(\"Hello, world!\");\n"
"    end\n"
"endmodule\n"
"//# sourceMappingURL=hello.sv.map\n"
"```"
msgstr ""
"```verilog\n"
"module hello_ModuleA;\n"
"    initial begin\n"
"        $display(\"Hello, world!\");\n"
"    end\n"
"endmodule\n"
"//# sourceMappingURL=hello.sv.map\n"
"```"

#: src/03_getting_started/02_hello_world.md:103
msgid ""
"Additionally, `hello.f` which is the filelist of generated codes will be "
"generated. You can use it for SystemVerilog compiler. The following example "
"is to use [Verilator](https://www.veripool.org/verilator/)."
msgstr ""
"さらに、生成されたコードのファイルリスト `hello.f` も生成されます。これは "
"SystemVerilog コンパイラで使用できます。[Verilator](https://www.veripool.org/"
"verilator/) で使用するには以下のようにします。"

#: src/03_getting_started/02_hello_world.md:111
msgid "Clean up the Generated Code"
msgstr "生成されたコードを片づける"

#: src/03_getting_started/02_hello_world.md:113
msgid "The generated code can be cleaned up by `veryl clean`."
msgstr "生成されたコードは `veryl clean` コマンドで削除することができます。"

#: src/04_code_examples.md:3
msgid ""
"Veryl has the almost same semantics as SystemVerilog. If you are used to "
"SystemVerilog, you will guess Veryl semantics with a small example source "
"code."
msgstr ""
"Veryl は SystemVerilog とほとんど同じセマンティクスを持っています。もし "
"SystemVerilog に慣れていれば、いくつかの例をみるだけで Veryl の構文をだいたい"
"把握できるでしょう。"

#: src/04_code_examples.md:6
msgid ""
"This is a small example. In the following example, comments show the "
"difference with SystemVerilog syntax."
msgstr ""
"この小さな例では、コメントに SystemVerilog 構文との違いが書かれています。"

#: src/04_code_examples.md:9
msgid ""
"```veryl,playground,editable\n"
"module ModuleA (\n"
"    // name is first, and type is followed after `:`\n"
"    // bit width is represented by `<>`\n"
"    i_data: input  logic<10>,\n"
"    o_data: output logic<10>,\n"
"\n"
"    // use `{}` instead of `begin`/`end`\n"
") {\n"
"    assign o_data = i_data;\n"
"}\n"
"```"
msgstr ""
"```veryl,playground,editable\n"
"module ModuleA (\n"
"    // 識別子が先で `:` の後に型が来ます\n"
"    // ビット幅は `<>` で表されます\n"
"    i_data: input  logic<10>,\n"
"    o_data: output logic<10>,\n"
"\n"
"    // `begin`/`end` ではなく `{}` を使います\n"
") {\n"
"    assign o_data = i_data;\n"
"}\n"
"```"

#: src/04_code_examples.md:22
msgid ""
"Additionally, the codeblocks in this chapter can be edit. Let's try to edit "
"and play each code."
msgstr ""
"さらに、この章のコードブロックは編集することもできます。それぞれのコードを編"
"集して実行してみましょう。"

#: src/04_code_examples.md:24
msgid ""
"A source code of Veryl has some `module`, `interface` and `package` like "
"SystemVerilog. In this chapter, we'll show the some example source codes of "
"them."
msgstr ""
"Veryl のソースコードは SystemVerilog と同様に、`module`、`interface`、"
"`package` を持ちます。この章ではそれらの例を示します。"

#: src/04_code_examples/01_module.md:3
msgid ""
"```veryl,playground,editable\n"
"// module definition\n"
"module ModuleA #(\n"
"    param ParamA: u32 = 10,\n"
"    const ParamB: u32 = 10, // trailing comma is allowed\n"
") (\n"
"    i_clk : input  clock            , // `clock` is a special type for "
"clock\n"
"    i_rst : input  reset            , // `reset` is a special type for "
"reset\n"
"    i_sel : input  logic            ,\n"
"    i_data: input  logic<ParamA> [2], // `[]` means unpacked array in "
"SystemVerilog\n"
"    o_data: output logic<ParamA>    , // `<>` means packed array in "
"SystemVerilog\n"
") {\n"
"    // const parameter declaration\n"
"    //   `param` is not allowed in module\n"
"    const ParamC: u32 = 10;\n"
"\n"
"    // variable declaration\n"
"    var r_data0: logic<ParamA>;\n"
"    var r_data1: logic<ParamA>;\n"
"    var r_data2: logic<ParamA>;\n"
"\n"
"    // value binding\n"
"    let _w_data2: logic<ParamA> = i_data[0];\n"
"\n"
"    // always_ff statement with reset\n"
"    //   `always_ff` can take a mandatory clock and a optional reset\n"
"    //   `if_reset` means `if (i_rst)`. This conceals reset porality\n"
"    //   `()` of `if` is not required\n"
"    //   `=` in `always_ff` is non-blocking assignment\n"
"    always_ff (i_clk, i_rst) {\n"
"        if_reset {\n"
"            r_data0 = 0;\n"
"        } else if i_sel {\n"
"            r_data0 = i_data[0];\n"
"        } else {\n"
"            r_data0 = i_data[1];\n"
"        }\n"
"    }\n"
"\n"
"    // always_ff statement without reset\n"
"    always_ff (i_clk) {\n"
"        r_data1 = r_data0;\n"
"    }\n"
"\n"
"    // clock and reset can be omitted\n"
"    // if there is a single clock and reset in the module\n"
"    always_ff {\n"
"        r_data2 = r_data1;\n"
"    }\n"
"\n"
"    assign o_data = r_data1;\n"
"}\n"
"```"
msgstr ""
"```veryl,playground,editable\n"
"// モジュール定義\n"
"module ModuleA #(\n"
"    param ParamA: u32 = 10,\n"
"    const ParamB: u32 = 10, // 末尾カンマが可能です\n"
") (\n"
"    i_clk : input  clock            , // `clock` はクロックのための特別な型で"
"す\n"
"    i_rst : input  reset            , // `reset` はリセットのための特別な型で"
"す\n"
"    i_sel : input  logic            ,\n"
"    i_data: input  logic<ParamA> [2], // `[]` は SystemVerilog のアンパック配"
"列です\n"
"    o_data: output logic<ParamA>    , // `<>` は SystemVerilog のパック配列で"
"す\n"
") {\n"
"    // ローカルパラメータ宣言\n"
"    //   モジュール内では `param` は使えません\n"
"    const ParamC: u32 = 10;\n"
"\n"
"    // 変数宣言\n"
"    var r_data0: logic<ParamA>;\n"
"    var r_data1: logic<ParamA>;\n"
"    var r_data2: logic<ParamA>;\n"
"\n"
"    // 値の束縛\n"
"    let _w_data2: logic<ParamA> = i_data[0];\n"
"\n"
"    // リセット付き always_ff 文\n"
"    //   `always_ff` はクロック（必須）とリセット（オプション）を持ちます\n"
"    //   `if_reset` は `if (i_rst)` を意味し、リセット極性を隠蔽するための構"
"文です\n"
"    //   `if` 文に `()` はいりません\n"
"    //   `always_ff` 内の `=` はノンブロッキング代入です\n"
"    always_ff (i_clk, i_rst) {\n"
"        if_reset {\n"
"            r_data0 = 0;\n"
"        } else if i_sel {\n"
"            r_data0 = i_data[0];\n"
"        } else {\n"
"            r_data0 = i_data[1];\n"
"        }\n"
"    }\n"
"\n"
"    // リセットなし always_ff 文\n"
"    always_ff (i_clk) {\n"
"        r_data1 = r_data0;\n"
"    }\n"
"\n"
"    // モジュール内にクロックとリセットが1つしかない場合\n"
"    // クロックとリセットの指定は省略できます\n"
"    always_ff {\n"
"        r_data2 = r_data1;\n"
"    }\n"
"\n"
"    assign o_data = r_data1;\n"
"}\n"
"```"

#: src/04_code_examples/02_instantiation.md:3
msgid ""
"```veryl,playground,editable\n"
"module ModuleA #(\n"
"    param ParamA: u32 = 10,\n"
") (\n"
"    i_clk : input  clock        ,\n"
"    i_rst : input  reset        ,\n"
"    i_data: input  logic<ParamA>,\n"
"    o_data: output logic<ParamA>,\n"
") {\n"
"    var r_data1: logic<ParamA>;\n"
"    var r_data2: logic<ParamA>;\n"
"\n"
"    assign r_data1 = i_data + 1;\n"
"    assign o_data  = r_data2 + 2;\n"
"\n"
"    // instance declaration\n"
"    //   `inst` keyword starts instance declaration\n"
"    //   port connnection can be specified by `()`\n"
"    //   each port connection is `[port_name]:[variable]`\n"
"    //   `[port_name]` means `[port_name]:[port_name]`\n"
"    inst u_module_b: ModuleB (\n"
"        i_clk          ,\n"
"        i_data: r_data1,\n"
"        o_data: r_data2,\n"
"    );\n"
"\n"
"    // instance declaration with parameter override\n"
"    //   notation of parameter connection is the same as port\n"
"    inst u_module_c: ModuleC #( ParamA, ParamB: 10 );\n"
"}\n"
"\n"
"module ModuleB #(\n"
"    param ParamA: u32 = 10,\n"
") (\n"
"    i_clk : input  clock        ,\n"
"    i_data: input  logic<ParamA>,\n"
"    o_data: output logic<ParamA>,\n"
") {\n"
"    assign o_data = 1;\n"
"}\n"
"\n"
"module ModuleC #(\n"
"    param ParamA: u32 = 10,\n"
"    param ParamB: u32 = 10,\n"
") () {}\n"
"```"
msgstr ""
"```veryl,playground,editable\n"
"module ModuleA #(\n"
"    param ParamA: u32 = 10,\n"
") (\n"
"    i_clk : input  clock        ,\n"
"    i_rst : input  reset        ,\n"
"    i_data: input  logic<ParamA>,\n"
"    o_data: output logic<ParamA>,\n"
") {\n"
"    var r_data1: logic<ParamA>;\n"
"    var r_data2: logic<ParamA>;\n"
"\n"
"    assign r_data1 = i_data + 1;\n"
"    assign o_data  = r_data2 + 2;\n"
"\n"
"    // インスタンス宣言\n"
"    //   インスタンス宣言は `inst` キーワードではじまります\n"
"    //   ポート接続は `()` 内で指定します\n"
"    //   各ポートの接続は `[port_name]:[variable]` のような形式になります\n"
"    //   `[port_name]` は `[port_name]:[port_name]` を意味します\n"
"    inst u_module_b: ModuleB (\n"
"        i_clk          ,\n"
"        i_data: r_data1,\n"
"        o_data: r_data2,\n"
"    );\n"
"\n"
"    // パラメータオーバーライド付きインスタンス宣言\n"
"    //   パラメータの接続記法はポートと同様です\n"
"    inst u_module_c: ModuleC #( ParamA, ParamB: 10 );\n"
"}\n"
"\n"
"module ModuleB #(\n"
"    param ParamA: u32 = 10,\n"
") (\n"
"    i_clk : input  clock        ,\n"
"    i_data: input  logic<ParamA>,\n"
"    o_data: output logic<ParamA>,\n"
") {\n"
"    assign o_data = 1;\n"
"}\n"
"\n"
"module ModuleC #(\n"
"    param ParamA: u32 = 10,\n"
"    param ParamB: u32 = 10,\n"
") () {}\n"
"```"

#: src/04_code_examples/03_interface.md:3
msgid ""
"```veryl,playground,editable\n"
"// interface definition\n"
"interface InterfaceA #(\n"
"    param ParamA: u32 = 1,\n"
"    param ParamB: u32 = 1,\n"
") {\n"
"    const ParamC: u32 = 1;\n"
"\n"
"    var a: logic<ParamA>;\n"
"    var b: logic<ParamA>;\n"
"    var c: logic<ParamA>;\n"
"\n"
"    // modport definition\n"
"    modport master {\n"
"        a: input ,\n"
"        b: input ,\n"
"        c: output,\n"
"    }\n"
"\n"
"    modport slave {\n"
"        a: input ,\n"
"        b: input ,\n"
"        c: output,\n"
"    }\n"
"}\n"
"\n"
"module ModuleA (\n"
"    i_clk: input clock,\n"
"    i_rst: input reset,\n"
"    // port declaration by modport\n"
"    intf_a_mst: modport InterfaceA::master,\n"
"    intf_a_slv: modport InterfaceA::slave ,\n"
") {\n"
"    // interface instantiation\n"
"    inst u_intf_a: InterfaceA [10];\n"
"}\n"
"```"
msgstr ""
"```veryl,playground,editable\n"
"// インターフェース定義\n"
"interface InterfaceA #(\n"
"    param ParamA: u32 = 1,\n"
"    param ParamB: u32 = 1,\n"
") {\n"
"    const ParamC: u32 = 1;\n"
"\n"
"    var a: logic<ParamA>;\n"
"    var b: logic<ParamA>;\n"
"    var c: logic<ParamA>;\n"
"\n"
"    // modport 定義\n"
"    modport master {\n"
"        a: input ,\n"
"        b: input ,\n"
"        c: output,\n"
"    }\n"
"\n"
"    modport slave {\n"
"        a: input ,\n"
"        b: input ,\n"
"        c: output,\n"
"    }\n"
"}\n"
"\n"
"module ModuleA (\n"
"    i_clk: input clock,\n"
"    i_rst: input reset,\n"
"    // modport によるポート宣言\n"
"    intf_a_mst: modport InterfaceA::master,\n"
"    intf_a_slv: modport InterfaceA::slave ,\n"
") {\n"
"    // インターフェースのインスタンス\n"
"    inst u_intf_a: InterfaceA [10];\n"
"}\n"
"```"

#: src/04_code_examples/04_package.md:3
msgid ""
"```veryl,playground,editable\n"
"// package definition\n"
"package PackageA {\n"
"    const ParamA: u32 = 1;\n"
"    const ParamB: u32 = 1;\n"
"\n"
"    function FuncA (\n"
"        a: input logic<ParamA>,\n"
"    ) -> logic<ParamA> {\n"
"        return a + 1;\n"
"    }\n"
"}\n"
"\n"
"module ModuleA {\n"
"    let a : logic<10> = PackageA::ParamA;\n"
"    let _b: logic<10> = PackageA::FuncA(a);\n"
"}\n"
"```"
msgstr ""
"```veryl,playground,editable\n"
"// パッケージ定義\n"
"package PackageA {\n"
"    const ParamA: u32 = 1;\n"
"    const ParamB: u32 = 1;\n"
"\n"
"    function FuncA (\n"
"        a: input logic<ParamA>,\n"
"    ) -> logic<ParamA> {\n"
"        return a + 1;\n"
"    }\n"
"}\n"
"\n"
"module ModuleA {\n"
"    let a : logic<10> = PackageA::ParamA;\n"
"    let _b: logic<10> = PackageA::FuncA(a);\n"
"}\n"
"```"

#: src/05_language_reference.md:3
msgid "In this chapter, we'll discuss the lauguage definition of Veryl."
msgstr "この章では Veryl の言語仕様について説明します。"

#: src/05_language_reference/01_source_code_structure.md:3
msgid ""
"Veryl's source code is composed by some `module`, `interface` and `package`."
msgstr ""
"Veryl のソースコードはいくつかの `module`、`interface`、`package` からなりま"
"す。"

#: src/05_language_reference/01_source_code_structure.md:15
msgid ""
"The name of `module`, `interface` and `package` in the transpiled code will "
"added project name as prefix. In the sample code, `project_` will be added. "
"It is to avoid name conflict between projects."
msgstr ""
"トランスパイルされたコードにおける `module`、`interface`、`package` の名前に"
"は先頭にプロジェクト名が付きます。このサンプルコードでは `project_` が付きま"
"す。これはプロジェクト間で名前が衝突するのを防ぐためです。"

#: src/05_language_reference/02_lexical_structure.md:3
msgid ""
"This chapter shows the lexical structure of Veryl. At the first, we'll "
"discuss about the general parts in it."
msgstr ""
"この章では Veryl の字句構造について説明します。まず始めに、全体的なことがらか"
"らです。"

#: src/05_language_reference/02_lexical_structure.md:6
msgid "Encoding"
msgstr "エンコーディング"

#: src/05_language_reference/02_lexical_structure.md:8
msgid "The encoding of Veryl source code should be UTF-8."
msgstr "Veryl のソースコードは UTF-8 エンコーディングでなければなりません。"

#: src/05_language_reference/02_lexical_structure.md:10
msgid "White Space"
msgstr "空白"

#: src/05_language_reference/02_lexical_structure.md:12
msgid ""
"` `(white space), `\\t` and `\\n` are treated as white space. All of them "
"are skipped by Veryl's parser."
msgstr ""
"` `（空白）、`\\t`、`\\n` は空白として扱われ、Veryl のパーサはこれらを全て無"
"視します。"

#: src/05_language_reference/02_lexical_structure.md:15
msgid "Comment"
msgstr "コメント"

#: src/05_language_reference/02_lexical_structure.md:17
msgid ""
"Single line comment and multi line comment can be used. Almost all comment "
"will be outputted at the transpiled code."
msgstr ""
"行コメントと複数行コメントが使えます。ほとんどのコメントはトランスパイルされ"
"たコードにも出力されます。"

#: src/05_language_reference/02_lexical_structure.md:20
msgid ""
"```veryl,playground\n"
"// single line comment\n"
"\n"
"/*\n"
"multi\n"
"\n"
"line\n"
"\n"
"comment\n"
"*/\n"
"\n"
"```"
msgstr ""
"```veryl,playground\n"
"// 行コメント\n"
"\n"
"/*\n"
"複数\n"
"\n"
"行\n"
"\n"
"コメント\n"
"*/\n"
"\n"
"```"

#: src/05_language_reference/02_lexical_structure.md:35
msgid ""
"Signle line comment starts with `///` is treated as documentation comment. "
"Documentation comment is used for document generation."
msgstr ""
"`///` ではじまる行コメントはドキュメンテーションコメントとして扱われます。ド"
"キュメンテーションコメントはドキュメントの生成に使われます。"

#: src/05_language_reference/02_lexical_structure.md:38
msgid ""
"```veryl,playground\n"
"/// documentation comment\n"
"\n"
"```"
msgstr ""
"```veryl,playground\n"
"/// ドキュメンテーションコメント\n"
"\n"
"```"

#: src/05_language_reference/02_lexical_structure.md:43
msgid "Identifier"
msgstr "識別子"

#: src/05_language_reference/02_lexical_structure.md:45
msgid ""
"Identifier is composed with ASCII alphabet and number and `_`. Leading "
"number is not allowed. The following regular expression shows the definition."
msgstr ""
"識別子は ASCII のアルファベットと数値、 `_` からなります。先頭が数値であって"
"はなりません。正式な定義は以下の正規表現です。"

#: src/05_language_reference/02_lexical_structure.md:53
msgid "Raw Identifier"
msgstr "生識別子"

#: src/05_language_reference/02_lexical_structure.md:55
msgid ""
"Some keywords of Veryl can be used as identifier in SystemVerilog. To access "
"these identifiers, raw identifier can be used. For example, `clock` which is "
"a keyword of Veryl can be used as identifier like `r#clock`. The `r#clock` "
"will be transpiled to `clock` in SystemVerilog."
msgstr ""
"Veryl のいくつかのキーワードは SystemVerilog では識別子として使用できるため、"
"これらの識別子にアクセスするために生識別子を使います。例えば、`clock` は "
"Veryl のキーワードなので `r#clock` とします。`r#clock` は SystemVerilog では "
"`clock` にトランスパイルされます。"

#: src/05_language_reference/02_lexical_structure.md:60
msgid "String"
msgstr "文字列"

#: src/05_language_reference/02_lexical_structure.md:62
msgid ""
"String is surrounded by `\"`. Escape by `\\` can be used like `\\\"`, `\\n` "
"and so on."
msgstr ""
"`\"` で囲んだものが文字列になります。`\\\"` や `\\n` のように `\\` によるエス"
"ケープも可能です。"

#: src/05_language_reference/02_lexical_structure.md:65
msgid ""
"```\n"
"\"Hello, World!\"\n"
"```"
msgstr ""
"```\n"
"\"Hello, World!\"\n"
"```"

#: src/05_language_reference/02_lexical_structure/01_operator.md:3
msgid ""
"Almost all operators are the same as SystemVerilog. Please be careful the "
"some differences."
msgstr ""
"ほとんどの演算子は SystemVerilog と同じです。いくつか違いがあるので注意してく"
"ださい。"

#: src/05_language_reference/02_lexical_structure/01_operator.md:6
msgid "`<:` less than operator which is the same as `<` in SystemVerilog."
msgstr "`<:` 小なり演算子です。SystemVerilog の `<` と同じです。"

#: src/05_language_reference/02_lexical_structure/01_operator.md:7
msgid "`>:` greater than operator which is the same as `>` in SystemVerilog."
msgstr "`>:` 大なり演算子です。SystemVerilog の `>` と同じです。"

#: src/05_language_reference/02_lexical_structure/01_operator.md:9
msgid ""
"```veryl\n"
"// unary arithmetic\n"
"a = +1;\n"
"a = -1;\n"
"\n"
"// unary logical\n"
"a = !1;\n"
"a = ~1;\n"
"\n"
"// unary reduce\n"
"a = &1;\n"
"a = |1;\n"
"a = ^1;\n"
"a = ~&1;\n"
"a = ~|1;\n"
"a = ~^1;\n"
"a = ^~1;\n"
"\n"
"// binary arithmetic\n"
"a = 1 ** 1;\n"
"a = 1 * 1;\n"
"a = 1 / 1;\n"
"a = 1 % 1;\n"
"a = 1 + 1;\n"
"a = 1 - 1;\n"
"\n"
"// binary shift\n"
"a = 1 << 1;\n"
"a = 1 >> 1;\n"
"a = 1 <<< 1;\n"
"a = 1 >>> 1;\n"
"\n"
"// binary compare\n"
"a = 1 <: 1;\n"
"a = 1 <= 1;\n"
"a = 1 >: 1;\n"
"a = 1 >= 1;\n"
"a = 1 == 1;\n"
"a = 1 != 1;\n"
"a = 1 === 1;\n"
"a = 1 !== 1;\n"
"a = 1 ==? 1;\n"
"a = 1 !=? 1;\n"
"\n"
"// binary bitwise\n"
"a = 1 & 1;\n"
"a = 1 ^ 1;\n"
"a = 1 ~^ 1;\n"
"a = 1 ^~ 1;\n"
"a = 1 | 1;\n"
"\n"
"// binary logical\n"
"a = 1 && 1;\n"
"a = 1 || 1;\n"
"```"
msgstr ""
"```veryl\n"
"// 単項算術演算\n"
"a = +1;\n"
"a = -1;\n"
"\n"
"// 単項論理演算\n"
"a = !1;\n"
"a = ~1;\n"
"\n"
"// 単項集約演算\n"
"a = &1;\n"
"a = |1;\n"
"a = ^1;\n"
"a = ~&1;\n"
"a = ~|1;\n"
"a = ~^1;\n"
"a = ^~1;\n"
"\n"
"// 二項算術演算\n"
"a = 1 ** 1;\n"
"a = 1 * 1;\n"
"a = 1 / 1;\n"
"a = 1 % 1;\n"
"a = 1 + 1;\n"
"a = 1 - 1;\n"
"\n"
"// シフト演算\n"
"a = 1 << 1;\n"
"a = 1 >> 1;\n"
"a = 1 <<< 1;\n"
"a = 1 >>> 1;\n"
"\n"
"// 比較演算\n"
"a = 1 <: 1;\n"
"a = 1 <= 1;\n"
"a = 1 >: 1;\n"
"a = 1 >= 1;\n"
"a = 1 == 1;\n"
"a = 1 != 1;\n"
"a = 1 === 1;\n"
"a = 1 !== 1;\n"
"a = 1 ==? 1;\n"
"a = 1 !=? 1;\n"
"\n"
"// ビット演算\n"
"a = 1 & 1;\n"
"a = 1 ^ 1;\n"
"a = 1 ~^ 1;\n"
"a = 1 ^~ 1;\n"
"a = 1 | 1;\n"
"\n"
"// 二項論理演算\n"
"a = 1 && 1;\n"
"a = 1 || 1;\n"
"```"

#: src/05_language_reference/02_lexical_structure/02_number.md:3
msgid "Integer"
msgstr "整数"

#: src/05_language_reference/02_lexical_structure/02_number.md:5
msgid ""
"```veryl\n"
"// integer\n"
"0123456789\n"
"01_23_45_67_89\n"
"\n"
"// binary\n"
"32'b01xzXZ\n"
"32'b01_xz_XZ\n"
"\n"
"// octal\n"
"36'o01234567xzXZ\n"
"36'o01_23_45_67_xz_XZ\n"
"\n"
"// decimal\n"
"32'd0123456789\n"
"32'd01_23_45_67_89\n"
"\n"
"// hex\n"
"128'h0123456789abcdefxzABCDEFXZ\n"
"128'h01_23_45_67_89_ab_cd_ef_xz_AB_CD_EF_XZ\n"
"```"
msgstr ""
"```veryl\n"
"// 整数\n"
"0123456789\n"
"01_23_45_67_89\n"
"\n"
"// 2進数\n"
"32'b01xzXZ\n"
"32'b01_xz_XZ\n"
"\n"
"// 8進数\n"
"36'o01234567xzXZ\n"
"36'o01_23_45_67_xz_XZ\n"
"\n"
"// 10進数\n"
"32'd0123456789\n"
"32'd01_23_45_67_89\n"
"\n"
"// 16進数\n"
"128'h0123456789abcdefxzABCDEFXZ\n"
"128'h01_23_45_67_89_ab_cd_ef_xz_AB_CD_EF_XZ\n"
"```"

#: src/05_language_reference/02_lexical_structure/02_number.md:27
msgid "Set all bits"
msgstr "全ビットのセット"

#: src/05_language_reference/02_lexical_structure/02_number.md:29
msgid ""
"```veryl\n"
"// all 0\n"
"'0\n"
"\n"
"// all 1\n"
"'1\n"
"\n"
"// all x\n"
"'x\n"
"'X\n"
"\n"
"// all z\n"
"'z\n"
"'Z\n"
"```"
msgstr ""
"```veryl\n"
"// 全て 0\n"
"'0\n"
"\n"
"// 全て 1\n"
"'1\n"
"\n"
"// 全て x\n"
"'x\n"
"'X\n"
"\n"
"// 全て z\n"
"'z\n"
"'Z\n"
"```"

#: src/05_language_reference/02_lexical_structure/02_number.md:45
msgid "Widthless integer"
msgstr "幅なし整数"

#: src/05_language_reference/02_lexical_structure/02_number.md:47
msgid ""
"The bit width specification of integer can be omitted. If it is omitted, the "
"appropriate width will be filled in the translated code."
msgstr ""
"ビット幅指定は省略することができます。省略された場合、トランスパイルされた"
"コードでは適切なビット幅が付与されます。"

#: src/05_language_reference/02_lexical_structure/02_number.md:59
msgid "Set sized bits"
msgstr "指定ビットのセット"

#: src/05_language_reference/02_lexical_structure/02_number.md:61
msgid "The bit width specification can be added to \"set all bits\"."
msgstr "\"全ビットのセット\" にビット幅指定を付与することもできます。"

#: src/05_language_reference/02_lexical_structure/02_number.md:72
msgid "Floating point"
msgstr "浮動小数点数"

#: src/05_language_reference/02_lexical_structure/02_number.md:74
msgid ""
"```veryl\n"
"// floating point\n"
"0123456789.0123456789\n"
"01_23_45_67_89.01_23_45_67_89\n"
"\n"
"// floating with exponent\n"
"0123456789.0123456789e+0123456789\n"
"01_23_45_67_89.01_23_45_67_89E-01_23_45_67_89\n"
"```"
msgstr ""
"```veryl\n"
"// 浮動小数点数\n"
"0123456789.0123456789\n"
"01_23_45_67_89.01_23_45_67_89\n"
"\n"
"// 指数表記\n"
"0123456789.0123456789e+0123456789\n"
"01_23_45_67_89.01_23_45_67_89E-01_23_45_67_89\n"
"```"

#: src/05_language_reference/02_lexical_structure/03_array_literal.md:3
msgid ""
"`'{}` represents array literal. In the literal, expression, `repeat` keyword "
"and `default` keyword can be placed."
msgstr ""
"`'{}` は配列リテラルを表します。リテラル内には式、`repeat` キーワード、"
"`default` キーワードを配置することができます。"

#: src/05_language_reference/02_lexical_structure/03_array_literal.md:6
msgid ""
"```veryl,playground\n"
"module ModuleA {\n"
"    let _a: logic [3] = '{1, 2, 3};\n"
"    let _b: logic [3] = '{1 repeat 3}; // '{1, 1, 1}\n"
"    let _c: logic [3] = '{default: 3}; // '{3, 3, 3}\n"
"}\n"
"```"
msgstr ""
"```veryl,playground\n"
"module ModuleA {\n"
"    let _a: logic [3] = '{1, 2, 3};\n"
"    let _b: logic [3] = '{1 repeat 3}; // '{1, 1, 1}\n"
"    let _c: logic [3] = '{default: 3}; // '{3, 3, 3}\n"
"}\n"
"```"

#: src/05_language_reference/03_data_type.md:3
msgid "In this chapter, we'll discuss about data type."
msgstr "この章ではデータ型について説明します。"

#: src/05_language_reference/03_data_type/01_builtin_type.md:3
msgid "4-state data type which has variable width"
msgstr "幅指定可能な4値データ型"

#: src/05_language_reference/03_data_type/01_builtin_type.md:5
msgid ""
"`logic` is 4-state (`0`, `1`, `x`, `z`) data type. The variable width can be "
"specified by `<>` after `logic`. Multi-dimentional can be specified by `<X, "
"Y, Z,,,>`."
msgstr ""
"`logic` は4値（`0`、`1`、`x`、`z`）のデータ型です。幅は `logic` のあとの "
"`<>` で指定できます。`<X, Y, Z,,,>` のように多次元指定も可能です。"

#: src/05_language_reference/03_data_type/01_builtin_type.md:17
msgid "2-state data type which has variable width"
msgstr "幅指定可能な2値データ型"

#: src/05_language_reference/03_data_type/01_builtin_type.md:19
msgid ""
"`bit` is 2-state (`0`, `1`) data type. The variable width can be specified "
"by `<>` after `bit`. Multi-dimentional can be specified by `<X, Y, Z,,,>`."
msgstr ""
"`bit` は2値（`0`、`1`）のデータ型です。幅は `logic` のあとの `<>` で指定でき"
"ます。`<X, Y, Z,,,>` のように多次元指定も可能です。"

#: src/05_language_reference/03_data_type/01_builtin_type.md:31
msgid "Type modifier"
msgstr "型修飾子"

#: src/05_language_reference/03_data_type/01_builtin_type.md:33
msgid "The following type modifiers can be added to `logic` and `bit` type."
msgstr "`logic` と `bit` 型には以下の型修飾子を付けることができます。"

#: src/05_language_reference/03_data_type/01_builtin_type.md:35
msgid "`signed`: the MSB is treated as sign-bit"
msgstr "`signed`: MSBは符号ビットとして扱われる"

#: src/05_language_reference/03_data_type/01_builtin_type.md:36
msgid "`tri`: tri-state type"
msgstr "`tri`: トライステート型"

#: src/05_language_reference/03_data_type/01_builtin_type.md:47
msgid "Integer type"
msgstr "整数型"

#: src/05_language_reference/03_data_type/01_builtin_type.md:49
msgid "There are some integer types:"
msgstr "整数型にはいくつかの種類があります。"

#: src/05_language_reference/03_data_type/01_builtin_type.md:51
msgid "`u8` : 8bit unsigned integer"
msgstr "`u8`：8ビットの符号なし整数"

#: src/05_language_reference/03_data_type/01_builtin_type.md:52
msgid "`u16`: 16bit unsigned integer"
msgstr "`u16`：16ビットの符号なし整数"

#: src/05_language_reference/03_data_type/01_builtin_type.md:53
msgid "`u32`: 32bit unsigned integer"
msgstr "`u32`：32ビットの符号なし整数"

#: src/05_language_reference/03_data_type/01_builtin_type.md:54
msgid "`u64`: 64bit unsigned integer"
msgstr "`u64`：64ビットの符号なし整数"

#: src/05_language_reference/03_data_type/01_builtin_type.md:55
msgid "`i8` : 8bit signed integer"
msgstr "`i8`：8ビットの符号付き整数"

#: src/05_language_reference/03_data_type/01_builtin_type.md:56
msgid "`i16`: 16bit signed integer"
msgstr "`i16`：16ビットの符号付き整数"

#: src/05_language_reference/03_data_type/01_builtin_type.md:57
msgid "`i32`: 32bit signed integer"
msgstr "`i32`：32ビットの符号付き整数"

#: src/05_language_reference/03_data_type/01_builtin_type.md:58
msgid "`i64`: 64bit signed integer"
msgstr "`i64`：64ビットの符号付き整数"

#: src/05_language_reference/03_data_type/01_builtin_type.md:73
msgid "Floating point type"
msgstr "浮動小数点数型"

#: src/05_language_reference/03_data_type/01_builtin_type.md:75
msgid "There are some floating point types:"
msgstr "浮動小数点数型にもいくつかの種類があります。"

#: src/05_language_reference/03_data_type/01_builtin_type.md:77
msgid "`f32`: 32bit floating point"
msgstr "`f32`：32ビット浮動小数点数"

#: src/05_language_reference/03_data_type/01_builtin_type.md:78
msgid "`f64`: 64bit floating point"
msgstr "`f64`：64ビット浮動小数点数"

#: src/05_language_reference/03_data_type/01_builtin_type.md:80
msgid "Both of them are represented as described by IEEE Std 754."
msgstr "いずれも IEEE Std 754 準拠の表現です。"

#: src/05_language_reference/03_data_type/01_builtin_type.md:89
msgid "String type"
msgstr "文字列型"

#: src/05_language_reference/03_data_type/01_builtin_type.md:91
msgid "`string` is string type."
msgstr "`string` は文字列を表す型です。"

#: src/05_language_reference/03_data_type/01_builtin_type.md:93
msgid ""
"```veryl,playground\n"
"module ModuleA {\n"
"    let _a: string = \"\";\n"
"}\n"
"```"
msgstr ""
"```veryl,playground\n"
"module ModuleA {\n"
"    let _a: string = \"\";\n"
"}\n"
"```"

#: src/05_language_reference/03_data_type/01_builtin_type.md:99
msgid "Type type"
msgstr "Type型"

#: src/05_language_reference/03_data_type/01_builtin_type.md:101
msgid ""
"`type` is a type which represents type kind. Variable of `type` can be "
"defined as `param` or `const` only."
msgstr ""
"`type` は型の種類を表す型です。`type` 型の変数は `param` か `const` としての"
"み定義可能です。"

#: src/05_language_reference/03_data_type/01_builtin_type.md:112
msgid "Boolean type"
msgstr "ブーリアン型"

#: src/05_language_reference/03_data_type/01_builtin_type.md:114
msgid ""
"`bool` is a type alias of `logic<1>` to express boolean. `true` and `false` "
"literal which express `1'b1` and `1'b0` can be used."
msgstr ""
"`bool` は ブーリアンを表す `logic<1>` の型エイリアスです。`1'b1` と `1'b0` を"
"表す `true` と `false` も使用できます。"

#: src/05_language_reference/03_data_type/02_user_defined_type.md:3
msgid "Struct"
msgstr "構造体"

#: src/05_language_reference/03_data_type/02_user_defined_type.md:5
msgid ""
"`struct` is composite data type. It can contain some fields, and these "
"fields can be access through `.` operator."
msgstr ""
"`struct` は複合データ型です。いくつかのフィールドを持つことができ、`.` 演算子"
"を通してアクセスできます。"

#: src/05_language_reference/03_data_type/02_user_defined_type.md:28
msgid "Enum"
msgstr "列挙型"

#: src/05_language_reference/03_data_type/02_user_defined_type.md:30
msgid ""
"`enum` is enumerable type. It has some named variant, and the value of "
"`enum` can be set to the one of them. The variant name can be specified by "
"`[enum name]::[variant name]`. Each variant has the corresponding integral "
"value. The value can be specified by `=`. Otherwise, it is assigned "
"automatically."
msgstr ""
"`enum` は列挙型です。名前の付いたバリアントを複数持ち、`enum` 型の変数にはそ"
"のバリアントのうち1つだけをセットできます。バリアント名は `[enum name]::"
"[variant name]` の形式で指定可能です。それぞれのバリアントは対応する整数値を"
"持ち、`=` で指定することができます。指定されなかった場合は自動的に割り当てら"
"れます。"

#: src/05_language_reference/03_data_type/02_user_defined_type.md:51
msgid ""
"If the type of `enum` is omitted, it will be infered from the variants "
"automatically."
msgstr ""
"`enum` の型が省略されている場合、適切なサイズの型がバリアントから自動的に推定"
"されます。"

#: src/05_language_reference/03_data_type/02_user_defined_type.md:67
msgid "Enum Encoding"
msgstr "列挙型エンコーディング"

#: src/05_language_reference/03_data_type/02_user_defined_type.md:69
msgid ""
"By default, the value of each variant is assigned sequentially if it is "
"omitted. If you want to specify value encoding, `#[enum_encoding]` attribute "
"can be used. The available encodings are here:"
msgstr ""
"デフォルトでは各バリアントの値が省略されたときは0から順に割り当てられます。こ"
"の割り当てのエンコードを指定したい場合は、`#[enum_encoding]` アトリビュートを"
"指定できます。使用できるエンコードは以下の通りです。"

#: src/05_language_reference/03_data_type/02_user_defined_type.md:73
msgid "`sequential`"
msgstr "`sequential`"

#: src/05_language_reference/03_data_type/02_user_defined_type.md:74
msgid "`onehot`"
msgstr "`onehot`"

#: src/05_language_reference/03_data_type/02_user_defined_type.md:75
msgid "`gray`"
msgstr "`gray`"

#: src/05_language_reference/03_data_type/02_user_defined_type.md:96
msgid "Union"
msgstr "ユニオン"

#: src/05_language_reference/03_data_type/02_user_defined_type.md:98
msgid ""
"A Veryl `union` is a packed, untagged sum type and is transpiled to "
"SystemVerilog's `packed union`. Each  union variant should have the same "
"packed width as each other union variant."
msgstr ""
"`union` はパックされたタグなしの直和型で、SystemVerilog では `packed union` "
"にトランスパイルされます。ユニオンのそれぞれのバリアントの幅は同じでなければ"
"なりません。"

#: src/05_language_reference/03_data_type/02_user_defined_type.md:118
#: src/05_language_reference/14_generics/02_prototype.md:137
#: src/05_language_reference/14_generics/02_prototype.md:193
msgid "Typedef"
msgstr "型定義"

#: src/05_language_reference/03_data_type/02_user_defined_type.md:120
msgid ""
"The `type` keyword can be used to define a type alias to scalar or array "
"types."
msgstr ""
"`type` キーワードを使って、スカラー型や配列型への型エイリアスを定義することが"
"できます。"

#: src/05_language_reference/03_data_type/03_array.md:3
msgid ""
"Array can be defined by appending `[]` to any data type. The length of array "
"can be specified by the value in `[]`."
msgstr ""
"任意のデータ型に対して `[]` と付与することで配列を定義することができます。配"
"列の長さは `[]` 内の値で指定します。"

#: src/05_language_reference/03_data_type/03_array.md:29
msgid "Multi-dimentional array can be defined by `[X, Y, Z,,,]`."
msgstr "`[X, Y, Z,,,]` のように多次元配列も定義できます。"

#: src/05_language_reference/03_data_type/04_clock_reset.md:3
msgid ""
"`clock` is a special types to represent clock wiring. There are 3 variants "
"to specify clock polarity."
msgstr ""
"`clock` はクロック配線を表す特別な型です。クロックの極性を指定するため以下の3"
"種類があります。"

#: src/05_language_reference/03_data_type/04_clock_reset.md:6
msgid "`clock`: clock type of which polarity is specified by the build option"
msgstr "`clock`: ビルド時の設定で指定される極性を持つクロック型"

#: src/05_language_reference/03_data_type/04_clock_reset.md:7
msgid "`clock_posedge`: clock type of which polarity is positive"
msgstr "`clock_posedge`: 正極性のクロック型"

#: src/05_language_reference/03_data_type/04_clock_reset.md:8
msgid "`clock_negedge`: clock type of which polarity is negative"
msgstr "`clock_negedge`: 負極性のクロック型"

#: src/05_language_reference/03_data_type/04_clock_reset.md:10
msgid ""
"`reset` is a special types to represent reset wiring. There are 5 variants "
"to specify reset polarity and synchronicity."
msgstr ""
"`reset` はリセット配線を表す特別な型です。リセットの極性と同期・非同期を指定"
"するため以下の5種類があります。"

#: src/05_language_reference/03_data_type/04_clock_reset.md:13
msgid ""
"`reset`: reset type of which polarity and synchronicity are specified by the "
"build option"
msgstr "`reset`: ビルド時の設定で指定される極性と同期性を持つリセット型"

#: src/05_language_reference/03_data_type/04_clock_reset.md:14
msgid "`reset_async_high`: async/high active reset type"
msgstr "`reset_async_high`: 正極性の非同期リセット型"

#: src/05_language_reference/03_data_type/04_clock_reset.md:15
msgid "`reset_async_low`: async/low active reset type"
msgstr "`reset_async_low`: 負極性の非同期リセット型"

#: src/05_language_reference/03_data_type/04_clock_reset.md:16
msgid "`reset_sync_high`: sync/active high reset type"
msgstr "`reset_sync_high`: 正極性の同期リセット型"

#: src/05_language_reference/03_data_type/04_clock_reset.md:17
msgid "`reset_sync_low`: sync/active low reset type"
msgstr "`reset_sync_low`: 負極性の同期リセット型"

#: src/05_language_reference/03_data_type/04_clock_reset.md:19
msgid ""
"If there is no special requirement, `clock` and `reset` are recommended for "
"code reusability."
msgstr ""
"特別な要件がなければ、コードの再利用を高めるため `clock` と `reset` の使用を"
"推奨します。"

#: src/05_language_reference/03_data_type/04_clock_reset.md:62
msgid "Default Clock / Reset"
msgstr "デフォルトクロックとリセット"

#: src/05_language_reference/03_data_type/04_clock_reset.md:64
msgid ""
"In some cases, there are some clocks, but only single clock is used in all "
"`always_ff`. For such case, `default` type modifier can be used to specify "
"the default clock and reset explicitly."
msgstr ""
"クロックが複数あるものの、 `always_ff` では単一のクロックしか使われない場合が"
"あります。このような場合に `default` 型修飾子を使ってデフォルトのクロックとリ"
"セットを明示することができます。"

#: src/05_language_reference/04_expression.md:3
msgid ""
"In this chapter, we'll discuss about expression. Expression is combination "
"of variable, operator, function call, and so on. It can be evaluated to a "
"value."
msgstr ""
"この章では式について説明します。式は変数や演算子、関数呼び出しなどを組み合わ"
"せたもので、評価して値を得ることができます。"

#: src/05_language_reference/04_expression/01_operator_precedence.md:3
msgid "In expression, operator precedence is almost the same as SystemVerilog."
msgstr "式内での演算子の優先順位は SystemVerilog とほとんど同じです。"

#: src/05_language_reference/04_expression/01_operator_precedence.md:5
msgid "Associativity"
msgstr "結合性"

#: src/05_language_reference/04_expression/01_operator_precedence.md:5
msgid "Precedence"
msgstr "優先順位"

#: src/05_language_reference/04_expression/01_operator_precedence.md:7
msgid "`()` `[]` `::` `.`"
msgstr "`()` `[]` `::` `.`"

#: src/05_language_reference/04_expression/01_operator_precedence.md:7
#: src/05_language_reference/04_expression/01_operator_precedence.md:8
#: src/05_language_reference/04_expression/01_operator_precedence.md:9
#: src/05_language_reference/04_expression/01_operator_precedence.md:10
#: src/05_language_reference/04_expression/01_operator_precedence.md:11
#: src/05_language_reference/04_expression/01_operator_precedence.md:12
#: src/05_language_reference/04_expression/01_operator_precedence.md:13
#: src/05_language_reference/04_expression/01_operator_precedence.md:14
#: src/05_language_reference/04_expression/01_operator_precedence.md:15
#: src/05_language_reference/04_expression/01_operator_precedence.md:16
#: src/05_language_reference/04_expression/01_operator_precedence.md:17
#: src/05_language_reference/04_expression/01_operator_precedence.md:18
#: src/05_language_reference/04_expression/01_operator_precedence.md:19
msgid "Left"
msgstr "左"

#: src/05_language_reference/04_expression/01_operator_precedence.md:7
msgid "Highest"
msgstr "高い"

#: src/05_language_reference/04_expression/01_operator_precedence.md:8
msgid ""
"`+` `-` `!` `~` `&` `~&` <code>\\|</code> <code>~\\|</code> `^` `~^` `^~` "
"(unary)"
msgstr ""
"`+` `-` `!` `~` `&` `~&` <code>\\|</code> <code>~\\|</code> `^` `~^` `^~` (単"
"項)"

#: src/05_language_reference/04_expression/01_operator_precedence.md:9
msgid "`**`"
msgstr "`**`"

#: src/05_language_reference/04_expression/01_operator_precedence.md:10
msgid "`*` `/` `%`"
msgstr "`*` `/` `%`"

#: src/05_language_reference/04_expression/01_operator_precedence.md:11
msgid "`+` `-` (binary)"
msgstr "`+` `-` (二項)"

#: src/05_language_reference/04_expression/01_operator_precedence.md:12
msgid "`<<` `>>` `<<<` `>>>`"
msgstr "`<<` `>>` `<<<` `>>>`"

#: src/05_language_reference/04_expression/01_operator_precedence.md:13
msgid "`<:` `<=` `>:` `>=`"
msgstr "`<:` `<=` `>:` `>=`"

#: src/05_language_reference/04_expression/01_operator_precedence.md:14
msgid "`==` `!=` `===` `!==` `==?` `!=?`"
msgstr "`==` `!=` `===` `!==` `==?` `!=?`"

#: src/05_language_reference/04_expression/01_operator_precedence.md:15
msgid "`&` (binary)"
msgstr "`&` (二項)"

#: src/05_language_reference/04_expression/01_operator_precedence.md:16
msgid "`^` `~^` `^~` (binary)"
msgstr "`^` `~^` `^~` (二項)"

#: src/05_language_reference/04_expression/01_operator_precedence.md:17
msgid "<code>\\|</code> (binary)"
msgstr "<code>\\|</code> (二項)"

#: src/05_language_reference/04_expression/01_operator_precedence.md:18
msgid "`&&`"
msgstr "`&&`"

#: src/05_language_reference/04_expression/01_operator_precedence.md:19
msgid "<code>\\|\\|</code>"
msgstr "<code>\\|\\|</code>"

#: src/05_language_reference/04_expression/01_operator_precedence.md:20
msgid ""
"`=` `+=` `-=` `*=` `/=` `%=` `&=` `^=` <code>\\|=</code> <br> `<<=` `>>=` "
"`<<<=` `>>>=`"
msgstr ""
"`=` `+=` `-=` `*=` `/=` `%=` `&=` `^=` <code>\\|=</code> <br> `<<=` `>>=` "
"`<<<=` `>>>=`"

#: src/05_language_reference/04_expression/01_operator_precedence.md:20
#: src/05_language_reference/04_expression/01_operator_precedence.md:21
msgid "None"
msgstr "なし"

#: src/05_language_reference/04_expression/01_operator_precedence.md:21
msgid "`{}` `inside` `outside` `if` `case` `switch`"
msgstr "`{}` `inside` `outside` `if` `case` `switch`"

#: src/05_language_reference/04_expression/01_operator_precedence.md:21
msgid "Lowest"
msgstr "低い"

#: src/05_language_reference/04_expression/02_function_call.md:3
msgid ""
"Function can be call by `function_name(argument)`. System function of "
"SystemVerilog like `$clog2` can be used too."
msgstr ""
"関数は `function_name(argument)` の形式で呼び出すことができます。`$clog2` の"
"ような SystemVerilog のシステム関数も使えます。"

#: src/05_language_reference/04_expression/02_function_call.md:20
msgid "Named Argument"
msgstr "名前付き引数"

#: src/05_language_reference/04_expression/02_function_call.md:22
msgid ""
"If a function has many arguments, function call with named arguments is "
"useful. Named arguments can't be used with positional arguments at the same "
"time."
msgstr ""
"多くの引数を持つ関数では、名前付き引数による関数呼び出しが便利です。名前付き"
"引数と位置引数を混在させることはできません。"

#: src/05_language_reference/04_expression/02_function_call.md:25
msgid ""
"```veryl,playground\n"
"module ModuleA {\n"
"    function FunctionA (\n"
"        a: input logic,\n"
"        b: input logic,\n"
"        c: input logic,\n"
"        d: input logic,\n"
"    ) {}\n"
"\n"
"    let _a: logic = FunctionA(\n"
"        a: 1,\n"
"        b: 1,\n"
"        c: 1,\n"
"        d: 1,\n"
"    );\n"
"\n"
"    // Mixing positional and named arguments is Error\n"
"    //let _a: logic = FunctionA(\n"
"    //    1,\n"
"    //    2,\n"
"    //    a: 1,\n"
"    //    b: 1,\n"
"    //);\n"
"}\n"
"```"
msgstr ""
"```veryl,playground\n"
"module ModuleA {\n"
"    function FunctionA (\n"
"        a: input logic,\n"
"        b: input logic,\n"
"        c: input logic,\n"
"        d: input logic,\n"
"    ) {}\n"
"\n"
"    let _a: logic = FunctionA(\n"
"        a: 1,\n"
"        b: 1,\n"
"        c: 1,\n"
"        d: 1,\n"
"    );\n"
"\n"
"    // 位置引数と名前付き引数の混在はエラー\n"
"    //let _a: logic = FunctionA(\n"
"    //    1,\n"
"    //    2,\n"
"    //    a: 1,\n"
"    //    b: 1,\n"
"    //);\n"
"}\n"
"```"

#: src/05_language_reference/04_expression/03_concatenation.md:3
msgid ""
"`{}` represents bit concatenation. In `{}`, `repeat` keyword can be used to "
"repeat specified operand."
msgstr ""
"`{}` はビット連結を表します。`{}` の中では `repeat` キーワードを使うことで指"
"定されたオペランドを繰り返すこともできます。"

#: src/05_language_reference/04_expression/04_if.md:3
msgid ""
"Conditional expression using `if` can be used. The section which represents "
"condition is placed after `if` keyword, and `()` is not required surrounding "
"it. An expression at true condition is placed after `?`, and an expression "
"at false condition is placed after `:`."
msgstr ""
"`if` を用いた条件式を使えます。`if` キーワードの後に条件を示す節を置きます"
"が、`()` で囲む必要はありません。`?` のあとに条件が真である場合の式を、`:` の"
"あとに条件が偽である場合の式を書きます。"

#: src/05_language_reference/04_expression/05_case_switch.md:3
msgid ""
"Another conditional expression is `case`. `case` containts some arms like "
"`value: expression`. If the expression after `case` keyword matches the left "
"value of an arm, the right expression of the arm will be returned. As the "
"value, range like `..=` can be used too. In addition, x/z values in the "
"value act as `wildcards`. A wildcard bit matches any value (0/1/x/z) in the "
"corresponding bit of the expression. `default` is a special arm which will "
"be returned when all other arms are failed. `default` is mandatory because "
"if expression always have to be evaluated to value."
msgstr ""
"もう一つの条件式が `case` です。`case` は `値: 式` という形式の条件を複数持ち"
"ます。もし `case` キーワードの後の式と条件の左側の値が一致すれば、その条件の"
"右側の式が返されます。値としては `..=` のような範囲も指定できます。さらに x "
"と z はワイルドカードとして扱われ、任意のビットにマッチします。`default` はそ"
"れ以外の条件が全て失敗したときに返される特別な条件です。case 式は常になんらか"
"の値に評価される必要があるため `default` は必須です。"

#: src/05_language_reference/04_expression/05_case_switch.md:12
msgid ""
"```veryl,playground\n"
"module ModuleA {\n"
"    let a: logic<10> = 1;\n"
"    var b: logic<10>;\n"
"\n"
"    assign b = case a {\n"
"        0               : 1,\n"
"        1               : 2,\n"
"        3..=5           : 4,\n"
"        10'b00_0000_011x: 5, // matches 6 or 7\n"
"        default         : 6,\n"
"    };\n"
"}\n"
"```"
msgstr ""
"```veryl,playground\n"
"module ModuleA {\n"
"    let a: logic<10> = 1;\n"
"    var b: logic<10>;\n"
"\n"
"    assign b = case a {\n"
"        0               : 1,\n"
"        1               : 2,\n"
"        3..=5           : 4,\n"
"        10'b00_0000_011x: 5, // 6 か 7 にマッチ\n"
"        default         : 6,\n"
"    };\n"
"}\n"
"```"

#: src/05_language_reference/04_expression/05_case_switch.md:27
msgid ""
"`switch` is another form of `case`. `switch` containts some arms like "
"`expression: expression`, and if the left expression is evaluated to 1, the "
"right expression of the arm will be returned."
msgstr ""
"`switch` は `case` のもう一つの形式です。`switch` は `式: 式` という形式を持"
"ち、左側の式の評価結果が1の場合に、右側の式が返されます。"

#: src/05_language_reference/04_expression/06_bit_select.md:3
msgid ""
"`[]` is bit select operator. If an expression is specified to `[]`, single "
"bit is selected. Bit range selection can be specified by `[expression:"
"expression]`."
msgstr ""
"`[]` はビット選択演算子です。`[]` に式を指定すれば1ビットを選択できます。範囲"
"選択する場合は `[式:式]` とします。"

#: src/05_language_reference/04_expression/06_bit_select.md:18
msgid "Select by position and width"
msgstr "位置と幅による選択"

#: src/05_language_reference/04_expression/06_bit_select.md:20
msgid ""
"`+:` and `-:` notation can select by start position and width. `[A+:B]` "
"means `[(A+B-1):A]`, and `[A-:B]` means `[A:(A-B+1)]`."
msgstr ""
"`+:` と `-:` 記法は開始位置と幅により選択することができます。`[A+:B]` は `[(A"
"+B-1):A]` を、 `[A-:B]` は `[A:(A-B+1)]` を意味します。"

#: src/05_language_reference/04_expression/06_bit_select.md:34
msgid "Select by index with step"
msgstr "ステップ付きインデックスによる選択"

#: src/05_language_reference/04_expression/06_bit_select.md:36
msgid ""
"`step` notation can select by index with step. `[A step B]` means \"select "
"index `A` in step `B`\", so it equals `[(B*A)+:B]`."
msgstr ""
"`step` 記法はステップ付きのインデックスにより選択することができます。`[A "
"step B]` は \"ステップ `B` で分割したときのインデックス `A` を選択する\" を意"
"味し、`[(B*A)+:B]` と等しくなります。"

#: src/05_language_reference/04_expression/07_range.md:3
msgid ""
"Range can be specified through range operator. There are two range operator:"
msgstr "範囲は範囲演算子で指定できます。範囲演算子には以下の2種類があります。"

#: src/05_language_reference/04_expression/07_range.md:5
msgid "`..`: half-open interval"
msgstr "`..`：半開区間"

#: src/05_language_reference/04_expression/07_range.md:6
msgid "`..=`: closed interval"
msgstr "`..=`：閉区間"

#: src/05_language_reference/04_expression/07_range.md:8
msgid "Range can be used at some description like `for` statement."
msgstr "範囲は `for` 文などの場所で使うことができます。"

#: src/05_language_reference/04_expression/08_msb_lsb.md:3
msgid ""
"`msb` and `lsb` can be used in bit selection by `[]`. `msb` means most "
"significant bit of the operand. `lsb` means least significant bit of the "
"operand, it is the same as 0."
msgstr ""
"`msb` と `lsb` は `[]` によるビット選択で使用できます。`msb` はオペランドの最"
"上位ビットを意味します。`lsb` はオペランドの最下位ビットを意味し、0と同じで"
"す。"

#: src/05_language_reference/04_expression/09_inside_outside.md:3
msgid ""
"`inside` check the specified expression is inside conditions which are "
"specified in `{}`. Condition can be single expression or [range](./07_range."
"md). If the expression matches any condition, `inside` will return `1`, "
"otherwise `0`. `outside` is vice versa."
msgstr ""
"`inside` は 指定された式が `{}` で与えられた条件内にあるかどうかを調べます。"
"条件は単一の式または[範囲](./07_range.md)を指定できます。条件を満たすとき "
"`inside` は `1` を、そうでなければ `0` を返します。`outside` はその逆です。"

#: src/05_language_reference/04_expression/10_type_cast.md:3
msgid ""
"`as` is type casting operator. Bit width speficied by based or baseless "
"number or type name of user defined type can be used as the operand."
msgstr ""
"`as` は型キャスト演算子です。基数付きあるいは基数なしの数値で指定するビット幅"
"やユーザ定義型の型名をオペランドにとることができます。"

#: src/05_language_reference/04_expression/11_struct_constructor.md:3
msgid ""
"To initialize struct, Struct constructor can be used instead of assigning "
"each members. This is especially useful to initialize `const` because it "
"can't be assigned by each members."
msgstr ""
"構造体を初期化するために各メンバーにそれぞれ代入する代わりに構造体コンストラ"
"クタを使用することができます。特に `const` は各メンバーに代入することができな"
"いためコンストラクタによる初期化が必要です。"

#: src/05_language_reference/04_expression/11_struct_constructor.md:6
msgid ""
"`..default` specifier can speficy the default value for unspecified members "
"in the struct."
msgstr ""
"`..default` 指定子は未指定のメンバーのためのデフォルト値を指定することができ"
"ます。"

#: src/05_language_reference/04_expression/11_struct_constructor.md:8
msgid ""
"```veryl,playground\n"
"module ModuleA {\n"
"    struct Param {\n"
"        a: bit<10>,\n"
"        b: bit<10>,\n"
"    }\n"
"\n"
"    const p: Param = Param'{\n"
"        a: 10,\n"
"        b: 10,\n"
"    };\n"
"\n"
"    const q: Param = Param'{\n"
"        a: 1,\n"
"        ..default(0) // means `b: 0`\n"
"    };\n"
"}\n"
"```"
msgstr ""
"```veryl,playground\n"
"module ModuleA {\n"
"    struct Param {\n"
"        a: bit<10>,\n"
"        b: bit<10>,\n"
"    }\n"
"\n"
"    const p: Param = Param'{\n"
"        a: 10,\n"
"        b: 10,\n"
"    };\n"
"\n"
"    const q: Param = Param'{\n"
"        a: 1,\n"
"        ..default(0) // すなわち `b: 0`\n"
"    };\n"
"}\n"
"```"

#: src/05_language_reference/05_statement.md:3
msgid ""
"In this chapter, we'll discuss about statement. Statement can be used in "
"some declaration like `always_ff`, `always_comb`."
msgstr ""
"この章では文について説明します。文は `always_ff` や `always_comb` などいくつ"
"かの宣言で使用することができます。"

#: src/05_language_reference/05_statement/01_assignment.md:3
msgid ""
"Assignment statement is `variable = expression;`. Unlike SystemVerilog, "
"assignment operator is `=` in both `always_comb` and `always_ff`. There are "
"other assignment operators:"
msgstr ""
"代入文は `変数 = 式;` の形式です。SystemVerilog と異なり、`always_comb` でも "
"`always_ff` でも代入演算子は `=` です。以下のような代入演算子もあります。"

#: src/05_language_reference/05_statement/01_assignment.md:7
msgid "`+=`: addition assignment"
msgstr "`+=`：加算代入"

#: src/05_language_reference/05_statement/01_assignment.md:8
msgid "`-=`: subtraction assignment"
msgstr "`-=`：減算代入"

#: src/05_language_reference/05_statement/01_assignment.md:9
msgid "`*=`: multiplication assignment"
msgstr "`*=`：乗算代入"

#: src/05_language_reference/05_statement/01_assignment.md:10
msgid "`/=`: division assignment"
msgstr "`/=`：除算代入"

#: src/05_language_reference/05_statement/01_assignment.md:11
msgid "`%=`: remainder assignment"
msgstr "`%=`：剰余代入"

#: src/05_language_reference/05_statement/01_assignment.md:12
msgid "`&=`: bitwise AND assignment"
msgstr "`&=`：ビットAND代入"

#: src/05_language_reference/05_statement/01_assignment.md:13
msgid "`|=`: bitwise OR assignment"
msgstr "`|=`：ビットOR代入"

#: src/05_language_reference/05_statement/01_assignment.md:14
msgid "`^=`: bitwise XOR assignment"
msgstr "`^=`：ビットXOR代入"

#: src/05_language_reference/05_statement/01_assignment.md:15
msgid "`<<=`: logical left shift assignment"
msgstr "`<<=`：論理左シフト代入"

#: src/05_language_reference/05_statement/01_assignment.md:16
msgid "`>>=`: logical right shift assignment"
msgstr "`>>=`：論理右シフト代入"

#: src/05_language_reference/05_statement/01_assignment.md:17
msgid "`<<<=`: arithmetic left shift assignment"
msgstr "`<<<=`：算術左シフト代入"

#: src/05_language_reference/05_statement/01_assignment.md:18
msgid "`>>>=`: arithmetic right shift assignment"
msgstr "`>>>=`：算術右シフト代入"

#: src/05_language_reference/05_statement/02_function_call.md:3
msgid ""
"Function call can be used as statement. In this case, the return value of "
"function will be ignored."
msgstr ""
"関数呼び出しは文として使うこともできます。この場合、関数の戻り値は無視されま"
"す。"

#: src/05_language_reference/05_statement/03_if.md:3
msgid ""
"`if` can be used as statement. The difference from `if` expression is that "
"statements are placed in `{}`."
msgstr ""
"`if` は文として使うこともできます。`if` 式との違いは `{}` 内に文を書くことで"
"す。"

#: src/05_language_reference/05_statement/04_case_switch.md:3
msgid ""
"`case` and `switch` can be used as statement. The meaning of them are the "
"same as [Case / Switch expression](../04_expression/05_case_switch.md) "
"except that the right-hand of arm is statement."
msgstr ""
"`case` と `switch` は文として使うこともできます。各アームの右辺が文になる点を"
"除けば [Case / Switch 式](../04_expression/05_case_switch.md) と同じです。"

#: src/05_language_reference/05_statement/04_case_switch.md:40
msgid "`cond_type` attribute"
msgstr "`cond_type` アトリビュート"

#: src/05_language_reference/05_statement/04_case_switch.md:42
msgid ""
"To specify `unique`, `unique0` and `priority` in SystemVerilog, `cond_type` "
"attribute can be used. The attribute can be annotated to `case` or `if` "
"statement."
msgstr ""
"SystemVerilogにおける `unique` `unique0` `priority` を指定するために、"
"`cond_type` アトリビュートを使うことができます。これらのアトリビュートは "
"`case` あるいは `if` 文に付けることができます。"

#: src/05_language_reference/05_statement/04_case_switch.md:45
msgid "`unique`: There are no overlapping items. Error if no item matches."
msgstr "`unique`: アイテムは重複しない。マッチするアイテムがなければエラー。"

#: src/05_language_reference/05_statement/04_case_switch.md:46
msgid "`unique0`: There are no overlapping items. No error if no item matches."
msgstr ""
"`unique0`: アイテムは重複しない。マッチするアイテムがなくてもエラーではない。"

#: src/05_language_reference/05_statement/04_case_switch.md:47
msgid "`priority`: The first match is used only. Error if no item matches."
msgstr ""
"`priority`: 最初にマッチしたアイテムが使われる。マッチするアイテムがなければ"
"エラー。"

#: src/05_language_reference/05_statement/04_case_switch.md:64
msgid ""
"These attributes enable more aggressive optimization in synthesis, but if "
"the expected condition is not complied, the result of synthesis will be "
"broken. So these attributes are ignored by default, and if there is the "
"following configuration, Veryl compiler emits them."
msgstr ""
"これらのアトリビュートは合成時により積極的な最適化を可能にしますが、期待され"
"る条件を満たさない場合に合成結果が不正になる可能性があります。そのためデフォ"
"ルトではアトリビュートは無視され、以下の設定がある場合のみ出力されます。"

#: src/05_language_reference/05_statement/05_for.md:3
msgid ""
"`for` statement represent repetition. Loop variable is placed before `in` "
"keyword, and [range](../04_expression/07_range.md) is placed after it."
msgstr ""
"`for` 文は繰り返しを表します。`in` キーワードの前にループ変数を、後に[範囲]"
"(../04_expression/07_range.md)を書きます。"

#: src/05_language_reference/05_statement/05_for.md:7
msgid "`break` can be used to break the loop."
msgstr "`break` を使ってループを中断することもできます。"

#: src/05_language_reference/05_statement/05_for.md:25
msgid ""
"You can iterate the loop in descending order by putting `rev` keyword after "
"`in` keyword."
msgstr ""
"`in` キーワードの後に `rev` キーワードを指定することで、ループを降順にするこ"
"とができます。"

#: src/05_language_reference/05_statement/06_return.md:3
msgid ""
"`return` statement represents return from function. The expression after "
"`return` keyword is the return value of the function."
msgstr ""
"`return` 文は関数からの戻りを示します。`return` キーワードの後の式は関数の戻"
"り値です。"

#: src/05_language_reference/05_statement/07_let.md:3
msgid ""
"`let` statement represents a name bound to a value. It can be used in "
"`always_ff`, `always_comb` and function declaration."
msgstr ""
"`let` 文はある名前に値を束縛します。これは `always_ff` 、 `always_comb` およ"
"び関数宣言の中で使うことができます。"

#: src/05_language_reference/05_statement/07_let.md:6
msgid "`let` statement can be placed anywhere in block."
msgstr "`let` 文はブロック中のどこにでも置くことができます。"

#: src/05_language_reference/06_declaration.md:3
msgid "In this chapter, we'll discuss about declaration."
msgstr "この章では宣言について説明します。"

#: src/05_language_reference/06_declaration/01_variable.md:3
msgid ""
"Variable declaration is started by `var` keyword. After `var`, variable "
"name, `:`, and the type of the variable are followed."
msgstr "変数宣言は `var` キーワードで始まり、変数名、`:`、変数の型と続きます。"

#: src/05_language_reference/06_declaration/01_variable.md:6
msgid ""
"If there are unused variables, warning will be occured. Variable name "
"starting with `_` means unused variable, and suppresses the warning."
msgstr ""
"未使用の変数は警告が発生します。`_` で始まる変数名は未使用変数を意味し、警告"
"を抑制します。"

#: src/05_language_reference/06_declaration/01_variable.md:9
msgid ""
"If you want to bind a value to a name at the declaration, `let` can be used "
"instead of `var`."
msgstr "宣言時に名前に値を束縛する場合は `var` の代わりに `let` を使います。"

#: src/05_language_reference/06_declaration/02_parameter.md:3
msgid ""
"Parameter can be declarated as the same as variable. `param` keyword can be "
"used at module header, it can be overridden at instantiation. `const` "
"keyword can be used in module, it can't be overridden."
msgstr ""
"パラメータは変数と同時に宣言できます。`param` キーワードはモジュールヘッダで"
"使用することができ、インスタンス時に上書きできます。`const` キーワードはモ"
"ジュール内で使用することができ、上書きできません。"

#: src/05_language_reference/06_declaration/03_register.md:3
msgid ""
"If a variable is assigned in `always_ff` declaration, it becomes register "
"variable. Register variable will be mapped to flip-flop in synthesis phase."
msgstr ""
"レジスタ変数とは `always_ff` で代入される変数です。合成フェーズでフリップフ"
"ロップにマップされます。"

#: src/05_language_reference/06_declaration/03_register.md:6
msgid ""
"`always_ff` has mandatory clock variable, optional reset variable, and `{}` "
"block. Clock and reset are placed in `()`. The specified clock and reset "
"should have `clock` / `reset` type and the witdh of them should be 1bit."
msgstr ""
"`always_ff` は必須のクロック変数、オプションのリセット変数、`{}` ブロックをと"
"ります。クロックとリセットは `()` に書きます。指定されたクロックとリセットは "
"`clock` / `reset` 型を持ち、そのビット幅は1ビットでなければなりません。"

#: src/05_language_reference/06_declaration/03_register.md:10
msgid ""
"`if_reset` is a special keyword which can be used in `always_ff`. It means "
"reset condition of the register variable. If `if_reset` is used, `always_ff` "
"must have reset variable. `if_reset` can be conceal reset porality and "
"synchronisity. The actual porality and synchronisity can be configured "
"through `[build]` section of `Veryl.toml`."
msgstr ""
"`if_reset` は `always_ff` に書ける特別なキーワードで、そのレジスタ変数のリ"
"セット条件を示します。`if_reset` を使う場合は `always_ff` のリセット変数は必"
"須です。これを使うことで、リセットの極性と同期性を隠ぺいすることができます。"
"実際の極性と同期性は `Veryl.toml` の `[build]` セクションで設定できます。"

#: src/05_language_reference/06_declaration/03_register.md:16
msgid ""
"If there is a single clock and reset in the module, clock and reset "
"specification can be omitted."
msgstr ""
"モジュール内にクロックとリセットが1つしかない場合、クロックとリセットの指定は"
"省略できます。"

#: src/05_language_reference/06_declaration/04_combinational.md:3
msgid ""
"If a variable is assigned in `always_comb` declaration, it means "
"combinational circuit."
msgstr "`always_comb` で代入される変数は組み合わせ回路を意味します。"

#: src/05_language_reference/06_declaration/05_assign.md:3
msgid "`assign` declaration can assign expression to variable."
msgstr "`assign` 宣言で変数に式を代入することができます。"

#: src/05_language_reference/06_declaration/05_assign.md:13
msgid ""
"Concatenation can be used as the left hand side of `assign` declaration."
msgstr "`assign` 宣言の左辺には連結も使用することができます。"

#: src/05_language_reference/06_declaration/06_function.md:3
msgid ""
"Function can be declared by `function` keyword. Arguments are placed in `()` "
"and return type is placed after `->`."
msgstr ""
"関数は `function` キーワードで宣言できます。引数は `()` 内に書き、戻り値の型"
"を `->` の後に書きます。"

#: src/05_language_reference/06_declaration/06_function.md:6
msgid "If function doesn't have a return value, `->` can be omitted."
msgstr "関数が戻り値を持たない場合、`->` は省略できます。"

#: src/05_language_reference/06_declaration/06_function.md:31
msgid ""
"Interface modports can be used as type of arguments. The given interface "
"modports will be expanded into each Verilog ports when emitting "
"SystemVerilog RTL."
msgstr ""
"インターフェースのmodportは引数の型としても使用できます。与えられたmodportは"
"SystemVerilog生成時にVerilogポートに展開されます。"

#: src/05_language_reference/06_declaration/07_initial_final.md:3
msgid ""
"Statements in `initial` are executed at the beginning of simulation, `final` "
"is the end. Both will be ignored logical synthesis, and can be used as debug "
"or assertion."
msgstr ""
"`initial` ブロック内の文はシミュレーション開始時に実行され、`final` は終了時"
"です。どちらも論理合成では無視され、デバッグやアサーションに使うことができま"
"す。"

#: src/05_language_reference/06_declaration/07_initial_final.md:7
msgid ""
"```veryl,playground\n"
"module ModuleA {\n"
"    initial {\n"
"        $display(\"initial\");\n"
"    }\n"
"\n"
"    final {\n"
"        $display(\"final\");\n"
"    }\n"
"}\n"
"```"
msgstr ""
"```veryl,playground\n"
"module ModuleA {\n"
"    initial {\n"
"        $display(\"initial\");\n"
"    }\n"
"\n"
"    final {\n"
"        $display(\"final\");\n"
"    }\n"
"}\n"
"```"

#: src/05_language_reference/06_declaration/08_attribute.md:3
msgid "Attribute can annotate some declarations like variable declaration."
msgstr ""
"アトリビュートは変数宣言などいくつかの宣言に注釈を付けることができます。"

#: src/05_language_reference/06_declaration/08_attribute.md:5
msgid "`sv` Attribute"
msgstr "`sv` アトリビュート"

#: src/05_language_reference/06_declaration/08_attribute.md:7
msgid ""
"`sv` attribute represents SystemVerilog attribute. It will be transpiled to "
"SystemVerilog attribute `(*  *)`."
msgstr ""
"`sv` アトリビュートは SystemVerilog のアトリビュートを表し、`(*  *)` という形"
"式の SystemVerilog アトリビュートに変換されます。"

#: src/05_language_reference/06_declaration/08_attribute.md:10
msgid ""
"```veryl,playground\n"
"module ModuleA {\n"
"    #[sv(\"ram_style=\\\"block\\\"\")]\n"
"    let _a: logic<10> = 1;\n"
"    #[sv(\"mark_debug=\\\"true\\\"\")]\n"
"    let _b: logic<10> = 1;\n"
"}\n"
"```"
msgstr ""
"```veryl,playground\n"
"module ModuleA {\n"
"    #[sv(\"ram_style=\\\"block\\\"\")]\n"
"    let _a: logic<10> = 1;\n"
"    #[sv(\"mark_debug=\\\"true\\\"\")]\n"
"    let _b: logic<10> = 1;\n"
"}\n"
"```"

#: src/05_language_reference/06_declaration/08_attribute.md:19
msgid "`allow` Attribute"
msgstr "`allow` アトリビュート"

#: src/05_language_reference/06_declaration/08_attribute.md:21
msgid "`allow` attribute is used to disable specified lint check."
msgstr ""
"`allow` アトリビュートは指定されたリントチェックを無効化するために使用できま"
"す。"

#: src/05_language_reference/06_declaration/08_attribute.md:30
msgid "Available lint names are below:"
msgstr "指定可能なリント名は以下の通りです。"

#: src/05_language_reference/06_declaration/08_attribute.md:32
msgid "`unused_variable`"
msgstr "unused_variable"

#: src/05_language_reference/06_declaration/08_attribute.md:33
msgid "`missing_reset_statement`"
msgstr "missing_reset_statement"

#: src/05_language_reference/06_declaration/08_attribute.md:34
msgid "`missing_port`"
msgstr "missing_port"

#: src/05_language_reference/06_declaration/08_attribute.md:36
msgid "`ifdef`/`ifndef`/`elsif`/`else` Attribute"
msgstr "`ifdef`/`ifndef`/`elsif`/`else` アトリビュート"

#: src/05_language_reference/06_declaration/08_attribute.md:38
msgid ""
"`ifdef` and `ifndef` attributes are used to control whether the annotated "
"code block is enabled by defined value. In addition, the code block with "
"`elsif` or `else` attributes is optional and a code block with `ifdef` or "
"`ifndef` attributes can be followed with that code block."
msgstr ""
"`ifdef` と `ifndef` アトリビュートは定義された値によってコードブロックを有効"
"にするかどうかを制御するために使用することができます。さらに、`ifdef` と "
"`ifndef` のついたコードブロックに続けてオプションとして `elsif` と `else` ア"
"トリビュートの付いたブロックを書くこともできます。"

#: src/05_language_reference/06_declaration/08_attribute.md:41
msgid ""
"The following example shows a usage of these attributes and which code "
"blocks will be enabled according to defined values."
msgstr ""
"以下の例はこれらのアトリビュートの使用方法と、各コードブロックが定義された値"
"によって有効になる様子を示しています。"

#: src/05_language_reference/06_declaration/08_attribute.md:43
msgid "For the sequence of `ifdef`/`elsif`/`else` attributes"
msgstr "`ifdef`/`elsif`/`else` の順に宣言されたアトリビュート"

#: src/05_language_reference/06_declaration/08_attribute.md:44
msgid ""
"If `DEFINE_A` is defined, the code block with `#[ifdef(DEFINE_A)]` (code "
"block a) is enbaled, and code blocks with `#[ifndef(DEFINE_B)]` and "
"`#[else]` (code block b/c) are disabled."
msgstr ""
"もし `DEFINE_A` が定義されていれば、`#[ifdef(DEFINE_A)]` のついたコードブロッ"
"ク（コードブロックa）が有効になり、`#[ifndef(DEFINE_B)]` と `#[else]` のつい"
"たコードブロック（コードブロックbとc）は無効になります。"

#: src/05_language_reference/06_declaration/08_attribute.md:45
msgid ""
"If `DEFINE_A` is not defined and `DEFINE_B` is defiend, the code block with "
"`#[elsif(DEFINE_B)]` (code block b) is enabled, and code blocks with "
"`#[ifdef(DEFINE_A)]` and `#[else]` (code block a/c) are disabled."
msgstr ""
"`DEFINE_A` が定義されておらず、 `DEFINE_B` が定義されていれば、"
"`#[elfif(DEFINE_B)]` のついたコードブロック（コードブロックb）が有効になり、"
"`#[ifndef(DEFINE_A)]` と `#[else]` のついたコードブロック（コードブロックaと"
"c）は無効になります。"

#: src/05_language_reference/06_declaration/08_attribute.md:46
msgid ""
"If `DEFINE_A` and `DEFINE_B` are not defined the code block with `#[else]` "
"is enabled, and code blocks with `#[ifdef(DEFINE_A)]` and "
"`#[elsif(DEFINE_B)]` (code block a/b) are disabled."
msgstr ""
"`DEFINE_A` と `DEFINE_B` が定義されていなければ、`#[else]` のついたコードブ"
"ロックが有効になり、`#[ifndef(DEFINE_A)]` と `#[elsif(DEFINE_B)]` のついた"
"コードブロック（コードブロックaとb）は無効になります。"

#: src/05_language_reference/06_declaration/08_attribute.md:47
msgid "For the sequence of `ifndef`/`else` attributes"
msgstr "`ifndef`/`else` の順に宣言されたアトリビュート"

#: src/05_language_reference/06_declaration/08_attribute.md:48
msgid ""
"If `DEFINE_D` is not defined, the code block with `#[ifndef(DEFINE_D)]` "
"(code block d) is enabled, and the code block with `#[else]` (code block e) "
"is disabled."
msgstr ""
"もし `DEFINE_D` が定義されていなければ、`#[ifndef(DEFINE_D)]` のついたコード"
"ブロック（コードブロックd）が有効になり、`#[else]` のついたコードブロック"
"（コードブロックe）は無効になります。"

#: src/05_language_reference/06_declaration/08_attribute.md:49
msgid ""
"If `DEFINE_D` is defined, the code block with `#[else]` (code block e) is "
"enabled, and the code block with `#[ifndef(DEFINE_D)]` (code block d) is "
"disabled."
msgstr ""
"`DEFINE_D` が定義されていれば、`#[else]` のついたコードブロック（コードブロッ"
"クe）が有効になり、`#[ifndef(DEFINE_D)]` のついたコードブロック（コードブロッ"
"クd）は無効になります。"

#: src/05_language_reference/06_declaration/08_attribute.md:51
msgid ""
"```veryl,playground\n"
"module ModuleA {\n"
"    #[ifdef(DEFINE_A)]\n"
"    {\n"
"        // code block a\n"
"        let _a: logic<10> = 1;\n"
"    }\n"
"    #[elsif(DEFINE_B)]\n"
"    {\n"
"        // code block b\n"
"        let _a: logic<10> = 2;\n"
"    }\n"
"    #[else]\n"
"    {\n"
"        // code block c\n"
"        let _a: logic<10> = 3;\n"
"    }\n"
"\n"
"    #[ifndef(DEFINE_D)]\n"
"    {\n"
"        // code block d\n"
"        let _b: logic<10> = 4;\n"
"    }\n"
"    #[else]\n"
"    {\n"
"        // code block e\n"
"        let _b: logic<10> = 5;\n"
"    }\n"
"}\n"
"```"
msgstr ""
"```veryl,playground\n"
"module ModuleA {\n"
"    #[ifdef(DEFINE_A)]\n"
"    {\n"
"        // コードブロック a\n"
"        let _a: logic<10> = 1;\n"
"    }\n"
"    #[elsif(DEFINE_B)]\n"
"    {\n"
"        // コードブロック b\n"
"        let _a: logic<10> = 2;\n"
"    }\n"
"    #[else]\n"
"    {\n"
"        // コードブロック c\n"
"        let _a: logic<10> = 3;\n"
"    }\n"
"\n"
"    #[ifndef(DEFINE_D)]\n"
"    {\n"
"        // コードブロック d\n"
"        let _b: logic<10> = 4;\n"
"    }\n"
"    #[else]\n"
"    {\n"
"        // コードブロック e\n"
"        let _b: logic<10> = 5;\n"
"    }\n"
"}\n"
"```"

#: src/05_language_reference/06_declaration/08_attribute.md:82
msgid ""
"To avoid complex adjustment around trailing comma in generated code, the "
"last item with `ifdef` in comma-separated list is forbidden."
msgstr ""
"生成されたコードにおける末尾カンマ周りの複雑な調整を回避するため、カンマ区切"
"りリストの最後のアイテムに`ifdef`をつけることは禁止されています。"

#: src/05_language_reference/06_declaration/08_attribute.md:84
msgid "`expand` Attribute"
msgstr "`expand` アトリビュート"

#: src/05_language_reference/06_declaration/08_attribute.md:86
msgid ""
"If `expand` attribute is set, structured ports such as `modport` are "
"expanded into each Verilog ports. Synthesis tools may require that ports of "
"the top module includes no such ports. This attribute is helpful for such "
"case. The following argument is supported."
msgstr ""
"`expand` アトリビュートが設定されているとき、`modport` のような構造化された"
"ポートはVerilog のポートに展開されます。合成ツールによってはトップモジュール"
"がそのようなポートを含んではならない場合があり、そのような場合にこのアトリ"
"ビュートを使うことができます。使用可能な引数は以下の通りです。"

#: src/05_language_reference/06_declaration/08_attribute.md:90
msgid "`modport`: Expand ports of which direction is `modport`"
msgstr "`modport`: ポート方向が `modport` のポートを展開する"

#: src/05_language_reference/06_declaration/08_attribute.md:132
msgid "`align` Attribute"
msgstr "`align` アトリビュート"

#: src/05_language_reference/06_declaration/08_attribute.md:134
msgid ""
"`align` attribute is used to control vertical alignment by formatter. If "
"`number` is specified as an argument of `align` attribute, all numbers are "
"aligned. `identifier` can be used too."
msgstr ""
"`align` アトリビュートはフォーマッタの垂直方向の整列を制御することができま"
"す。`number` が `align` の引数として指定されたとき、全ての数値は整列されま"
"す。`identifier` も使用可能です。"

#: src/05_language_reference/06_declaration/08_attribute.md:159
msgid "`fmt` Attribute"
msgstr "`fmt` アトリビュート"

#: src/05_language_reference/06_declaration/08_attribute.md:161
msgid ""
"`fmt` attribute is used to control formatiing way. The following arguments "
"are supported:"
msgstr ""
"`fmt` アトリビュートはフォーマットの方法を制御することができます。以下の引数"
"がサポートされています。"

#: src/05_language_reference/06_declaration/08_attribute.md:164
msgid "`compact`: compact formatting without newlines"
msgstr "`compact`: 改行なしのコンパクトなフォーマット"

#: src/05_language_reference/06_declaration/08_attribute.md:178
msgid ""
"`skip`: `veryl fmt` does not format modules, interfaces and packages on "
"which `fmt` attribute with `skip` argument is specified."
msgstr ""
"`skip`: `veryl fmt` はモジュール、インターフェース、パッケージをフォーマット"
"しない"

#: src/05_language_reference/06_declaration/09_generate.md:3
msgid ""
"Declaration can be generated by `for` and `if`. Label which is shown by `:` "
"is required to idenfity the generated declarations."
msgstr ""
"宣言や `for` や `if` を使って生成することができます。`:` で示すラベルは生成さ"
"れた複数の宣言を識別するのに必要です。"

#: src/05_language_reference/06_declaration/09_generate.md:6
msgid ""
"```veryl,playground\n"
"module ModuleA {\n"
"    var a: logic<10>;\n"
"\n"
"    for i in 0..10 :label {\n"
"        if i >: 5 :label {\n"
"            assign a[i] = i + 2;\n"
"        } else { // label of else clause can be omit\n"
"            assign a[i] = i + 2;\n"
"        }\n"
"    }\n"
"}\n"
"```"
msgstr ""
"```veryl,playground\n"
"module ModuleA {\n"
"    var a: logic<10>;\n"
"\n"
"    for i in 0..10 :label {\n"
"        if i >: 5 :label {\n"
"            assign a[i] = i + 2;\n"
"        } else { // else 句のラベルは省略可能\n"
"            assign a[i] = i + 2;\n"
"        }\n"
"    }\n"
"}\n"
"```"

#: src/05_language_reference/06_declaration/09_generate.md:20
msgid ""
"For generate `for` declaration, you can iterate declarations in descending "
"order by putting `rev` keyword aftet `in` keyword."
msgstr ""
"`in` キーワードの後に `rev` キーワードを付けることで、ループを降順にすること"
"ができます。"

#: src/05_language_reference/06_declaration/10_instantiation.md:3
msgid ""
"`inst` keyword represents instantiation of modula and interface. The name of "
"instance is placed after `inst` keyword, and the type of instance is placed "
"after `:`. Parameter override is `#()`, and port connection is `()`."
msgstr ""
"`inst` キーワードはモジュールやインターフェースのインスタンス化を表します。イ"
"ンスタンスの名前は `inst` の後に、インスタンスの型は `:` の後に書きます。"
"`#()` でパラメータオーバーライドを、`()` でポート接続を表します。"

#: src/05_language_reference/06_declaration/10_instantiation.md:8
msgid ""
"```veryl,playground\n"
"module ModuleA #(\n"
"    param paramA: u32 = 1,\n"
") {\n"
"    let a: logic<10> = 1;\n"
"    let b: logic<10> = 1;\n"
"\n"
"    inst instB: ModuleB #(\n"
"        paramA    , // Parameter assignment by name\n"
"        paramB: 10,\n"
"    ) (\n"
"        a    , // Port connection by name\n"
"        bb: b,\n"
"    );\n"
"}\n"
"\n"
"module ModuleB #(\n"
"    param paramA: u32 = 1,\n"
"    param paramB: u32 = 1,\n"
") (\n"
"    a : input logic<10>,\n"
"    bb: input logic<10>,\n"
") {}\n"
"```"
msgstr ""
"```veryl,playground\n"
"module ModuleA #(\n"
"    param paramA: u32 = 1,\n"
") {\n"
"    let a: logic<10> = 1;\n"
"    let b: logic<10> = 1;\n"
"\n"
"    inst instB: ModuleB #(\n"
"        paramA    , // 名前によるパラメータ代入\n"
"        paramB: 10,\n"
"    ) (\n"
"        a    , // 名前によるポート接続\n"
"        bb: b,\n"
"    );\n"
"}\n"
"\n"
"module ModuleB #(\n"
"    param paramA: u32 = 1,\n"
"    param paramB: u32 = 1,\n"
") (\n"
"    a : input logic<10>,\n"
"    bb: input logic<10>,\n"
") {}\n"
"```"

#: src/05_language_reference/06_declaration/10_instantiation.md:33
msgid ""
"`bind` declarations are also supported and will be translated into "
"SystemVerilog's bind declarations. Unlike SystemVerilog, a module or an "
"interface can be specified as a target scope, but not a specific instance."
msgstr ""
"`bind` 宣言もサポートされており、SystemVerilogのbind宣言に変換されます。"
"SystemVerilogと異なり、ターゲットスコープとしてインスタンスを指定することはで"
"きず、モジュールかインターフェースのみ指定することができます。"

#: src/05_language_reference/06_declaration/11_named_block.md:3
msgid ""
"Label can be added to `{}` block. The named block has an individual "
"namespace."
msgstr ""
"`{}` ブロックにラベルを付けることができます。そのような名前付きブロックは独立"
"した名前空間を持ちます。"

#: src/05_language_reference/06_declaration/12_import_export.md:1
msgid "Import"
msgstr "インポート"

#: src/05_language_reference/06_declaration/12_import_export.md:3
msgid ""
"`import` declaration imports symbols from other packages. It can be placed "
"at the top level or as a module/interface/package item. Wildcard pattern "
"like `package::*` can be used as an argument of `import` declaration."
msgstr ""
"`import` 宣言は他のパッケージからシンボルをインポートします。モジュール、イン"
"ターフェース、パッケージの要素としてだけでなくトップレベルにも配置することが"
"できます。`import` 宣言の引数には `package::*` のようなワイルドカードパターン"
"を使用することができます。"

#: src/05_language_reference/06_declaration/12_import_export.md:7
msgid ""
"```veryl,playground\n"
"// file scope import\n"
"import $sv::SvPackage::*;\n"
"\n"
"package PackageA {\n"
"    const paramA: u32 = 1;\n"
"}\n"
"\n"
"module ModuleA {\n"
"    import PackageA::*;\n"
"    import PackageA::paramA;\n"
"}\n"
"```"
msgstr ""
"```veryl,playground\n"
"// ファイルスコープインポート\n"
"import $sv::SvPackage::*;\n"
"\n"
"package PackageA {\n"
"    const paramA: u32 = 1;\n"
"}\n"
"\n"
"module ModuleA {\n"
"    import PackageA::*;\n"
"    import PackageA::paramA;\n"
"}\n"
"```"

#: src/05_language_reference/06_declaration/12_import_export.md:21
msgid ""
"Symbols imported via an import declaration can be referenced anywhere within "
"the namespace where the import declaration is placed."
msgstr ""
"インポート宣言によるシンボルのインポートは、そのインポート宣言が置かれた名前"
"空間内の任意の場所から参照できます。"

#: src/05_language_reference/06_declaration/12_import_export.md:23
msgid ""
"```veryl,playground\n"
"package PackageA {\n"
"    const WIDTH: u32 = 8;\n"
"}\n"
"\n"
"module ModuleA (\n"
"    i_d: input  logic<WIDTH>, // valid reference\n"
"    o_d: output logic<WIDTH>, // valid reference\n"
") {\n"
"    import PackageA::WIDTH;\n"
"\n"
"    let d  : logic<WIDTH> = i_d; // valid reference\n"
"    assign o_d = d;\n"
"}\n"
"```"
msgstr ""
"```veryl,playground\n"
"package PackageA {\n"
"    const WIDTH: u32 = 8;\n"
"}\n"
"\n"
"module ModuleA (\n"
"    i_d: input  logic<WIDTH>, // 有効な参照\n"
"    o_d: output logic<WIDTH>, // 有効な参照\n"
") {\n"
"    import PackageA::WIDTH;\n"
"\n"
"    let d  : logic<WIDTH> = i_d; // 有効な参照\n"
"    assign o_d = d;\n"
"}\n"
"```"

#: src/05_language_reference/06_declaration/13_connect.md:3
msgid ""
"To assign from a interface to another interface, `connect` decleration can "
"be used instead of each member assignment. `connect` decleration connects "
"all members of the interface automatically."
msgstr ""
"あるインターフェースをほかのインターフェースに接続するために各メンバーを代入"
"する代わりに `connect` 宣言を使用することができます。`connect` 宣言はインター"
"フェースの全てのメンバーを自動的に接続します。"

#: src/05_language_reference/06_declaration/13_connect.md:6
msgid ""
"The direction of assignment is determined by modport, so `output` member is "
"assigned to `input` member. If an argument of `connect` is an interface "
"instance, additional modport specification is necessary because it can't be "
"determined direction."
msgstr ""
"代入の方向はmodportによって決まります。つまり `output` メンバーが `input` メ"
"ンバーに代入されます。`connect` の引数がインターフェースインスタンスの場合、"
"方向を決定するためにmodportの指定が必要です。"

#: src/05_language_reference/06_declaration/13_connect.md:9
msgid "The connection operator `<>` can be used in `always_comb` too."
msgstr "接続演算子 `<>` は `always_comb` 中でも使用することができます。"

#: src/05_language_reference/07_module.md:3
msgid ""
"Module is one of top level components in source code. Module has overridable "
"parameters, connection ports, and internal logic."
msgstr ""
"モジュールはソースコードの最上位コンポーネントの1つです。モジュールはオーバー"
"ライド可能なパラメータ、接続ポート、内部ロジックを持ちます。"

#: src/05_language_reference/07_module.md:6
msgid ""
"Overridable parameters can be declared in `#()`. Each parameter declaration "
"is started by `param` keyword. After the keyword, an identifier, `:`, the "
"type of the parameter, and a default value are placed."
msgstr ""
"オーバーライド可能なパラメータは `#()` 内で宣言できます。それぞれのパラメータ"
"宣言は `param` キーワードで始まり、識別子、`:`、パラメータの型、デフォルト値"
"で構成されます。"

#: src/05_language_reference/07_module.md:10
msgid ""
"Connection ports can be declared in `()`. Each port declaration is "
"constructed by an identifier, `:`, port direction, and the type of the port. "
"The available port directions are:"
msgstr ""
"接続ポートは `()` 内で宣言できます。それぞれのポート宣言は識別子、`:`、ポート"
"の方向、ポートの型で構成されます。利用可能なポート方向は以下の通りです。"

#: src/05_language_reference/07_module.md:14
msgid "`input`: input port"
msgstr "`input`：入力ポート"

#: src/05_language_reference/07_module.md:15
msgid "`output`: output port"
msgstr "`output`：出力ポート"

#: src/05_language_reference/07_module.md:16
msgid "`inout`: bi-directional port"
msgstr "`inout`：双方向ポート"

#: src/05_language_reference/07_module.md:17
msgid "`modport`: modport of interface"
msgstr "`modport`：インターフェースのmodport"

#: src/05_language_reference/07_module.md:18
msgid "`interface`: generic interface"
msgstr "`interface`: ジェネリックインターフェース"

#: src/05_language_reference/07_module.md:40
msgid "Default value of port"
msgstr "ポートのデフォルト値"

#: src/05_language_reference/07_module.md:42
msgid ""
"Ports of module can have default value. Ports which have default value can "
"be omitted at the instantiation, and the default values are assigned to the "
"omitted ports. As default value, the following values are allowed:"
msgstr ""
"モジュールのポートはデフォルトを持つことができます。デフォルト値を持つポート"
"はインスタンス時に省略することができ、省略されたポートにはデフォルト値が割り"
"当てられます。デフォルト値としては以下の値を取ることができます。"

#: src/05_language_reference/07_module.md:45
msgid "Input port: literal, and `const` in package"
msgstr "入力ポート: リテラル、パッケージ内の `const`"

#: src/05_language_reference/07_module.md:46
msgid "Output port: `_` (anonymous identifier)"
msgstr "出力ポート: `_` (無名識別子)"

#: src/05_language_reference/07_module.md:48
msgid ""
"```veryl,playground\n"
"module ModuleA (\n"
"    a: input  logic    ,\n"
"    b: input  logic = 1,\n"
"    x: output logic    ,\n"
"    y: output logic = _,\n"
") {\n"
"    assign x = a;\n"
"    assign y = b;\n"
"}\n"
"\n"
"module ModubeB {\n"
"    inst instA: ModuleA (\n"
"        a: 1,\n"
"        // b is omitted\n"
"        x: _,\n"
"        // y is omitted\n"
"    );\n"
"}\n"
"```"
msgstr ""
"```veryl,playground\n"
"module ModuleA (\n"
"    a: input  logic    ,\n"
"    b: input  logic = 1,\n"
"    x: output logic    ,\n"
"    y: output logic = _,\n"
") {\n"
"    assign x = a;\n"
"    assign y = b;\n"
"}\n"
"\n"
"module ModubeB {\n"
"    inst instA: ModuleA (\n"
"        a: 1,\n"
"        // b は省略\n"
"        x: _,\n"
"        // y は省略\n"
"    );\n"
"}\n"
"```"

#: src/05_language_reference/07_module.md:70
msgid "Generic interface"
msgstr "ジェネリックインターフェース"

#: src/05_language_reference/07_module.md:72
msgid ""
"Generic interface is a special port direction. If `interface` is specified "
"as the port direction, the port can be connected to arbitrary interface. "
"Modport can be added to the `interface` like `interface::ModPort` too. Then "
"the port can be connected to only the interface which has `ModPort`."
msgstr ""
"ジェネリックインターフェースは特別なポート方向指定です。`interface` が指定さ"
"れたとき、そのポートには任意のインターフェースを接続可能です。`interface::"
"ModPort` のように modport を付けることもできます。この場合、`ModPort` を持つ"
"インターフェースだけが接続できます。"

#: src/05_language_reference/08_interface.md:3
msgid ""
"Interface is one of top level components in source code. Interface has "
"overridable parameters, and interface definitions."
msgstr ""
"インターフェースはソースコードの最上位コンポーネントの1つです。インターフェー"
"スはオーバーライド可能なパラメータ、インターフェース定義を持ちます。"

#: src/05_language_reference/08_interface.md:6
msgid "Overridable parameters are the same as them of module."
msgstr "オーバーライド可能なパラメータについてはモジュールと同じです。"

#: src/05_language_reference/08_interface.md:8
msgid ""
"In interface definitions, `modport` can be declared. `modport` can be used "
"as bundled port connection at the port declaration of module."
msgstr ""
"インターフェース定義では `modport` を宣言することができます。`modport` はモ"
"ジュールのポート宣言で、ポートを束ねて接続するために使うことができます。"

#: src/05_language_reference/08_interface.md:31
msgid ""
"In addition, functions specified with `import` keyword can be used via the "
"modport."
msgstr ""
"さらに、`import` キーワードを付けて指定された関数は modport を通して呼び出す"
"ことができます。"

#: src/05_language_reference/08_interface.md:55
msgid "Default members of modport"
msgstr "modportのデフォルトメンバー"

#: src/05_language_reference/08_interface.md:57
msgid ""
"Instead of specifing all members of modport, default members can be "
"specified like below:"
msgstr ""
"modportの全てのメンバーを指定する代わりに、以下のようにデフォルトメンバーを指"
"定することができます。"

#: src/05_language_reference/08_interface.md:59
msgid "`..input`: all variables in the interface as `input`"
msgstr "`..input`: インターフェース内の全ての変数を `input` として追加"

#: src/05_language_reference/08_interface.md:60
msgid "`..output`: all variables in the interface as `output`"
msgstr "`..output`: インターフェース内の全ての変数を `output` として追加"

#: src/05_language_reference/08_interface.md:61
msgid "`..same(modport_name)`: the same variables as `modport_name`"
msgstr "`..same(modport_name)`: `modport_name` と同じ変数を同じ方向で追加"

#: src/05_language_reference/08_interface.md:62
msgid ""
"`..converse(modport_name)`: the same variables as `modport_name`, but all "
"direction is converse"
msgstr ""
"`..converse(modport_name)`: `modport_name` と同じ変数を、方向を逆にして追加"

#: src/05_language_reference/08_interface.md:64
msgid "Specifing default members can be used with normal explicit members."
msgstr ""
"デフォルトメンバーの指定は通常の明示的なメンバーと一緒に使うこともできます。"

#: src/05_language_reference/08_interface.md:93
msgid "Connect interface instances/modport ports"
msgstr "インターフェースインスタンスとmodportポートの接続"

#: src/05_language_reference/08_interface.md:95
msgid ""
"An interface instance and a modport port can be connected with a module port "
"of which type is compatible with it or is the `generic` interface with the "
"same manner of SystemVerilog."
msgstr ""
"インターフェースインスタンスとmodportポートは、SystemVerilogと同様に、互換性"
"のあるモジュールポートあるいは `generic` インターフェースに接続することができ"
"ます。"

#: src/05_language_reference/09_package.md:3
msgid ""
"Package is one of top level components in source code. Package can organize "
"some declarations like parameter and function."
msgstr ""
"パッケージはソースコードの最上位コンポーネントの1つです。パッケージはパラメー"
"タや関数などいくつかの宣言をまとめることができます。"

#: src/05_language_reference/09_package.md:6
msgid ""
"To access an item in a package, `::` symbol can be used like `PackageA::"
"ParamA`."
msgstr ""
"パッケージ内の要素にアクセスするには、`::` 記号を使って `PackageA::ParamA` の"
"ようにします。"

#: src/05_language_reference/10_systemverilog_interoperation.md:3
msgid ""
"If you want to access to items of SystemVerilog, `$sv` namespace can be "
"used. For example, \"ModuleA\" in SystemVerilog source code can be accessed "
"by `$sv::ModuleA`. Veryl don't check the existence of the items."
msgstr ""
"SystemVerilogの要素にアクセスする場合は `$sv` 名前空間を使えます。例えば、"
"SystemVerilogソースコードの \"ModuleA\" は `$sv::ModuleA` です。Veryl はこれ"
"らの要素が実際に存在するかどうかは確認しません。"

#: src/05_language_reference/10_systemverilog_interoperation.md:7
msgid ""
"Veryl compiler emits the path name as is excluding `$sv::`. Therefore, "
"symbols in other HDLs like Verilog/VHDL can be refered through `$sv::` too. "
"It depeneds on implementation (e.g. simulator, synthesizer) whether each "
"symbols can be resolved."
msgstr ""
"Verylコンパイラは `$sv::` を除いたパス名をそのまま出力します。そのため "
"Verilog や VHDL のような他のHDLのシンボルも参照できます。それぞれのシンボルが"
"解決できるかどうかは実装（シミュレータや合成ツール）に依存します。"

#: src/05_language_reference/10_systemverilog_interoperation.md:20
msgid ""
"To access some identifiers which are used as Veryl's keywords, raw "
"identifier can be used."
msgstr ""
"Veryl のキーワードとして使われている識別子にアクセスするには生識別子を使いま"
"す。"

#: src/05_language_reference/10_systemverilog_interoperation.md:23
msgid ""
"```veryl,playground\n"
"module ModuleA (\n"
"    i_clk: input clock,\n"
") {\n"
"    inst a: $sv::ModuleA (\n"
"        // clock: i_clk\n"
"        // ^ this is syntax error because `clock` is a keyword\n"
"        // Instead of it, `r#clock` can be used\n"
"        r#clock: i_clk,\n"
"    );\n"
"}\n"
"```"
msgstr ""
"```veryl,playground\n"
"module ModuleA (\n"
"    i_clk: input clock,\n"
") {\n"
"    inst a: $sv::ModuleA (\n"
"        // clock: i_clk\n"
"        // ^ `clock` はキーワードなので構文エラー\n"
"        // 代わりに `r#clock` を使います\n"
"        r#clock: i_clk,\n"
"    );\n"
"}\n"
"```"

#: src/05_language_reference/11_visibility.md:3
msgid ""
"By default, all top level items of a project (module, interface and package) "
"are private. The \"private\" means they are not visible from other project."
msgstr ""
"デフォルトではプロジェクトのトップレベルアイテム（モジュール、インターフェー"
"ス、パッケージ）はプライベートです。プライベートとは他のプロジェクトから参照"
"できないことを意味します。"

#: src/05_language_reference/11_visibility.md:6
msgid ""
"`pub` keyword can be used to specify an item as public to other project. "
"`veryl doc` will generate [documents]"
"(../05_development_environment/09_documentation.md) of public items only."
msgstr ""
"`pub` キーワードによって他のプロジェクトから見えるように指定することができま"
"す。`veryl doc` コマンドはパブリックなアイテムの [ドキュメント]"
"(../05_development_environment/09_documentation.md) のみを生成します。"

#: src/05_language_reference/12_foreign_language_integration.md:3
msgid "`embed` declaration"
msgstr "`embed` 宣言"

#: src/05_language_reference/12_foreign_language_integration.md:5
msgid ""
"`embed` declaration can embed the code of foreign languages. The first "
"argument of `embed` declaration shows the way of embedding. The following "
"ways are supported:"
msgstr ""
"`embed` 宣言により他言語をコードに埋め込むことができます。`embed` 宣言の第一"
"引数は埋め込み方法です。以下の方法がサポートされています。"

#: src/05_language_reference/12_foreign_language_integration.md:9
msgid "`inline`: expand the code as is"
msgstr "`inline`: コードをそのまま展開する"

#: src/05_language_reference/12_foreign_language_integration.md:10
msgid "`cocotb`: treated as cocotb based test"
msgstr "`cocotb`: cocotb テストとして扱う"

#: src/05_language_reference/12_foreign_language_integration.md:12
msgid ""
"The code block are started by `lang{{{` and ended by `}}}`. The following "
"`lang` specifiers are supported:"
msgstr ""
"コードブロックは `lang{{{` で始まり、`}}}` で終わります。以下の `lang` 指示子"
"がサポートされています。"

#: src/05_language_reference/12_foreign_language_integration.md:15
msgid "`sv`: SystemVerilog"
msgstr "`sv`: SystemVerilog"

#: src/05_language_reference/12_foreign_language_integration.md:16
msgid "`py`: Python"
msgstr "`py`: Python"

#: src/05_language_reference/12_foreign_language_integration.md:25
msgid ""
"`embed` declaration with `inline` way and `sv` lang can also be put within "
"the body of module declaration, interface declaration and package "
"declaration. This usage is for integration with SystemVerilog testbench."
msgstr ""
"`inline` かつ `sv` 指定された `embed` 宣言はモジュール宣言、インターフェース"
"宣言及びパッケージ宣言の中に配置することができます。これはSystemVerilogテスト"
"ベンチとの統合に使用できます。"

#: src/05_language_reference/12_foreign_language_integration.md:47
msgid ""
"Identifiers defined in Veryl code can be placed within `embed` code blocks "
"using the pair of `\\{` and `\\}`. These identifiers are then resolved, and "
"the resolved identifiers are placed there."
msgstr ""
"Verylコード内で定義された識別子は `embed` コードブロック内に `\\{` と `\\}` "
"を用いて記述することができます。これらの識別子はコンパイル時に解決され、解決"
"された名前がその場所に挿入されます。"

#: src/05_language_reference/12_foreign_language_integration.md:66
msgid "`include` declaration"
msgstr "`include` 宣言"

#: src/05_language_reference/12_foreign_language_integration.md:68
msgid ""
"`include` declaration can include a file of foreign languages. The first "
"argument is the same as `embed` declaration, and the second is a relative "
"file path from the source code."
msgstr ""
"`include` 宣言により他言語のファイルを含めることができます。`include` 宣言の"
"第一引数は `embed` 宣言と同じです。第二引数はソースコードからの相対ファイルパ"
"スです。"

#: src/05_language_reference/12_foreign_language_integration.md:71
msgid ""
"```veryl\n"
"include(inline, \"module.sv\");\n"
"```"
msgstr ""
"```veryl\n"
"include(inline, \"module.sv\");\n"
"```"

#: src/05_language_reference/13_integrated_test.md:3
msgid ""
"Integrated test can be marked by `#[test(test_name)]` attribute. The marked "
"block will be identified as test, and executed through `veryl test` command."
msgstr ""
"組み込みテストは `#[test(test_name)]` アトリビュートでマークすることができま"
"す。マークされたブロックはテストとして認識され、 `veryl test` コマンドによっ"
"て実行されます。"

#: src/05_language_reference/13_integrated_test.md:6
msgid "There are two way to describe integrated test:"
msgstr "組み込みテストにはいくつかの種類があります。"

#: src/05_language_reference/13_integrated_test.md:8
#: src/05_language_reference/13_integrated_test.md:14
msgid "SystemVerilog test"
msgstr "SystemVerilogテスト"

#: src/05_language_reference/13_integrated_test.md:9
msgid "[cocotb](https://www.cocotb.org) test"
msgstr "[cocotb](https://www.cocotb.org) テスト"

#: src/05_language_reference/13_integrated_test.md:11
msgid ""
"About RTL simulator used by `veryl test`, see [Simulator]"
"(../06_development_environment/07_simulator.md). If `--wave` option is "
"specified, waveforms are generated."
msgstr ""
"`veryl test` で使用される RTLシミュレータについては [シミュレータ]"
"(../06_development_environment/07_simulator.md) を参照してください。`--wave` "
"オプションで波形を生成することもできます。"

#: src/05_language_reference/13_integrated_test.md:16
msgid ""
"SystemVerilog test can be described with `inline` specifier. The top level "
"module of the block must have the same name as the test name."
msgstr ""
"SystemVerilog テストは `inline` 指定子で記述することができます。ブロックの"
"トップレベルモジュールはテスト名と同じでなければなりません。"

#: src/05_language_reference/13_integrated_test.md:19
msgid ""
"The messages through `$info`, `$warning`, `$error` and `$fatal` system "
"function are handled by Veryl compiler, and shown as exectution log. The "
"calls of `$error` and `$fatal` are treated as test failure."
msgstr ""
"`$info`、`$warning`、`$error`、`$fatal` システム関数によるメッセージは Veryl "
"コンパイラにより実行ログとして表示されます。`$error` と `$fatal` の呼び出しは"
"テストの失敗として扱われます。"

#: src/05_language_reference/13_integrated_test.md:22
msgid ""
"The following example, a SystemVerilog source code embeded by `embed` "
"declaration are marked as test."
msgstr ""
"以下の例では SystemVerilog のソースコードを `embed` 宣言で埋め込み、テストと"
"してマークしています。"

#: src/05_language_reference/13_integrated_test.md:24
msgid ""
"```veryl,playground\n"
"#[test(test1)]\n"
"embed (inline) sv{{{\n"
"    module test1;\n"
"        initial begin\n"
"            assert (0) else $error(\"error\");\n"
"        end\n"
"    endmodule\n"
"}}}\n"
"```"
msgstr ""
"```veryl,playground\n"
"#[test(test1)]\n"
"embed (inline) sv{{{\n"
"    module test1;\n"
"        initial begin\n"
"            assert (0) else $error(\"error\");\n"
"        end\n"
"    endmodule\n"
"}}}\n"
"```"

#: src/05_language_reference/13_integrated_test.md:35
msgid "cocotb test"
msgstr "cocotb テスト"

#: src/05_language_reference/13_integrated_test.md:37
msgid ""
"cocotb test can be described with `cocotb` specifier. The target module name "
"for test should be specified by the second argument of `#[test]` attribute."
msgstr ""
"cocotb テストは `cocotb` 指定子で記述することができます。テスト対象のモジュー"
"ル名は `#[test]` アトリビュートの第二引数で指定します。"

#: src/05_language_reference/14_generics.md:3
msgid ""
"Generics can define parameterized items which can't achieved by parameter "
"override. The following items support generics:"
msgstr ""
"ジェネリクスはパラメータオーバーライドでは実現できないアイテムのパラメータ化"
"を可能にします。以下のアイテムがジェネリクスをサポートしています。"

#: src/05_language_reference/14_generics.md:6
msgid "function"
msgstr "関数"

#: src/05_language_reference/14_generics.md:7
msgid "module"
msgstr "モジュール"

#: src/05_language_reference/14_generics.md:8
msgid "interface"
msgstr "インターフェース"

#: src/05_language_reference/14_generics.md:9
msgid "package"
msgstr "パッケージ"

#: src/05_language_reference/14_generics.md:10
msgid "struct"
msgstr "構造体"

#: src/05_language_reference/14_generics.md:11
msgid "union"
msgstr "ユニオン"

#: src/05_language_reference/14_generics.md:13
msgid ""
"Each generic definition has generic parameters (often an uppercase letter is "
"used like `T`) which can be placed as identifier or expression in the "
"definition. Generic parameters are declarated after item's identifier with "
"`::<>`."
msgstr ""
"それぞれのジェネリック定義はジェネリックパラメータ（`T` のような大文字1文字が"
"よく使われます）を持ち、定義内で識別子や式として配置できます。ジェネリックパ"
"ラメータはアイテムの識別子の後に `::<>` を用いて宣言します。"

#: src/05_language_reference/14_generics.md:16
msgid ""
"Each generic parameter should have generic bound after colon like `T: "
"TypeName`. Generic bound represents what value can be passed to the generic "
"parameter. The available generic bounds are below:"
msgstr ""
"各ジェネリックパラメータにはコロンの後に `T: TypeName` のようなジェネリック境"
"界が必要です。ジェネリック境界はどのような値をそのパラメータに渡すことができ"
"るかを示します。使用可能なジェネリック境界は以下の通りです。"

#: src/05_language_reference/14_generics.md:20
msgid "`type` : means arbitrary type can be passed"
msgstr "`type`: 任意の型を渡すことができる"

#: src/05_language_reference/14_generics.md:21
msgid "`inst: X` : instance of `X`"
msgstr "`inst: X` : `X` のインスタンス"

#: src/05_language_reference/14_generics.md:22
msgid "named prototype, user defined data type or fixed data type"
msgstr "名前付きプロトタイプ、ユーザ定義型、組み込みのデータ型"

#: src/05_language_reference/14_generics.md:24
msgid ""
"Named prototype is a special generic bound. See [Prototype]"
"(14_generics/02_prototype.md) for details."
msgstr ""
"名前付きプロトタイプは特別なジェネリック境界です。詳細は [プロトタイプ]"
"(14_generics/02_prototype.md) を参照してください。"

#: src/05_language_reference/14_generics.md:26
msgid ""
"At the usage of generics, actual parameters can be given through `::<>`. As "
"the actual parameters, numeric literal and identifier concatenated by `::` "
"can be used."
msgstr ""
"ジェネリクスを使用するためには `::<>` を用いて実パラメータを与えます。実パラ"
"メータとしては数値リテラルと `::` で連結された識別子を使用することができま"
"す。"

#: src/05_language_reference/14_generics.md:29
msgid ""
"Additionally, the actual parameters should be accessible at the position of "
"the generics declaration. For example, module names can be used as actual "
"parameters because it is accessible through the whole project. On the other "
"hand, local parameters can't be used as actual parameters in many cases. "
"This is caused by that the local parameters is not accessible from the "
"potision of the generics declaration."
msgstr ""
"さらに、実パラメータはジェネリクス定義位置から参照できなければなりません。例"
"えば、モジュール名はプロジェクト全体から参照できるので、実パラメータとして使"
"用できます。一方、ローカルパラメータは多くの場合、実パラメータとして使用でき"
"ません。これはローカルパラメータがジェネリクス定義位置からは参照できない場合"
"に発生します。"

#: src/05_language_reference/14_generics.md:34
msgid "Generic Function"
msgstr "ジェネリック関数"

#: src/05_language_reference/14_generics.md:49
msgid "Generic Module/Interface"
msgstr "ジェネリックモジュール/インターフェース"

#: src/05_language_reference/14_generics.md:67
msgid "Generic Package"
msgstr "ジェネリックパッケージ"

#: src/05_language_reference/14_generics.md:80
msgid "Generic Struct"
msgstr "ジェネリック構造体"

#: src/05_language_reference/14_generics.md:82
msgid ""
"```veryl,playground\n"
"package PackageA {\n"
"    type TypeB = u32;\n"
"    type TypeC = u64;\n"
"}\n"
"\n"
"module ModuleA {\n"
"    type TypeA = i32;\n"
"\n"
"    struct StructA::<T: type> {\n"
"        A: T,\n"
"    }\n"
"\n"
"    // local defined type can be used\n"
"    // because `TypeA` is accessible at the definition of `StructA`\n"
"    var _a: StructA::<TypeA>          ;\n"
"    var _b: StructA::<PackageA::TypeB>;\n"
"    var _c: StructA::<PackageA::TypeC>;\n"
"}\n"
"```"
msgstr ""
"```veryl,playground\n"
"package PackageA {\n"
"    type TypeB = u32;\n"
"    type TypeC = u64;\n"
"}\n"
"\n"
"module ModuleA {\n"
"    type TypeA = i32;\n"
"\n"
"    struct StructA::<T: type> {\n"
"        A: T,\n"
"    }\n"
"\n"
"    // ローカルに定位された型が使用できています\n"
"    // これは `TypeA` が `StructA` の定義位置から参照できるためです\n"
"    var _a: StructA::<TypeA>          ;\n"
"    var _b: StructA::<PackageA::TypeB>;\n"
"    var _c: StructA::<PackageA::TypeC>;\n"
"}\n"
"```"

#: src/05_language_reference/14_generics/01_default_parameter.md:3
msgid ""
"Generic parameter can take a default value through `=` after the generic "
"parameter. If the parameter specifications at call site is omitted, the "
"default value is used."
msgstr ""
"ジェネリックパラメータはその後に `=` を加えることでデフォルト値を指定すること"
"ができます。呼び出し側でパラメータ指定が省略された場合にデフォルト値が使われ"
"ます。"

#: src/05_language_reference/14_generics/01_default_parameter.md:19
msgid ""
"Default parameters should be placed at the last of generic parameter list. "
"If not, it causes ambiguous which parameters are omitted."
msgstr ""
"デフォルトパラメータはジェネリックパラメータリストの最後に置く必要がありま"
"す。そうでなければ、どのパラメータが省略されたかが曖昧になるためです。"

#: src/05_language_reference/14_generics/01_default_parameter.md:22
msgid ""
"```veryl,playground\n"
"module ModuleA {\n"
"    function FuncA::<T: u32, U: u32 = 1> (\n"
"        a: input logic<T>,\n"
"    ) -> logic<T> {\n"
"        return a + U;\n"
"    }\n"
"\n"
"    // Error\n"
"    //function FuncA::<T: u32 = 1, U: u32> (\n"
"    //    a: input logic<T>,\n"
"    //) -> logic<T> {\n"
"    //    return a + U;\n"
"    //}\n"
"\n"
"    let _a: logic<10> = FuncA::<10>(1);\n"
"    let _b: logic<20> = FuncA::<20, 2>(1);\n"
"}\n"
"```"
msgstr ""
"```veryl,playground\n"
"module ModuleA {\n"
"    function FuncA::<T: u32, U: u32 = 1> (\n"
"        a: input logic<T>,\n"
"    ) -> logic<T> {\n"
"        return a + U;\n"
"    }\n"
"\n"
"    // エラー\n"
"    //function FuncA::<T: u32 = 1, U: u32> (\n"
"    //    a: input logic<T>,\n"
"    //) -> logic<T> {\n"
"    //    return a + U;\n"
"    //}\n"
"\n"
"    let _a: logic<10> = FuncA::<10>(1);\n"
"    let _b: logic<20> = FuncA::<20, 2>(1);\n"
"}\n"
"```"

#: src/05_language_reference/14_generics/02_prototype.md:3
msgid ""
"Prototype is a special generic bound. It represents prototype which can be "
"passed to the generic parameter. Currently module prototype, interface "
"prototype and package prototype are supported."
msgstr ""
"プロトタイプは特別なジェネリック境界で、ジェネリックパラメータに渡せるプロト"
"タイプを示します。現在はモジュールプロトタイプ、インターフェースプロトタイ"
"プ、パッケージプロトタイプがサポートされています。"

#: src/05_language_reference/14_generics/02_prototype.md:6
msgid "Module Prototype"
msgstr "モジュールプロトタイプ"

#: src/05_language_reference/14_generics/02_prototype.md:8
msgid ""
"In the following example, `ProtoA` is a module prototype which has parameter "
"`A` and port `i_dat` and `o_dat`. By binding like `T: ProtoA`, it is "
"represented that the generic parameter `T` should have the parameters and "
"ports."
msgstr ""
"以下の例では、`ProtoA` がパラメータ `A` とポート `i_dat` `o_dat` を持つモ"
"ジュールプロトタイプです。`T: ProtoA` のように制約することで、ジェネリックパ"
"ラメータ `T` がそれらのパラメータとポートを持つ必要があることが示されます。"

#: src/05_language_reference/14_generics/02_prototype.md:11
msgid ""
"To use prototype, `for` implementation is required. `ModuleC` and `ModuleD` "
"have `for ProroA` specifier which means the module satisfies the condision "
"of `ProroA`. So the modules can be used as the generic parameter `T` of "
"`ModuleB`."
msgstr ""
"プロトタイプを使うには `for` による実装が必要です。`ModuleC` と `ModuleD` は "
"`for ProtoA` 指定により、 `ProtoA` の条件を満たすことが示されています。これに"
"より、それらのモジュールは `ModuleB` の ジェネリックパラメータ `T` として使用"
"できるようになります。"

#: src/05_language_reference/14_generics/02_prototype.md:53
msgid "Interface Protype"
msgstr "インターフェースプロトタイプ"

#: src/05_language_reference/14_generics/02_prototype.md:55
msgid ""
"In the following exmaple, `ProtoA` is a interface prototype which has "
"constant `A`, `raedy`/`valid`/`data` variables, function `ack` and mopdort "
"`master`. `BUS_IF` is restricted by `ProtoA` is guaranteed to have the above "
"members, so they can be referred."
msgstr ""
"以下の例では、`ProtoA` が定数 `A` と変数 `raedy`/`valid`/`data`、関数 `ack`、"
"modport `master`を持つインターフェースプロトタイプです。`BUS_IF` は `ProtoA` "
"で制約されているので、それらのメンバーを持つことが保証されており、参照するこ"
"とができます。"

#: src/05_language_reference/14_generics/02_prototype.md:110
msgid "Package Prototype"
msgstr "パッケージプロトタイプ"

#: src/05_language_reference/14_generics/02_prototype.md:112
msgid ""
"In the following example, `ProtoA` is a package prototype which has type "
"`data_a` and `data_b`. `PKG` restricted by `ProtoA` is guaranteed to have "
"`data_a` and `data_b`, so they can be refered."
msgstr ""
"以下の例では、`ProtoA` が型 `data_a` と型 `data_b` を持つパッケージプロトタイ"
"プです。`PKG` は `ProtoA` で制約されているので、`data_a` と `data_b` を持つこ"
"とが保証されており、それらを参照することができます。"

#: src/05_language_reference/14_generics/02_prototype.md:131
msgid "Prototype Items"
msgstr "プロトタイプの要素"

#: src/05_language_reference/14_generics/02_prototype.md:133
msgid ""
"Following protoype items can be declaraed within module, interface and "
"package protoype declarations."
msgstr ""
"以下の要素はモジュール、インターフェース、パッケージのプロトタイプ内で宣言す"
"ることができます。"

#: src/05_language_reference/14_generics/02_prototype.md:135
msgid ""
"The following table shows which prototypes can have which prototype items."
msgstr "テーブルにどのプロトタイプがどの要素を持てるかをまとめます。"

#: src/05_language_reference/14_generics/02_prototype.md:137
#: src/05_language_reference/14_generics/02_prototype.md:154
msgid "Port"
msgstr "ポート"

#: src/05_language_reference/14_generics/02_prototype.md:137
#: src/05_language_reference/14_generics/02_prototype.md:165
msgid "Const"
msgstr "定数"

#: src/05_language_reference/14_generics/02_prototype.md:137
#: src/05_language_reference/14_generics/02_prototype.md:230
msgid "Struct/Enum/Union"
msgstr "構造体/列挙型/ユニオン"

#: src/05_language_reference/14_generics/02_prototype.md:137
#: src/05_language_reference/14_generics/02_prototype.md:285
msgid "Modport"
msgstr "modport"

#: src/05_language_reference/14_generics/02_prototype.md:139
#: src/05_language_reference/14_generics/02_prototype.md:140
#: src/05_language_reference/14_generics/02_prototype.md:141
msgid "v"
msgstr "v"

#: src/05_language_reference/14_generics/02_prototype.md:145
msgid ""
"Parameter prototype specifies identifier name and data type. Specification "
"of default value is optional."
msgstr ""
"パラメータプロトタイプは識別子とデータ型を指定します。デフォルト値の指定は省"
"略できます。"

#: src/05_language_reference/14_generics/02_prototype.md:156
msgid ""
"Port prototype specifies identifier name, direction and data type of a port."
msgstr "ポートプロトタイプは識別子と方向、データ型を指定します。"

#: src/05_language_reference/14_generics/02_prototype.md:167
msgid ""
"Const prototype specify identifier name and data type of a constant. It can "
"be used as a placeholder of a generic parameter."
msgstr ""
"定数プロトタイプは識別子とデータ型を指定します。ジェネリックなパラメータのプ"
"レースホルダとして使用できます。"

#: src/05_language_reference/14_generics/02_prototype.md:180
msgid ""
"Variable prototype specifies identifier name and data type of a variable. It "
"can be used for both of `var` and `let` declarations."
msgstr ""
"変数プロトタイプは識別子とデータ型を指定します。これらは `var` 及び `let` 宣"
"言で使用することができます。"

#: src/05_language_reference/14_generics/02_prototype.md:195
msgid ""
"Typedef prototype specifies identifier name of a type alias. It can be used "
"as a placeholder for a generic parameter."
msgstr ""
"Typedefプロトタイプは型エイリアスの識別子を指定します。ジェネリックなパラメー"
"タのプレースホルダとして使用できます。"

#: src/05_language_reference/14_generics/02_prototype.md:206
msgid ""
"Furthermore, a typedef prototype can specify its actual type on its RHS. "
"This allows a type symbol defined in a different package to be imported into "
"the proto package and referenced from other components through it."
msgstr ""
"さらに、typedefプロトタイプは右辺に実際の型を指定することができます。これによ"
"り他のパッケージで定義された型をそのプロトタイプパッケージに導入し、他のコン"
"ポーネントから参照することができます。"

#: src/05_language_reference/14_generics/02_prototype.md:232
msgid ""
"Struct, Enum and Union prototypes specify identifier name of a struct/enum/"
"union and identifier name and data type of each members."
msgstr ""
"構造体、列挙型、ユニオンプロトタイプは型の識別子と各メンバーの識別子、データ"
"型を指定します。"

#: src/05_language_reference/14_generics/02_prototype.md:255
msgid ""
"Function prototype specifies identifier name and return data type of a "
"function, and direction and data type of each arguments."
msgstr ""
"関数プロトタイプは識別子と戻り値のデータ型、引数の方向とデータ型を指定しま"
"す。"

#: src/05_language_reference/14_generics/02_prototype.md:263
msgid "Alias Module/Interface/Package"
msgstr "モジュール/インターフェース/パッケージ エイリアス"

#: src/05_language_reference/14_generics/02_prototype.md:265
msgid ""
"Module alias prototype, interface alias prototype and package alias protoype "
"specify identifier name and prototype of a module/interface/pacakge alias. "
"Type of an actual alias is restricted by the given prototype."
msgstr ""
"モジュール、インターフェース、パッケージのエイリアス プロトタイプは識別子とモ"
"ジュール、インターフェース、パッケージのプロトタイプを指定します。そのエイリ"
"アスの実際の型は与えられたプロトタイプに制約されます。"

#: src/05_language_reference/14_generics/02_prototype.md:287
msgid ""
"Modport prototype specifis identifier name of a modport, and identifier name "
"and direction of each membres."
msgstr ""
"modport プロトタイプはmodport の識別子と各メンバーの識別子と方向を指定しま"
"す。"

#: src/05_language_reference/15_clock_domain_annotation.md:3
msgid ""
"If there are some clocks in a module, explicit clock domain annotation like "
"`'a` is required. The annotation shows which clock domain each signals "
"belong."
msgstr ""
"モジュール内に複数のクロックがある場合、`'a` のような明示的なクロックドメイン"
"アノテーションが必要です。アノテーションはそれぞれの信号がどのクロックドメイ"
"ンに所属するかを示します。"

#: src/05_language_reference/15_clock_domain_annotation.md:6
msgid ""
"```veryl,playground\n"
"module ModuleA (\n"
"    // belong clock domain 'a\n"
"    i_clk_a: input  'a clock,\n"
"    i_dat_a: input  'a logic,\n"
"    o_dat_a: output 'a logic,\n"
"\n"
"    // belong clock domain 'b\n"
"    i_clk_b: input  'b clock,\n"
"    i_dat_b: input  'b logic,\n"
"    o_dat_b: output 'b logic,\n"
") {\n"
"    // assignment in the same clock domain is safe\n"
"    assign o_dat_a = i_dat_a;\n"
"    assign o_dat_b = i_dat_b;\n"
"}\n"
"```"
msgstr ""
"```veryl,playground\n"
"module ModuleA (\n"
"    // クロックドメイン 'a に所属\n"
"    i_clk_a: input  'a clock,\n"
"    i_dat_a: input  'a logic,\n"
"    o_dat_a: output 'a logic,\n"
"\n"
"    // クロックドメイン 'b に所属\n"
"    i_clk_b: input  'b clock,\n"
"    i_dat_b: input  'b logic,\n"
"    o_dat_b: output 'b logic,\n"
") {\n"
"    // 同じクロックドメイン内の代入は安全\n"
"    assign o_dat_a = i_dat_a;\n"
"    assign o_dat_b = i_dat_b;\n"
"}\n"
"```"

#: src/05_language_reference/15_clock_domain_annotation.md:24
msgid ""
"If there is single clock only in a module, the annotation can be omitted."
msgstr ""
"モジュール内にクロックが1つしかない場合、アノテーションは省略できます。"

#: src/05_language_reference/15_clock_domain_annotation.md:36
msgid ""
"`'_` is a special clock domain which means implicit clock domain. This can "
"be used to specify that some clocks belong the same implicit clock domain."
msgstr ""
"`'_` は暗黙のクロックドメインを表す特別なクロックドメインです。これは複数のク"
"ロックが同じ暗黙のクロックドメインに所属することを示すために使用できます。"

#: src/05_language_reference/15_clock_domain_annotation.md:39
msgid ""
"```veryl,playground\n"
"module ModuleA (\n"
"    // all signals belong implicit clock domain\n"
"    i_clk   : input  '_ clock,\n"
"    i_clk_x2: input  '_ clock,\n"
"    i_dat   : input     logic,\n"
"    o_dat   : output    logic,\n"
") {\n"
"    assign o_dat = i_dat;\n"
"}\n"
"```"
msgstr ""
"```veryl,playground\n"
"module ModuleA (\n"
"    // 全ての信号は暗黙のクロックドメインに所属\n"
"    i_clk   : input  '_ clock,\n"
"    i_clk_x2: input  '_ clock,\n"
"    i_dat   : input     logic,\n"
"    o_dat   : output    logic,\n"
") {\n"
"    assign o_dat = i_dat;\n"
"}\n"
"```"

#: src/05_language_reference/15_clock_domain_annotation.md:51
msgid "Interface instances can have clock domain annotation."
msgstr ""
"インターフェースインスタンスもクロックドメインアノテーションを指定可能です。"

#: src/05_language_reference/15_clock_domain_annotation/01_unsafe_cdc.md:3
msgid ""
"Veryl compiler detects clock domain crossing as error. So explicit `unsafe "
"(cdc)` block is required for clock domain crossing. In the block, clock "
"domain crossing error is suppressed, so designer should check whether it is "
"safe carefully."
msgstr ""
"Veryl コンパイラはクロックドメインクロッシングをエラーとして検出します。その"
"ためクロックドメインクロッシングを行う場所には明示的な `unsafe (cdc)` ブロッ"
"クが必要です。ブロック内ではクロックドメインクロッシングのチェックが抑制され"
"るため、設計者はそれが安全かどうか注意深く確認する必要があります。"

#: src/05_language_reference/15_clock_domain_annotation/01_unsafe_cdc.md:7
msgid ""
"```veryl,playground\n"
"module ModuleA (\n"
"    i_clk_a: input  'a clock,\n"
"    i_dat_a: input  'a logic,\n"
"    i_clk_b: input  'b clock,\n"
"    o_dat_b: output 'b logic,\n"
") {\n"
"    // Error \"Clock domain crossing is detected\"\n"
"    //assign o_dat_b = i_dat_a;\n"
"\n"
"    unsafe (cdc) {\n"
"        assign o_dat_b = i_dat_a;\n"
"    }\n"
"}\n"
"```"
msgstr ""
"```veryl,playground\n"
"module ModuleA (\n"
"    i_clk_a: input  'a clock,\n"
"    i_dat_a: input  'a logic,\n"
"    i_clk_b: input  'b clock,\n"
"    o_dat_b: output 'b logic,\n"
") {\n"
"    // エラー \"Clock domain crossing is detected\"\n"
"    //assign o_dat_b = i_dat_a;\n"
"\n"
"    unsafe (cdc) {\n"
"        assign o_dat_b = i_dat_a;\n"
"    }\n"
"}\n"
"```"

#: src/05_language_reference/15_clock_domain_annotation/01_unsafe_cdc.md:23
msgid ""
"Typically, synchronizer cells are inserted to the boundaries between clock "
"domains. `unsafe (cdc)` block is required for this usage too."
msgstr ""
"クロックドメイン境界には通常シンクロナイザセルが挿入されます。この場合も "
"`unsafe (cdc)` ブロックが必要です。"

#: src/05_language_reference/16_standard_library.md:3
msgid ""
"Veryl provides some useful and general modules as standard library. Standard "
"library is under `$std` namespace, and it can be used without adding "
"dependency."
msgstr ""
"Verylはいくつかの便利な汎用モジュールを標準ライブラリとして提供しています。標"
"準ライブラリは `$std` 名前空間にあり、依存関係を追加することなく使用できま"
"す。"

#: src/05_language_reference/16_standard_library.md:8
msgid ""
"The public API of standard library may be changed until Veryl 1.0 release."
msgstr ""
"標準ライブラリの公開APIは Veryl 1.0 がリリースされるまでは変更される可能性が"
"あります。"

#: src/05_language_reference/16_standard_library.md:12
msgid ""
"```veryl\n"
"module ModuleA {\n"
"    // $std::fifo is FIFO module in standard library\n"
"    inst u: $std::fifo (\n"
"        i_clk        : _,\n"
"        i_rst        : _,\n"
"        i_clear      : _,\n"
"        o_empty      : _,\n"
"        o_almost_full: _,\n"
"        o_full       : _,\n"
"        o_word_count : _,\n"
"        i_push       : _,\n"
"        i_data       : _,\n"
"        i_pop        : _,\n"
"        o_data       : _,\n"
"    );\n"
"}\n"
"```"
msgstr ""
"```veryl\n"
"module ModuleA {\n"
"    // $std::fifo は標準ライブラリの FIFO モジュール\n"
"    inst u: $std::fifo (\n"
"        i_clk        : _,\n"
"        i_rst        : _,\n"
"        i_clear      : _,\n"
"        o_empty      : _,\n"
"        o_almost_full: _,\n"
"        o_full       : _,\n"
"        o_word_count : _,\n"
"        i_push       : _,\n"
"        i_data       : _,\n"
"        i_pop        : _,\n"
"        o_data       : _,\n"
"    );\n"
"}\n"
"```"

#: src/05_language_reference/16_standard_library.md:31
msgid ""
"The full list and document of standard library is [https://std.veryl-lang."
"org](https://std.veryl-lang.org)."
msgstr ""
"標準ライブラリの完全なリストとドキュメントは [https://std.veryl-lang.org]"
"(https://std.veryl-lang.org) にあります。"

#: src/05_language_reference/17_alias.md:3
msgid ""
"Module, interface and package with generic arguments becomes too long "
"sometimes. `alias` can name a short name for such items."
msgstr ""
"ジェネリック引数を持つモジュール、インターフェース、パッケージの名前は非常に"
"長くなる場合があります。`alias` はそのような要素に短い名前をつけることができ"
"ます。"

#: src/06_development_environment.md:3
msgid ""
"In this chapter, we'll discuss about development environment including "
"project configuration and development tools."
msgstr "この章ではプロジェクト設定や開発ツールなど開発環境について説明します。"

#: src/06_development_environment/01_project_configuration.md:3
msgid ""
"[`[project]`](01_project_configuration.md#the-project-section) --- Defines a "
"project."
msgstr ""
"[`[project]`](01_project_configuration.md#the-project-section) --- プロジェク"
"ト定義"

#: src/06_development_environment/01_project_configuration.md:4
msgid ""
"[`name`](01_project_configuration.md#the-name-field) --- The name of the "
"project."
msgstr ""
"[`name`](01_project_configuration.md#the-name-field) --- プロジェクトの名前"

#: src/06_development_environment/01_project_configuration.md:5
msgid ""
"[`version`](01_project_configuration.md#the-version-field) --- The version "
"of the project."
msgstr ""
"[`version`](01_project_configuration.md#the-version-field) --- プロジェクトの"
"バージョン"

#: src/06_development_environment/01_project_configuration.md:6
msgid ""
"[`authors`](01_project_configuration.md#the-authors-field) --- The authors "
"of the project."
msgstr ""
"[`authors`](01_project_configuration.md#the-authors-field) --- プロジェクトの"
"作者"

#: src/06_development_environment/01_project_configuration.md:7
msgid ""
"[`description`](01_project_configuration.md#the-description-field) --- A "
"description of the project."
msgstr ""
"[`description`](01_project_configuration.md#the-description-field) --- プロ"
"ジェクトの説明"

#: src/06_development_environment/01_project_configuration.md:8
msgid ""
"[`license`](01_project_configuration.md#the-license-field) --- The project "
"license."
msgstr ""
"[`license`](01_project_configuration.md#the-license-field) --- プロジェクトの"
"ライセンス"

#: src/06_development_environment/01_project_configuration.md:9
msgid ""
"[`repository`](01_project_configuration.md#the-repository-field) --- URL of "
"the project source repository."
msgstr ""
"[`repository`](01_project_configuration.md#the-repository-field) --- プロジェ"
"クトのリポジトリの URL"

#: src/06_development_environment/01_project_configuration.md:10
msgid ""
"[`[build]`](01_project_configuration.md#the-build-section) --- Build "
"settings."
msgstr ""
"[`[build]`](01_project_configuration.md#the-build-section) --- ビルド設定"

#: src/06_development_environment/01_project_configuration.md:11
msgid ""
"[`[format]`](01_project_configuration.md#the-format-section) --- Format "
"settings."
msgstr ""
"[`[format]`](01_project_configuration.md#the-format-section) --- フォーマット"
"設定"

#: src/06_development_environment/01_project_configuration.md:12
msgid ""
"[`[lint]`](01_project_configuration.md#the-lint-section) --- Lint settings."
msgstr ""
"[`[lint]`](01_project_configuration.md#the-lint-section) --- リント設定"

#: src/06_development_environment/01_project_configuration.md:13
msgid ""
"[`[test]`](01_project_configuration.md#the-test-section) --- Test settings."
msgstr ""
"[`[test]`](01_project_configuration.md#the-test-section) --- テスト設定"

#: src/06_development_environment/01_project_configuration.md:14
msgid ""
"[`[publish]`](01_project_configuration.md#the-publish-section) --- Publish "
"settings."
msgstr ""
"[`[publish]`](01_project_configuration.md#the-publish-section) --- 公開設定"

#: src/06_development_environment/01_project_configuration.md:15
msgid ""
"[`[dependencies]`](01_project_configuration.md#the-dependencies-section) --- "
"Library dependencies."
msgstr ""
"[`[dependencies]`](01_project_configuration.md#the-dependencies-section) --- "
"ライブラリの依存関係"

#: src/06_development_environment/01_project_configuration.md:17
msgid "The `[project]` section"
msgstr "`[project]` セクション"

#: src/06_development_environment/01_project_configuration.md:19
msgid ""
"The first section of `Veryl.toml` is `[project]`. The mandatory fields are "
"`name` and `version`."
msgstr ""
"`Veryl.toml` の最初のセクションは `[project]` です。`name` と `version` は必"
"須です。"

#: src/06_development_environment/01_project_configuration.md:22
msgid "The `name` field"
msgstr "`name` フィールド"

#: src/06_development_environment/01_project_configuration.md:24
msgid ""
"The project name is used as prefix in the generated codes. So the name must "
"start with alphabet or `_`, and use only alphanumeric characters or `_`."
msgstr ""
"プロジェクト名は生成されるコードのプレフィックスに使われます。そのためプロ"
"ジェクト名はアルファベットか `_` で始まり、英数字と`_` しか使ってはいけませ"
"ん。"

#: src/06_development_environment/01_project_configuration.md:27
msgid "The `version` field"
msgstr "`version` フィールド"

#: src/06_development_environment/01_project_configuration.md:29
msgid ""
"The project version should follow [Semantic Versioning](https://semver."
"org/). The version is constructed by the following three numbers."
msgstr ""
"プロジェクトのバージョンは [セマンティックバージョニング](https://semver."
"org/)に従います。バージョンは以下の3つの数字からなります。"

#: src/06_development_environment/01_project_configuration.md:32
msgid "Major -- increment at incompatible changes"
msgstr "メジャー -- 互換性のない変更時に上げる"

#: src/06_development_environment/01_project_configuration.md:33
msgid "Minor -- increment at adding features with backward compatibility"
msgstr "マイナー -- 互換性のある機能追加時に上げる"

#: src/06_development_environment/01_project_configuration.md:34
msgid "Patch -- increment at bug fixes with backward compatibility"
msgstr "バッチ -- 互換性のあるバグ修正時に上げる"

#: src/06_development_environment/01_project_configuration.md:36
msgid ""
"```toml\n"
"[project]\n"
"version = \"0.1.0\"\n"
"```"
msgstr ""
"```toml\n"
"[project]\n"
"version = \"0.1.0\"\n"
"```"

#: src/06_development_environment/01_project_configuration.md:41
msgid "The `authors` field"
msgstr "`authors` フィールド"

#: src/06_development_environment/01_project_configuration.md:43
msgid ""
"The optional `authors` field lists in an array the people or organizations "
"that are considered the \"authors\" of the project. The format of each "
"string in the list is free. Name only, e-mail address only, and name with e-"
"mail address included within angled brackets are commonly used."
msgstr ""
"オプションの `authors` フィールドにはこのプロジェクトの作者である人や組織を配"
"列にリストアップします。配列内の各文字列のフォーマットは自由です。名前のみ、E"
"メールアドレスのみ、名前と括弧で囲んだEメールアドレスといった形式がよく使われ"
"ます。"

#: src/06_development_environment/01_project_configuration.md:46
msgid ""
"```toml\n"
"[project]\n"
"authors = [\"Fnu Lnu\", \"anonymous@example.com\", \"Fnu Lnu "
"<anonymous@example.com>\"]\n"
"```"
msgstr ""
"```toml\n"
"[project]\n"
"authors = [\"Fnu Lnu\", \"anonymous@example.com\", \"Fnu Lnu "
"<anonymous@example.com>\"]\n"
"```"

#: src/06_development_environment/01_project_configuration.md:51
msgid "The `description` field"
msgstr "`description` フィールド"

#: src/06_development_environment/01_project_configuration.md:53
msgid ""
"The `description` is a short blurb about the project. This should be plane "
"text (not Markdown)."
msgstr ""
"`description` はプロジェクトの短い説明です。マークダウンではなくプレーンテキ"
"スト形式で書きます。"

#: src/06_development_environment/01_project_configuration.md:55
msgid "The `license` field"
msgstr "`license` フィールド"

#: src/06_development_environment/01_project_configuration.md:57
msgid ""
"The `license` field contains the name of license that the project is "
"released under. The string should be follow [SPDX 2.3 license expression]"
"(https://spdx.github.io/spdx-spec/v2.3/SPDX-license-expressions)."
msgstr ""
"`license` フィールドはこのプロジェクトがどのライセンスで公開されているかを指"
"定します。指定する文字列は[SPDX 2.3 license expression](https://spdx.github."
"io/spdx-spec/v2.3/SPDX-license-expressions)に従ってください。"

#: src/06_development_environment/01_project_configuration.md:60
msgid ""
"```toml\n"
"[project]\n"
"license = \"MIT OR Apache-2.0\"\n"
"```"
msgstr ""
"```toml\n"
"[project]\n"
"license = \"MIT OR Apache-2.0\"\n"
"```"

#: src/06_development_environment/01_project_configuration.md:65
msgid "The `repository` field"
msgstr "`repository` フィールド"

#: src/06_development_environment/01_project_configuration.md:67
msgid ""
"The `repository` field should be a URL to the source repository for the "
"project."
msgstr "`repository` フィールドはプロジェクトのソースリポジトリへのURLです。"

#: src/06_development_environment/01_project_configuration.md:69
msgid ""
"```toml\n"
"[project]\n"
"repository = \"https://github.com/veryl-lang/veryl\"\n"
"```"
msgstr ""
"```toml\n"
"[project]\n"
"repository = \"https://github.com/veryl-lang/veryl\"\n"
"```"

#: src/06_development_environment/01_project_configuration.md:74
msgid "The `[build]` section"
msgstr "`[build]` セクション"

#: src/06_development_environment/01_project_configuration.md:76
msgid ""
"The `[build]` section contains the configurations of code generation. "
"Available configurations is [here](./01_project_configuration/01_build.md)."
msgstr ""
"`[build]` セクションはコード生成の設定です。詳細は[こちら]"
"(./01_project_configuration/01_build.md)。"

#: src/06_development_environment/01_project_configuration.md:79
msgid "The `[format]` section"
msgstr "`[format]` セクション"

#: src/06_development_environment/01_project_configuration.md:81
msgid ""
"The `[format]` section contains the configurations of code formatter. "
"Available configurations is [here](./01_project_configuration/02_format.md)."
msgstr ""
"`[format]` セクションはコードフォーマッターの設定です。詳細は[こちら]"
"(./01_project_configuration/02_format.md)。"

#: src/06_development_environment/01_project_configuration.md:84
msgid "The `[lint]` section"
msgstr "`[lint]` セクション"

#: src/06_development_environment/01_project_configuration.md:86
msgid ""
"The `[lint]` section contains the configurations of linter. Available "
"configurations is [here](./01_project_configuration/03_lint.md)."
msgstr ""
"`[lint]` セクションはリンタの設定です。詳細は[こちら]"
"(./01_project_configuration/03_lint.md)。"

#: src/06_development_environment/01_project_configuration.md:89
#: src/06_development_environment/01_project_configuration/04_test.md:12
msgid "The `[test]` section"
msgstr "`[test]` セクション"

#: src/06_development_environment/01_project_configuration.md:91
msgid ""
"The `[test]` section contains the configurations of test by RTL simulator. "
"Available configurations is [here](./01_project_configuration/04_test.md)."
msgstr ""
"`[test]` セクションはRTLシミュレータによるテストの設定です。詳細は[こちら]"
"(./01_project_configuration/04_test.md)。"

#: src/06_development_environment/01_project_configuration.md:94
msgid "The `[publish]` section"
msgstr "`[publish]` セクション"

#: src/06_development_environment/01_project_configuration.md:96
msgid ""
"The `[publish]` section contains the configurations of publishing. Available "
"configurations is [here](./01_project_configuration/05_publish.md)."
msgstr ""
"`[publish]` セクションはプロジェクト公開の設定です。詳細は[こちら]"
"(./01_project_configuration/05_publish.md)。"

#: src/06_development_environment/01_project_configuration.md:99
msgid "The `[dependencies]` section"
msgstr "`[dependencies]` セクション"

#: src/06_development_environment/01_project_configuration.md:101
msgid ""
"The `[dependencies]` section contains library dependencies. Available "
"configurations is [here](./02_dependencies.md)."
msgstr ""
"`[dependencies]` セクションはライブラリの依存関係です。詳細は[こちら]"
"(./02_dependencies.md)。"

#: src/06_development_environment/01_project_configuration/01_build.md:3
msgid "`[build]` section specifies the configuration for code generation."
msgstr "`[build]` セクションはコード生成の設定です。"

#: src/06_development_environment/01_project_configuration/01_build.md:5
msgid "The `clock_type` field"
msgstr "`clock_type` フィールド"

#: src/06_development_environment/01_project_configuration/01_build.md:7
msgid ""
"The `clock_type` field specifies which clock edge is used to drive flip-"
"flop. The available types are below:"
msgstr ""
"`clock_type` フィールドはフリップフロップを駆動するクロックエッジを指定しま"
"す。"

#: src/06_development_environment/01_project_configuration/01_build.md:10
msgid "`posedge` -- positive edge"
msgstr "`posedge` -- 立ち上がりエッジ"

#: src/06_development_environment/01_project_configuration/01_build.md:11
msgid "`negedge` -- negetive edge"
msgstr "`negedge` -- 立ち下がりエッジ"

#: src/06_development_environment/01_project_configuration/01_build.md:13
msgid "The `reset_type` field"
msgstr "`reset_type` フィールド"

#: src/06_development_environment/01_project_configuration/01_build.md:15
msgid ""
"The `reset_type` field specifies reset polarity and synchronisity. The "
"available types are below:"
msgstr "`reset_type` フィールドはリセットの極性と同期性を指定します。"

#: src/06_development_environment/01_project_configuration/01_build.md:18
msgid "`async_low` -- asynchronous and active low"
msgstr "`async_low` -- 非同期・負極性"

#: src/06_development_environment/01_project_configuration/01_build.md:19
msgid "`async_high` -- asynchronous and active high"
msgstr "`async_high` -- 非同期・正極性"

#: src/06_development_environment/01_project_configuration/01_build.md:20
msgid "`sync_low` -- synchronous and active low"
msgstr "`sync_low` -- 同期・負極性"

#: src/06_development_environment/01_project_configuration/01_build.md:21
msgid "`sync_high` -- synchronous and active high"
msgstr "`sync_high` -- 同期・正極性"

#: src/06_development_environment/01_project_configuration/01_build.md:23
msgid "The `filelist_type` field"
msgstr "`filelist_type` フィールド"

#: src/06_development_environment/01_project_configuration/01_build.md:25
msgid ""
"The `filelist_type` field specifies filelist format. The available types are "
"below:"
msgstr "`filelist_type` フィールドはファイルリストのフォーマットを指定します。"

#: src/06_development_environment/01_project_configuration/01_build.md:28
msgid "`absolute` -- plane text filelist including absolute file paths"
msgstr "`absolute` -- プレーンテキスト形式の絶対パスのリスト"

#: src/06_development_environment/01_project_configuration/01_build.md:29
msgid "`relative` -- plane text filelist including relative file paths"
msgstr "`relative` -- プレーンテキスト形式の相対パスのリスト"

#: src/06_development_environment/01_project_configuration/01_build.md:30
msgid "`flgen` -- [flgen](https://github.com/pezy-computing/flgen) filelist"
msgstr ""
"`flgen` -- [flgen](https://github.com/pezy-computing/flgen) 形式のファイルリ"
"スト"

#: src/06_development_environment/01_project_configuration/01_build.md:32
msgid "The `sources` field"
msgstr "`sources` フィールド"

#: src/06_development_environment/01_project_configuration/01_build.md:34
msgid ""
"By default, the Veryl compiler collects and translate all `*.veryl` files "
"which are visible from the project root. You can specify directries where "
"the Veryl compiler collect files by using the `sources` field."
msgstr ""
"デフォルトではVerylコンパイラはプロジェクトルートから見える全ての `*.veryl` "
"ファイルを処理します。特定のディレクトリだけを処理するために `sources` フィー"
"ルドを使用することができます。"

#: src/06_development_environment/01_project_configuration/01_build.md:37
msgid ""
"```toml\n"
"[build]\n"
"sources = [\"rtl/foo_module\", \"rtl/bar_module\"]\n"
"```"
msgstr ""
"```toml\n"
"[build]\n"
"sources = [\"rtl/foo_module\", \"rtl/bar_module\"]\n"
"```"

#: src/06_development_environment/01_project_configuration/01_build.md:42
msgid ""
"For the above exmaple, the Veryl compiler collect `*.veryl` files from `rtl/"
"foo_module` and `rtl/bar_module`."
msgstr ""
"上記の例では、Verylコンパイラは `rtl/foo_module` と `rtl/bar_module` の`*."
"veryl` ファイルを処理します。"

#: src/06_development_environment/01_project_configuration/01_build.md:44
msgid "The `target` field"
msgstr "`target` フィールド"

#: src/06_development_environment/01_project_configuration/01_build.md:46
msgid ""
"The `target` field specifies where the generated codes will be placed at. "
"The available types are below:"
msgstr "`target` フィールドはコードの生成先を指定します。"

#: src/06_development_environment/01_project_configuration/01_build.md:49
msgid "`source` -- as the same directory as the source code"
msgstr "`source` -- ソースコードと同じディレクトリ"

#: src/06_development_environment/01_project_configuration/01_build.md:50
#: src/06_development_environment/01_project_configuration/01_build.md:111
#: src/06_development_environment/01_project_configuration/04_test.md:38
msgid "`directory` -- specified directory"
msgstr "`directory` -- 特定のディレクトリ"

#: src/06_development_environment/01_project_configuration/01_build.md:51
msgid "`bundle` -- specified file"
msgstr "`bundle` -- 特定のファイル"

#: src/06_development_environment/01_project_configuration/01_build.md:53
msgid ""
"If you want to use `directory` or `bundle`, you should specify the target "
"path by `path` key."
msgstr ""
"`directory` あるいは `bundle` を指定する場合は、ターゲットパスを `path` キー"
"で指定します。"

#: src/06_development_environment/01_project_configuration/01_build.md:55
msgid ""
"```toml\n"
"[build]\n"
"target = {type = \"directory\", path = \"[dst dir]\"}\n"
"```"
msgstr ""
"```toml\n"
"[build]\n"
"target = {type = \"directory\", path = \"[dst dir]\"}\n"
"```"

#: src/06_development_environment/01_project_configuration/01_build.md:60
msgid "The `implicit_parameter_types` field"
msgstr "`implicit_parameter_types` フィールド"

#: src/06_development_environment/01_project_configuration/01_build.md:62
msgid ""
"The `implicit_parameter_types` field lists the types which will be elided in "
"`parameter` declaration of the generated codes. This is because some EDA "
"tools don't support `parameter` declaration with specific types (ex."
"`string`). If you want to elide `string`, you can specify like below:"
msgstr ""
"`implicit_parameter_types` フィールドは生成コードの `parameter` 宣言で省略す"
"る型をリストアップします。いくつかのEDAツールでは特定の型（例えば `string`）"
"を `parameter` 宣言で使うことができないためです。例えば `string` を指定する場"
"合は以下のようにします。"

#: src/06_development_environment/01_project_configuration/01_build.md:66
#: src/06_development_environment/09_compatibility.md:18
msgid ""
"```toml\n"
"[build]\n"
"implicit_parameter_types = [\"string\"]\n"
"```"
msgstr ""
"```toml\n"
"[build]\n"
"implicit_parameter_types = [\"string\"]\n"
"```"

#: src/06_development_environment/01_project_configuration/01_build.md:71
msgid "The `omit_project_prefix` field"
msgstr "`omit_project_prefix` フィールド"

#: src/06_development_environment/01_project_configuration/01_build.md:73
msgid ""
"If `omit_project_prefix` is set to `true`, the project prefix of module/"
"interface/package name will be omitted. This is `false` by default."
msgstr ""
"`omit_project_prefix` が `true` のとき、モジュール・インターフェース・パッ"
"ケージ名のプロジェクトプレフィックスは省略されます。この値はデフォルトで "
"`false` です。"

#: src/06_development_environment/01_project_configuration/01_build.md:81
msgid "The `strip_comments` field"
msgstr "`strip_comments` フィールド"

#: src/06_development_environment/01_project_configuration/01_build.md:83
msgid ""
"If `strip_comments` is set to `true`, all comments will be stripped. This is "
"`false` by default."
msgstr ""
"`strip_comments` が `true` のとき、コメント出力は省略されます。この値はデフォ"
"ルトで `false` です。"

#: src/06_development_environment/01_project_configuration/01_build.md:91
msgid "The `*_prefix` and `*_suffix` field"
msgstr "`*_prefix` と `*_suffix` フィールド"

#: src/06_development_environment/01_project_configuration/01_build.md:93
msgid ""
"`*_prefix` and `*_suffix` represent additional prefix and suffix for the "
"generated code. The available configurations are below:"
msgstr ""
"`*_prefix` と `*_suffix` はコード生成時の追加のプレフィックスとサフィックスを"
"指定します。指定可能な設定は以下の通りです。"

#: src/06_development_environment/01_project_configuration/01_build.md:96
msgid ""
"`clock_posedge_prefix`: Prefix for `clock` type at `clock_type = posedge`"
msgstr ""
"`clock_posedge_prefix`: `clock_type = posedge` のときの `clock` 型のプレ"
"フィックス"

#: src/06_development_environment/01_project_configuration/01_build.md:97
msgid ""
"`clock_posedge_suffix`: Suffix for `clock` type at `clock_type = posedge`"
msgstr ""
"`clock_posedge_suffix`: `clock_type = posedge` のときの `clock` 型のサフィッ"
"クス"

#: src/06_development_environment/01_project_configuration/01_build.md:98
msgid ""
"`clock_negedge_prefix`: Prefix for `clock` type at `clock_type = negedge`"
msgstr ""
"`clock_negedge_prefix`: `clock_type = negedge` のときの `clock` 型のプレ"
"フィックス"

#: src/06_development_environment/01_project_configuration/01_build.md:99
msgid ""
"`clock_negedge_suffix`: Suffix for `clock` type at `clock_type = negedge`"
msgstr ""
"`clock_negedge_suffix`: `clock_type = negedge` のときの `clock` 型のサフィッ"
"クス"

#: src/06_development_environment/01_project_configuration/01_build.md:100
msgid "`reset_high_prefix`: Prefix for `reset` type at `reset_type = *_high`"
msgstr ""
"`reset_high_prefix`: `reset_type = *_high` のときの `reset` 型のプレフィック"
"ス"

#: src/06_development_environment/01_project_configuration/01_build.md:101
msgid "`reset_high_suffix`: Suffix for `reset` type at `reset_type = *_high`"
msgstr ""
"`reset_high_suffix`: `reset_type = *_high` のときの `reset` 型のサフィックス"

#: src/06_development_environment/01_project_configuration/01_build.md:102
msgid "`reset_low_prefix`: Prefix for `reset` type at `reset_type = *_low`"
msgstr ""
"`reset_low_prefix`: `reset_type = *_low` のときの `reset` 型のプレフィックス"

#: src/06_development_environment/01_project_configuration/01_build.md:103
msgid "`reset_low_suffix`: Suffix for `reset` type at `reset_type = *_low`"
msgstr ""
"`reset_low_suffix`: `reset_type = *_low` のときの `reset` 型のサフィックス"

#: src/06_development_environment/01_project_configuration/01_build.md:105
msgid "The `sourcemap_target` field"
msgstr "`sourcemap_target` フィールド"

#: src/06_development_environment/01_project_configuration/01_build.md:107
msgid ""
"The `sourcemap_target` field specifies where the generated source maps will "
"be placed at. The available types are below:"
msgstr ""
"`sourcemap_target` フィールドはソースマップの生成先を指定します。指定可能な設"
"定は以下の通りです。"

#: src/06_development_environment/01_project_configuration/01_build.md:110
#: src/06_development_environment/01_project_configuration/04_test.md:37
msgid "`target` -- as the same directory as the target code"
msgstr "`target` -- ターゲットコードと同じディレクトリ"

#: src/06_development_environment/01_project_configuration/01_build.md:112
msgid "`none` -- no source map"
msgstr "`none` -- ソースマップなし"

#: src/06_development_environment/01_project_configuration/01_build.md:114
#: src/06_development_environment/01_project_configuration/04_test.md:40
msgid ""
"If you want to use `directory`, you should specify the target path by `path` "
"key."
msgstr ""
"`directory` を指定する場合は、ターゲットパスを `path` キーで指定します。"

#: src/06_development_environment/01_project_configuration/01_build.md:116
msgid ""
"```toml\n"
"[build]\n"
"sourcemap_target = {type = \"directory\", path = \"[dst dir]\"}\n"
"```"
msgstr ""
"```toml\n"
"[build]\n"
"sourcemap_target = {type = \"directory\", path = \"[dst dir]\"}\n"
"```"

#: src/06_development_environment/01_project_configuration/01_build.md:121
msgid "The `expand_inside_operation` field"
msgstr "`expand_inside_operation` フィールド"

#: src/06_development_environment/01_project_configuration/01_build.md:123
msgid ""
"If `expand_inside_operation` is set to `true`, operations using `inside` "
"operator will be expended to logic using `==?` operator. This is because "
"some EDA tools don't support `inside` operator. This is `false` by default."
msgstr ""
"`expand_inside_operation` が `true` のとき、`inside` 演算子を使った演算は`==?"
"` 演算子を使った論理に展開されます。これはいくつかのEDAツールが`inside` 演算"
"子をサポートしていないためです。この値はデフォルトで `false` です。"

#: src/06_development_environment/01_project_configuration/01_build.md:132
msgid "The `hashed_mangled_name` field"
msgstr "`hashed_mangled_name` フィールド"

#: src/06_development_environment/01_project_configuration/01_build.md:134
msgid ""
"If `hashed_mangled_name` is set `true`, part showing the given generic "
"arguments within the output component name is hashed. This option prevent "
"mangled name to become too long if there are many generic arguments. This is "
"`false` by default."
msgstr ""
"`hashed_mangled_name` が `true` のとき、出力されるコンポーネント名のうちジェ"
"ネリック引数を示す部分がハッシュ化されます。この設定はジェネリック引数が多い"
"ときにマングリングされた名前が長くなりすぎるのを防ぎます。この値はデフォルト"
"で `false` です。"

#: src/06_development_environment/01_project_configuration/01_build.md:143
#: src/06_development_environment/01_project_configuration/01_build.md:159
msgid "Example:"
msgstr "例:"

#: src/06_development_environment/01_project_configuration/01_build.md:145
msgid "Un-hashed name: `prj___PkgA__0__1__2__3`"
msgstr "ハッシュ化されていない名前: `prj___PkgA__0__1__2__3`"

#: src/06_development_environment/01_project_configuration/01_build.md:146
msgid "Hashed name: `prj___PkgA__3894375d1deadabb`"
msgstr "ハッシュ化された名前: `prj___PkgA__3894375d1deadabb`"

#: src/06_development_environment/01_project_configuration/01_build.md:148
msgid "The `flatten_array_interface` field"
msgstr "`flatten_array_interface` フィールド"

#: src/06_development_environment/01_project_configuration/01_build.md:150
msgid ""
"If `flatten_array_interface` is set true, multi-demensional array instance/"
"modport is flattened into a single demensional array. Some EDA tools do not "
"support multi-demensional array instance/modport and this field is for such "
"EDA tools. This is `false` by default."
msgstr ""
"`flatten_array_interface` が `true` のとき、多次元の配列インスタンスやmodport"
"は1次元に展開されます。この設定は多次元配列をサポートしていないEDAツールをサ"
"ポートするためのものです。この値はデフォルトで `false` です。"

#: src/06_development_environment/01_project_configuration/01_build.md:161
msgid "Veryl code"
msgstr "Veryl コード"

#: src/06_development_environment/01_project_configuration/01_build.md:175
msgid "Generated SystemVerilog code with `flatten_array_interface` = true"
msgstr "`flatten_array_interface = true` で生成された SystemVerilog コード"

#: src/06_development_environment/01_project_configuration/01_build.md:189
msgid "The `exclude_std` field"
msgstr "`exclude_std` フィールド"

#: src/06_development_environment/01_project_configuration/01_build.md:191
msgid ""
"If `exclude_std` is set to `true`, standard library will not be included."
msgstr ""
"`exclude_std` が `true` のとき、標準ライブラリはインクルードされません。"

#: src/06_development_environment/01_project_configuration/01_build.md:198
msgid "The `emit_cond_type` field"
msgstr "`emit_cond_type` フィールド"

#: src/06_development_environment/01_project_configuration/01_build.md:200
msgid ""
"If `emit_cond_type` is set to `true`, condition type like `unique`, "
"`unique0` and `priority` is emitted."
msgstr ""
"`emit_cond_type` が `true` のとき、`unique` `unique0` `priority` といった指定"
"が出力されます。"

#: src/06_development_environment/01_project_configuration/01_build.md:207
msgid "The `instance_depth_limit` field"
msgstr "`instance_depth_limit` フィールド"

#: src/06_development_environment/01_project_configuration/01_build.md:209
msgid ""
"`instance_depth_limit` is the maximum depth of instance hierarchy. The "
"default value is 128."
msgstr ""
"`instance_depth_limit` はインスタンス階層の最大深さです。デフォルト値は 128 "
"です。"

#: src/06_development_environment/01_project_configuration/01_build.md:216
msgid "The `instance_total_limit` field"
msgstr "`instance_total_limi` フィールド"

#: src/06_development_environment/01_project_configuration/01_build.md:218
msgid ""
"`instance_total_limit` is the maximum sub-instances in a module. The default "
"value is 1048576."
msgstr ""
"`instance_total_limit` は1つのモジュール内のサブインスタンスの最大数です。デ"
"フォルト値は 1048576 です。"

#: src/06_development_environment/01_project_configuration/01_build.md:225
msgid "The `incremental` field"
msgstr "`incremental` フィールド"

#: src/06_development_environment/01_project_configuration/01_build.md:227
msgid ""
"If `incremental` is set to `true`, Veryl compiler re-generates only files "
"related outdated files. The default value is `false`."
msgstr ""
"`incremental` が `true` のとき、Verylコンパイラは更新されたファイルに関連した"
"ファイルのみを再生成します。デフォルト値は `false` です。"

#: src/06_development_environment/01_project_configuration/01_build.md:235
msgid "The `error_count_limit` field"
msgstr "`error_count_limit` フィールド"

#: src/06_development_environment/01_project_configuration/01_build.md:237
msgid ""
"Specify the maximum number of error messages to display. To show all "
"messages, leave this field blank or set the value to 0."
msgstr ""
"表示するエラーメッセージの最大数を指定します。全てのメッセージを表示するには"
"フィールドを設定しないか、0を指定します。"

#: src/06_development_environment/01_project_configuration/02_format.md:3
msgid ""
"`[format]` section specifies the configuration for formatter like below:"
msgstr "`[format]` セクションはフォーマッタの設定です。"

#: src/06_development_environment/01_project_configuration/02_format.md:10
#: src/06_development_environment/01_project_configuration/03_lint.md:10
#: src/06_development_environment/01_project_configuration/04_test.md:10
#: src/06_development_environment/01_project_configuration/05_publish.md:11
msgid "Available configurations"
msgstr "設定"

#: src/06_development_environment/01_project_configuration/02_format.md:12
#: src/06_development_environment/01_project_configuration/03_lint.md:16
#: src/06_development_environment/01_project_configuration/04_test.md:59
#: src/06_development_environment/01_project_configuration/04_test.md:68
#: src/06_development_environment/01_project_configuration/04_test.md:77
#: src/06_development_environment/01_project_configuration/05_publish.md:13
#: src/06_development_environment/03_publish_project.md:53
#: src/06_development_environment/08_language_server.md:9
#: src/06_development_environment/10_documentation.md:59
msgid "Configuration"
msgstr "設定"

#: src/06_development_environment/01_project_configuration/02_format.md:12
#: src/06_development_environment/01_project_configuration/03_lint.md:16
#: src/06_development_environment/01_project_configuration/04_test.md:59
#: src/06_development_environment/01_project_configuration/04_test.md:68
#: src/06_development_environment/01_project_configuration/04_test.md:77
#: src/06_development_environment/01_project_configuration/05_publish.md:13
#: src/06_development_environment/08_language_server.md:9
#: src/06_development_environment/10_documentation.md:59
msgid "Value"
msgstr "設定値"

#: src/06_development_environment/01_project_configuration/02_format.md:12
#: src/06_development_environment/01_project_configuration/03_lint.md:16
#: src/06_development_environment/01_project_configuration/04_test.md:59
#: src/06_development_environment/01_project_configuration/04_test.md:68
#: src/06_development_environment/01_project_configuration/04_test.md:77
#: src/06_development_environment/01_project_configuration/05_publish.md:13
#: src/06_development_environment/08_language_server.md:9
#: src/06_development_environment/10_documentation.md:59
msgid "Description"
msgstr "説明"

#: src/06_development_environment/01_project_configuration/02_format.md:14
msgid "indent_width"
msgstr "indent_width"

#: src/06_development_environment/01_project_configuration/02_format.md:14
msgid "integer"
msgstr "整数"

#: src/06_development_environment/01_project_configuration/02_format.md:14
msgid "indent width by space"
msgstr "インデントのスペース幅"

#: src/06_development_environment/01_project_configuration/03_lint.md:3
msgid "`[lint]` section specifies the configuration for linter like below:"
msgstr "`[lint]` セクションはリンターの設定です。"

#: src/06_development_environment/01_project_configuration/03_lint.md:5
msgid ""
"```toml\n"
"[lint.naming]\n"
"case_enum = \"snake\"\n"
"```"
msgstr ""
"```toml\n"
"[lint.naming]\n"
"case_enum = \"snake\"\n"
"```"

#: src/06_development_environment/01_project_configuration/03_lint.md:12
msgid "The `[lint.naming]` section"
msgstr "`[lint.naming]` セクション"

#: src/06_development_environment/01_project_configuration/03_lint.md:14
msgid "This section contains configurations of naming conventions."
msgstr "このセクションは命名規則の設定です。"

#: src/06_development_environment/01_project_configuration/03_lint.md:18
msgid "case_enum"
msgstr "case_enum"

#: src/06_development_environment/01_project_configuration/03_lint.md:18
#: src/06_development_environment/01_project_configuration/03_lint.md:19
#: src/06_development_environment/01_project_configuration/03_lint.md:20
#: src/06_development_environment/01_project_configuration/03_lint.md:21
#: src/06_development_environment/01_project_configuration/03_lint.md:22
#: src/06_development_environment/01_project_configuration/03_lint.md:23
#: src/06_development_environment/01_project_configuration/03_lint.md:24
#: src/06_development_environment/01_project_configuration/03_lint.md:25
#: src/06_development_environment/01_project_configuration/03_lint.md:26
#: src/06_development_environment/01_project_configuration/03_lint.md:27
#: src/06_development_environment/01_project_configuration/03_lint.md:28
#: src/06_development_environment/01_project_configuration/03_lint.md:29
#: src/06_development_environment/01_project_configuration/03_lint.md:30
#: src/06_development_environment/01_project_configuration/03_lint.md:31
#: src/06_development_environment/01_project_configuration/03_lint.md:32
#: src/06_development_environment/01_project_configuration/03_lint.md:33
#: src/06_development_environment/01_project_configuration/03_lint.md:34
#: src/06_development_environment/01_project_configuration/03_lint.md:35
#: src/06_development_environment/01_project_configuration/03_lint.md:36
#: src/06_development_environment/01_project_configuration/03_lint.md:37
msgid "case type[^casetype]"
msgstr "ケースタイプ[^casetype]"

#: src/06_development_environment/01_project_configuration/03_lint.md:18
msgid "case style of `enum`"
msgstr "`enum` のケーススタイル"

#: src/06_development_environment/01_project_configuration/03_lint.md:19
msgid "case_function"
msgstr "case_function"

#: src/06_development_environment/01_project_configuration/03_lint.md:19
msgid "case style of `function`"
msgstr "`function` のケーススタイル"

#: src/06_development_environment/01_project_configuration/03_lint.md:20
msgid "case_function_inout"
msgstr "case_function_inout"

#: src/06_development_environment/01_project_configuration/03_lint.md:20
msgid "case style of `inout` argument"
msgstr "`inout` 引数のケーススタイル"

#: src/06_development_environment/01_project_configuration/03_lint.md:21
msgid "case_function_input"
msgstr "case_function_input"

#: src/06_development_environment/01_project_configuration/03_lint.md:21
msgid "case style of `input` argument"
msgstr "`input` 引数のケーススタイル"

#: src/06_development_environment/01_project_configuration/03_lint.md:22
msgid "case_function_output"
msgstr "case_function_output"

#: src/06_development_environment/01_project_configuration/03_lint.md:22
msgid "case style of `output` argument"
msgstr "`output` 引数のケーススタイル"

#: src/06_development_environment/01_project_configuration/03_lint.md:23
msgid "case_instance"
msgstr "case_instance"

#: src/06_development_environment/01_project_configuration/03_lint.md:23
msgid "case style of instance"
msgstr "インスタンスのケーススタイル"

#: src/06_development_environment/01_project_configuration/03_lint.md:24
msgid "case_interface"
msgstr "case_interface"

#: src/06_development_environment/01_project_configuration/03_lint.md:24
msgid "case style of `interface`"
msgstr "`interface` のケーススタイル"

#: src/06_development_environment/01_project_configuration/03_lint.md:25
msgid "case_modport"
msgstr "case_modport"

#: src/06_development_environment/01_project_configuration/03_lint.md:25
msgid "case style of `modport`"
msgstr "`modport` のケーススタイル"

#: src/06_development_environment/01_project_configuration/03_lint.md:26
msgid "case_module"
msgstr "case_module"

#: src/06_development_environment/01_project_configuration/03_lint.md:26
msgid "case style of `module`"
msgstr "`module` のケーススタイル"

#: src/06_development_environment/01_project_configuration/03_lint.md:27
msgid "case_package"
msgstr "case_package"

#: src/06_development_environment/01_project_configuration/03_lint.md:27
msgid "case style of `package`"
msgstr "`package` のケーススタイル"

#: src/06_development_environment/01_project_configuration/03_lint.md:28
msgid "case_parameter"
msgstr "case_parameter"

#: src/06_development_environment/01_project_configuration/03_lint.md:28
msgid "case style of `parameter`"
msgstr "`parameter` のケーススタイル"

#: src/06_development_environment/01_project_configuration/03_lint.md:29
msgid "case_port_inout"
msgstr "case_port_inout"

#: src/06_development_environment/01_project_configuration/03_lint.md:29
msgid "case style of `inout` port"
msgstr "`inout` ポートのケーススタイル"

#: src/06_development_environment/01_project_configuration/03_lint.md:30
msgid "case_port_input"
msgstr "case_port_input"

#: src/06_development_environment/01_project_configuration/03_lint.md:30
msgid "case style of `input` port"
msgstr "`input` ポートのケーススタイル"

#: src/06_development_environment/01_project_configuration/03_lint.md:31
msgid "case_port_modport"
msgstr "case_port_modport"

#: src/06_development_environment/01_project_configuration/03_lint.md:31
msgid "case style of `modport` port"
msgstr "`modport` ポートのケーススタイル"

#: src/06_development_environment/01_project_configuration/03_lint.md:32
msgid "case_port_output"
msgstr "case_port_output"

#: src/06_development_environment/01_project_configuration/03_lint.md:32
msgid "case style of `output` port"
msgstr "`output` ポートのケーススタイル"

#: src/06_development_environment/01_project_configuration/03_lint.md:33
msgid "case_reg"
msgstr "case_reg"

#: src/06_development_environment/01_project_configuration/03_lint.md:33
msgid "case style of register type variable[^reg]"
msgstr "レジスタ変数[^reg]のケーススタイル"

#: src/06_development_environment/01_project_configuration/03_lint.md:34
msgid "case_struct"
msgstr "case_struct"

#: src/06_development_environment/01_project_configuration/03_lint.md:34
msgid "case style of `struct`"
msgstr "`struct` のケーススタイル"

#: src/06_development_environment/01_project_configuration/03_lint.md:35
msgid "case_union"
msgstr "case_union"

#: src/06_development_environment/01_project_configuration/03_lint.md:35
msgid "case style of `union`"
msgstr "`union` のケーススタイル"

#: src/06_development_environment/01_project_configuration/03_lint.md:36
msgid "case_var"
msgstr "case_var"

#: src/06_development_environment/01_project_configuration/03_lint.md:36
msgid "case style of variable"
msgstr "変数のケーススタイル"

#: src/06_development_environment/01_project_configuration/03_lint.md:37
msgid "case_wire"
msgstr "case_wire"

#: src/06_development_environment/01_project_configuration/03_lint.md:37
msgid "case style of wire type variable[^wire]"
msgstr "ワイヤ変数[^wire]のケーススタイル"

#: src/06_development_environment/01_project_configuration/03_lint.md:38
msgid "prefix_enum"
msgstr "prefix_enum"

#: src/06_development_environment/01_project_configuration/03_lint.md:38
#: src/06_development_environment/01_project_configuration/03_lint.md:39
#: src/06_development_environment/01_project_configuration/03_lint.md:40
#: src/06_development_environment/01_project_configuration/03_lint.md:41
#: src/06_development_environment/01_project_configuration/03_lint.md:42
#: src/06_development_environment/01_project_configuration/03_lint.md:43
#: src/06_development_environment/01_project_configuration/03_lint.md:44
#: src/06_development_environment/01_project_configuration/03_lint.md:45
#: src/06_development_environment/01_project_configuration/03_lint.md:46
#: src/06_development_environment/01_project_configuration/03_lint.md:47
#: src/06_development_environment/01_project_configuration/03_lint.md:48
#: src/06_development_environment/01_project_configuration/03_lint.md:49
#: src/06_development_environment/01_project_configuration/03_lint.md:50
#: src/06_development_environment/01_project_configuration/03_lint.md:51
#: src/06_development_environment/01_project_configuration/03_lint.md:52
#: src/06_development_environment/01_project_configuration/03_lint.md:53
#: src/06_development_environment/01_project_configuration/03_lint.md:54
#: src/06_development_environment/01_project_configuration/03_lint.md:55
#: src/06_development_environment/01_project_configuration/03_lint.md:56
#: src/06_development_environment/01_project_configuration/03_lint.md:57
#: src/06_development_environment/01_project_configuration/03_lint.md:58
#: src/06_development_environment/01_project_configuration/03_lint.md:59
#: src/06_development_environment/01_project_configuration/03_lint.md:60
#: src/06_development_environment/01_project_configuration/03_lint.md:61
#: src/06_development_environment/01_project_configuration/03_lint.md:62
#: src/06_development_environment/01_project_configuration/03_lint.md:63
#: src/06_development_environment/01_project_configuration/03_lint.md:64
#: src/06_development_environment/01_project_configuration/03_lint.md:65
#: src/06_development_environment/01_project_configuration/03_lint.md:66
#: src/06_development_environment/01_project_configuration/03_lint.md:67
#: src/06_development_environment/01_project_configuration/03_lint.md:68
#: src/06_development_environment/01_project_configuration/03_lint.md:69
#: src/06_development_environment/01_project_configuration/03_lint.md:70
#: src/06_development_environment/01_project_configuration/03_lint.md:71
#: src/06_development_environment/01_project_configuration/03_lint.md:72
#: src/06_development_environment/01_project_configuration/03_lint.md:73
#: src/06_development_environment/01_project_configuration/03_lint.md:74
#: src/06_development_environment/01_project_configuration/03_lint.md:75
#: src/06_development_environment/01_project_configuration/03_lint.md:76
#: src/06_development_environment/01_project_configuration/03_lint.md:77
#: src/06_development_environment/01_project_configuration/05_publish.md:17
#: src/06_development_environment/01_project_configuration/05_publish.md:18
#: src/06_development_environment/10_documentation.md:61
msgid "string"
msgstr "文字列"

#: src/06_development_environment/01_project_configuration/03_lint.md:38
msgid "prefix of `enum`"
msgstr "`enum` のプレフィックス"

#: src/06_development_environment/01_project_configuration/03_lint.md:39
msgid "prefix_function"
msgstr "prefix_function"

#: src/06_development_environment/01_project_configuration/03_lint.md:39
msgid "prefix of `function`"
msgstr "`function` のプレフィックス"

#: src/06_development_environment/01_project_configuration/03_lint.md:40
msgid "prefix_function_inout"
msgstr "prefix_function_inout"

#: src/06_development_environment/01_project_configuration/03_lint.md:40
msgid "prefix of `inout` argument"
msgstr "`inout` 引数のプレフィックス"

#: src/06_development_environment/01_project_configuration/03_lint.md:41
msgid "prefix_function_input"
msgstr "prefix_function_input"

#: src/06_development_environment/01_project_configuration/03_lint.md:41
msgid "prefix of `input` argument"
msgstr "`input` 引数のプレフィックス"

#: src/06_development_environment/01_project_configuration/03_lint.md:42
msgid "prefix_function_output"
msgstr "prefix_function_output"

#: src/06_development_environment/01_project_configuration/03_lint.md:42
msgid "prefix of `output` argument"
msgstr "`output` 引数のプレフィックス"

#: src/06_development_environment/01_project_configuration/03_lint.md:43
msgid "prefix_instance"
msgstr "prefix_instance"

#: src/06_development_environment/01_project_configuration/03_lint.md:43
msgid "prefix of instance"
msgstr "インスタンスのプレフィックス"

#: src/06_development_environment/01_project_configuration/03_lint.md:44
msgid "prefix_interface"
msgstr "prefix_interface"

#: src/06_development_environment/01_project_configuration/03_lint.md:44
msgid "prefix of `interface`"
msgstr "`interface` のプレフィックス"

#: src/06_development_environment/01_project_configuration/03_lint.md:45
msgid "prefix_modport"
msgstr "prefix_modport"

#: src/06_development_environment/01_project_configuration/03_lint.md:45
msgid "prefix of `modport`"
msgstr "`modport` のプレフィックス"

#: src/06_development_environment/01_project_configuration/03_lint.md:46
msgid "prefix_module"
msgstr "prefix_module"

#: src/06_development_environment/01_project_configuration/03_lint.md:46
msgid "prefix of `module`"
msgstr "`module` のプレフィックス"

#: src/06_development_environment/01_project_configuration/03_lint.md:47
msgid "prefix_package"
msgstr "prefix_package"

#: src/06_development_environment/01_project_configuration/03_lint.md:47
msgid "prefix of `package`"
msgstr "`package` のプレフィックス"

#: src/06_development_environment/01_project_configuration/03_lint.md:48
msgid "prefix_parameter"
msgstr "prefix_parameter"

#: src/06_development_environment/01_project_configuration/03_lint.md:48
msgid "prefix of `parameter`"
msgstr "`parameter` のプレフィックス"

#: src/06_development_environment/01_project_configuration/03_lint.md:49
msgid "prefix_port_inout"
msgstr "prefix_port_inout"

#: src/06_development_environment/01_project_configuration/03_lint.md:49
msgid "prefix of `inout` port"
msgstr "`inout` ポートのプレフィックス"

#: src/06_development_environment/01_project_configuration/03_lint.md:50
msgid "prefix_port_input"
msgstr "prefix_port_input"

#: src/06_development_environment/01_project_configuration/03_lint.md:50
msgid "prefix of `input` port"
msgstr "`input` ポートのプレフィックス"

#: src/06_development_environment/01_project_configuration/03_lint.md:51
msgid "prefix_port_modport"
msgstr "prefix_port_modport"

#: src/06_development_environment/01_project_configuration/03_lint.md:51
msgid "prefix of `modport` port"
msgstr "`modport` ポートのプレフィックス"

#: src/06_development_environment/01_project_configuration/03_lint.md:52
msgid "prefix_port_output"
msgstr "prefix_port_output"

#: src/06_development_environment/01_project_configuration/03_lint.md:52
msgid "prefix of `output` port"
msgstr "`output` ポートのプレフィックス"

#: src/06_development_environment/01_project_configuration/03_lint.md:53
msgid "prefix_reg"
msgstr "prefix_reg"

#: src/06_development_environment/01_project_configuration/03_lint.md:53
msgid "prefix of register type variable[^reg]"
msgstr "レジスタ変数[^reg]のプレフィックス"

#: src/06_development_environment/01_project_configuration/03_lint.md:54
msgid "prefix_struct"
msgstr "prefix_struct"

#: src/06_development_environment/01_project_configuration/03_lint.md:54
msgid "prefix of `struct`"
msgstr "`struct` のプレフィックス"

#: src/06_development_environment/01_project_configuration/03_lint.md:55
msgid "prefix_union"
msgstr "prefix_union"

#: src/06_development_environment/01_project_configuration/03_lint.md:55
msgid "prefix of `union`"
msgstr "`union` のプレフィックス"

#: src/06_development_environment/01_project_configuration/03_lint.md:56
msgid "prefix_var"
msgstr "prefix_var"

#: src/06_development_environment/01_project_configuration/03_lint.md:56
msgid "prefix of variable"
msgstr "変数のプレフィックス"

#: src/06_development_environment/01_project_configuration/03_lint.md:57
msgid "prefix_wire"
msgstr "prefix_wire"

#: src/06_development_environment/01_project_configuration/03_lint.md:57
msgid "prefix of wire type variable[^wire]"
msgstr "ワイヤ変数[^wire]のプレフィックス"

#: src/06_development_environment/01_project_configuration/03_lint.md:58
msgid "suffix_enum"
msgstr "suffix_enum"

#: src/06_development_environment/01_project_configuration/03_lint.md:58
msgid "suffix of `enum`"
msgstr "`enum` のサフィックス"

#: src/06_development_environment/01_project_configuration/03_lint.md:59
msgid "suffix_function"
msgstr "suffix_function"

#: src/06_development_environment/01_project_configuration/03_lint.md:59
msgid "suffix of `function`"
msgstr "`function` のサフィックス"

#: src/06_development_environment/01_project_configuration/03_lint.md:60
msgid "suffix_function_inout"
msgstr "suffix_function_inout"

#: src/06_development_environment/01_project_configuration/03_lint.md:60
msgid "suffix of `inout` argument"
msgstr "`inout` 引数のサフィックス"

#: src/06_development_environment/01_project_configuration/03_lint.md:61
msgid "suffix_function_input"
msgstr "suffix_function_input"

#: src/06_development_environment/01_project_configuration/03_lint.md:61
msgid "suffix of `input` argument"
msgstr "`input` 引数のサフィックス"

#: src/06_development_environment/01_project_configuration/03_lint.md:62
msgid "suffix_function_output"
msgstr "suffix_function_output"

#: src/06_development_environment/01_project_configuration/03_lint.md:62
msgid "suffix of `output` argument"
msgstr "`output` 引数のサフィックス"

#: src/06_development_environment/01_project_configuration/03_lint.md:63
msgid "suffix_instance"
msgstr "suffix_instance"

#: src/06_development_environment/01_project_configuration/03_lint.md:63
msgid "suffix of instance"
msgstr "インスタンスのサフィックス"

#: src/06_development_environment/01_project_configuration/03_lint.md:64
msgid "suffix_interface"
msgstr "suffix_interface"

#: src/06_development_environment/01_project_configuration/03_lint.md:64
msgid "suffix of `interface`"
msgstr "`interface` のサフィックス"

#: src/06_development_environment/01_project_configuration/03_lint.md:65
msgid "suffix_modport"
msgstr "suffix_modport"

#: src/06_development_environment/01_project_configuration/03_lint.md:65
msgid "suffix of `modport`"
msgstr "`modport` のサフィックス"

#: src/06_development_environment/01_project_configuration/03_lint.md:66
msgid "suffix_module"
msgstr "suffix_module"

#: src/06_development_environment/01_project_configuration/03_lint.md:66
msgid "suffix of `module`"
msgstr "`module` のサフィックス"

#: src/06_development_environment/01_project_configuration/03_lint.md:67
msgid "suffix_package"
msgstr "suffix_package"

#: src/06_development_environment/01_project_configuration/03_lint.md:67
msgid "suffix of `package`"
msgstr "`package` のサフィックス"

#: src/06_development_environment/01_project_configuration/03_lint.md:68
msgid "suffix_parameter"
msgstr "suffix_parameter"

#: src/06_development_environment/01_project_configuration/03_lint.md:68
msgid "suffix of `parameter`"
msgstr "`parameter` のサフィックス"

#: src/06_development_environment/01_project_configuration/03_lint.md:69
msgid "suffix_port_inout"
msgstr "suffix_port_inout"

#: src/06_development_environment/01_project_configuration/03_lint.md:69
msgid "suffix of `inout` port"
msgstr "`inout` ポートのサフィックス"

#: src/06_development_environment/01_project_configuration/03_lint.md:70
msgid "suffix_port_input"
msgstr "suffix_port_input"

#: src/06_development_environment/01_project_configuration/03_lint.md:70
msgid "suffix of `input` port"
msgstr "`input` ポートのサフィックス"

#: src/06_development_environment/01_project_configuration/03_lint.md:71
msgid "suffix_port_modport"
msgstr "suffix_port_modport"

#: src/06_development_environment/01_project_configuration/03_lint.md:71
msgid "suffix of `modport` port"
msgstr "`modport` ポートのサフィックス"

#: src/06_development_environment/01_project_configuration/03_lint.md:72
msgid "suffix_port_output"
msgstr "suffix_port_output"

#: src/06_development_environment/01_project_configuration/03_lint.md:72
msgid "suffix of `output` port"
msgstr "`output` ポートのサフィックス"

#: src/06_development_environment/01_project_configuration/03_lint.md:73
msgid "suffix_reg"
msgstr "suffix_reg"

#: src/06_development_environment/01_project_configuration/03_lint.md:73
msgid "suffix of register type variable[^reg]"
msgstr "レジスタ変数[^reg]のサフィックス"

#: src/06_development_environment/01_project_configuration/03_lint.md:74
msgid "suffix_struct"
msgstr "suffix_struct"

#: src/06_development_environment/01_project_configuration/03_lint.md:74
msgid "suffix of `struct`"
msgstr "`struct` のサフィックス"

#: src/06_development_environment/01_project_configuration/03_lint.md:75
msgid "suffix_union"
msgstr "suffix_union"

#: src/06_development_environment/01_project_configuration/03_lint.md:75
msgid "suffix of `union`"
msgstr "`union` のサフィックス"

#: src/06_development_environment/01_project_configuration/03_lint.md:76
msgid "suffix_var"
msgstr "suffix_var"

#: src/06_development_environment/01_project_configuration/03_lint.md:76
msgid "suffix of variable"
msgstr "変数のサフィックス"

#: src/06_development_environment/01_project_configuration/03_lint.md:77
msgid "suffix_wire"
msgstr "suffix_wire"

#: src/06_development_environment/01_project_configuration/03_lint.md:77
msgid "suffix of wire type variable[^wire]"
msgstr "ワイヤ変数[^wire]のサフィックス"

#: src/06_development_environment/01_project_configuration/03_lint.md:78
msgid "re_forbidden_enum"
msgstr "re_forbidden_enum"

#: src/06_development_environment/01_project_configuration/03_lint.md:78
#: src/06_development_environment/01_project_configuration/03_lint.md:79
#: src/06_development_environment/01_project_configuration/03_lint.md:80
#: src/06_development_environment/01_project_configuration/03_lint.md:81
#: src/06_development_environment/01_project_configuration/03_lint.md:82
#: src/06_development_environment/01_project_configuration/03_lint.md:83
#: src/06_development_environment/01_project_configuration/03_lint.md:84
#: src/06_development_environment/01_project_configuration/03_lint.md:85
#: src/06_development_environment/01_project_configuration/03_lint.md:86
#: src/06_development_environment/01_project_configuration/03_lint.md:87
#: src/06_development_environment/01_project_configuration/03_lint.md:88
#: src/06_development_environment/01_project_configuration/03_lint.md:89
#: src/06_development_environment/01_project_configuration/03_lint.md:90
#: src/06_development_environment/01_project_configuration/03_lint.md:91
#: src/06_development_environment/01_project_configuration/03_lint.md:92
#: src/06_development_environment/01_project_configuration/03_lint.md:93
#: src/06_development_environment/01_project_configuration/03_lint.md:94
#: src/06_development_environment/01_project_configuration/03_lint.md:95
#: src/06_development_environment/01_project_configuration/03_lint.md:96
#: src/06_development_environment/01_project_configuration/03_lint.md:97
#: src/06_development_environment/01_project_configuration/03_lint.md:98
#: src/06_development_environment/01_project_configuration/03_lint.md:99
#: src/06_development_environment/01_project_configuration/03_lint.md:100
#: src/06_development_environment/01_project_configuration/03_lint.md:101
#: src/06_development_environment/01_project_configuration/03_lint.md:102
#: src/06_development_environment/01_project_configuration/03_lint.md:103
#: src/06_development_environment/01_project_configuration/03_lint.md:104
#: src/06_development_environment/01_project_configuration/03_lint.md:105
#: src/06_development_environment/01_project_configuration/03_lint.md:106
#: src/06_development_environment/01_project_configuration/03_lint.md:107
#: src/06_development_environment/01_project_configuration/03_lint.md:108
#: src/06_development_environment/01_project_configuration/03_lint.md:109
#: src/06_development_environment/01_project_configuration/03_lint.md:110
#: src/06_development_environment/01_project_configuration/03_lint.md:111
#: src/06_development_environment/01_project_configuration/03_lint.md:112
#: src/06_development_environment/01_project_configuration/03_lint.md:113
#: src/06_development_environment/01_project_configuration/03_lint.md:114
#: src/06_development_environment/01_project_configuration/03_lint.md:115
#: src/06_development_environment/01_project_configuration/03_lint.md:116
#: src/06_development_environment/01_project_configuration/03_lint.md:117
msgid "regex[^regex]"
msgstr "正規表現[^regex]"

#: src/06_development_environment/01_project_configuration/03_lint.md:78
msgid "regex forbidden of `enum`"
msgstr "`enum` の禁止正規表現"

#: src/06_development_environment/01_project_configuration/03_lint.md:79
msgid "re_forbidden_function"
msgstr "re_forbidden_function"

#: src/06_development_environment/01_project_configuration/03_lint.md:79
msgid "regex forbidden of `function`"
msgstr "`function` の禁止正規表現"

#: src/06_development_environment/01_project_configuration/03_lint.md:80
msgid "re_forbidden_function_inout"
msgstr "re_forbidden_function_inout"

#: src/06_development_environment/01_project_configuration/03_lint.md:80
msgid "regex forbidden of `inout` argument"
msgstr "`inout` 引数の禁止正規表現"

#: src/06_development_environment/01_project_configuration/03_lint.md:81
msgid "re_forbidden_function_input"
msgstr "re_forbidden_function_input"

#: src/06_development_environment/01_project_configuration/03_lint.md:81
msgid "regex forbidden of `input` argument"
msgstr "`input` 引数の禁止正規表現"

#: src/06_development_environment/01_project_configuration/03_lint.md:82
msgid "re_forbidden_function_output"
msgstr "re_forbidden_function_output"

#: src/06_development_environment/01_project_configuration/03_lint.md:82
msgid "regex forbidden of `output` argument"
msgstr "`output` 引数の禁止正規表現"

#: src/06_development_environment/01_project_configuration/03_lint.md:83
msgid "re_forbidden_instance"
msgstr "re_forbidden_instance"

#: src/06_development_environment/01_project_configuration/03_lint.md:83
msgid "regex forbidden of instance"
msgstr "インスタンスの禁止正規表現"

#: src/06_development_environment/01_project_configuration/03_lint.md:84
msgid "re_forbidden_interface"
msgstr "re_forbidden_interface"

#: src/06_development_environment/01_project_configuration/03_lint.md:84
msgid "regex forbidden of `interface`"
msgstr "`interface` の禁止正規表現"

#: src/06_development_environment/01_project_configuration/03_lint.md:85
msgid "re_forbidden_modport"
msgstr "re_forbidden_modport"

#: src/06_development_environment/01_project_configuration/03_lint.md:85
msgid "regex forbidden of `modport`"
msgstr "`modport` の禁止正規表現"

#: src/06_development_environment/01_project_configuration/03_lint.md:86
msgid "re_forbidden_module"
msgstr "re_forbidden_module"

#: src/06_development_environment/01_project_configuration/03_lint.md:86
msgid "regex forbidden of `module`"
msgstr "`module` の禁止正規表現"

#: src/06_development_environment/01_project_configuration/03_lint.md:87
msgid "re_forbidden_package"
msgstr "re_forbidden_package"

#: src/06_development_environment/01_project_configuration/03_lint.md:87
msgid "regex forbidden of `package`"
msgstr "`package` の禁止正規表現"

#: src/06_development_environment/01_project_configuration/03_lint.md:88
msgid "re_forbidden_parameter"
msgstr "re_forbidden_parameter"

#: src/06_development_environment/01_project_configuration/03_lint.md:88
msgid "regex forbidden of `parameter`"
msgstr "`parameter` の禁止正規表現"

#: src/06_development_environment/01_project_configuration/03_lint.md:89
msgid "re_forbidden_port_inout"
msgstr "re_forbidden_port_inout"

#: src/06_development_environment/01_project_configuration/03_lint.md:89
msgid "regex forbidden of `inout` port"
msgstr "`inout` ポートの禁止正規表現"

#: src/06_development_environment/01_project_configuration/03_lint.md:90
msgid "re_forbidden_port_input"
msgstr "re_forbidden_port_input"

#: src/06_development_environment/01_project_configuration/03_lint.md:90
msgid "regex forbidden of `input` port"
msgstr "`input` ポートの禁止正規表現"

#: src/06_development_environment/01_project_configuration/03_lint.md:91
msgid "re_forbidden_port_modport"
msgstr "re_forbidden_port_modport"

#: src/06_development_environment/01_project_configuration/03_lint.md:91
msgid "regex forbidden of `modport` port"
msgstr "`modport` ポートの禁止正規表現"

#: src/06_development_environment/01_project_configuration/03_lint.md:92
msgid "re_forbidden_port_output"
msgstr "re_forbidden_port_output"

#: src/06_development_environment/01_project_configuration/03_lint.md:92
msgid "regex forbidden of `output` port"
msgstr "`output` ポートの禁止正規表現"

#: src/06_development_environment/01_project_configuration/03_lint.md:93
msgid "re_forbidden_reg"
msgstr "re_forbidden_reg"

#: src/06_development_environment/01_project_configuration/03_lint.md:93
msgid "regex forbidden of register type variable[^reg]"
msgstr "レジスタ変数[^reg]の禁止正規表現"

#: src/06_development_environment/01_project_configuration/03_lint.md:94
msgid "re_forbidden_struct"
msgstr "re_forbidden_struct"

#: src/06_development_environment/01_project_configuration/03_lint.md:94
msgid "regex forbidden of `struct`"
msgstr "`struct` の禁止正規表現"

#: src/06_development_environment/01_project_configuration/03_lint.md:95
msgid "re_forbidden_union"
msgstr "re_forbidden_union"

#: src/06_development_environment/01_project_configuration/03_lint.md:95
msgid "regex forbidden of `union`"
msgstr "`union` の禁止正規表現"

#: src/06_development_environment/01_project_configuration/03_lint.md:96
msgid "re_forbidden_var"
msgstr "re_forbidden_var"

#: src/06_development_environment/01_project_configuration/03_lint.md:96
msgid "regex forbidden of variable"
msgstr "変数の禁止正規表現"

#: src/06_development_environment/01_project_configuration/03_lint.md:97
msgid "re_forbidden_wire"
msgstr "re_forbidden_wire"

#: src/06_development_environment/01_project_configuration/03_lint.md:97
msgid "regex forbidden of wire type variable[^wire]"
msgstr "ワイヤ変数[^wire]の禁止正規表現"

#: src/06_development_environment/01_project_configuration/03_lint.md:98
msgid "re_required_enum"
msgstr "re_required_enum"

#: src/06_development_environment/01_project_configuration/03_lint.md:98
msgid "regex required of `enum`"
msgstr "`enum` の必須正規表現"

#: src/06_development_environment/01_project_configuration/03_lint.md:99
msgid "re_required_function"
msgstr "re_required_function"

#: src/06_development_environment/01_project_configuration/03_lint.md:99
msgid "regex required of `function`"
msgstr "`function` の必須正規表現"

#: src/06_development_environment/01_project_configuration/03_lint.md:100
msgid "re_required_function_inout"
msgstr "re_required_function_inout"

#: src/06_development_environment/01_project_configuration/03_lint.md:100
msgid "regex required of `inout` argument"
msgstr "`inout` 引数の必須正規表現"

#: src/06_development_environment/01_project_configuration/03_lint.md:101
msgid "re_required_function_input"
msgstr "re_required_function_input"

#: src/06_development_environment/01_project_configuration/03_lint.md:101
msgid "regex required of `input` argument"
msgstr "`input` 引数の必須正規表現"

#: src/06_development_environment/01_project_configuration/03_lint.md:102
msgid "re_required_function_output"
msgstr "re_required_function_output"

#: src/06_development_environment/01_project_configuration/03_lint.md:102
msgid "regex required of `output` argument"
msgstr "`output` 引数の必須正規表現"

#: src/06_development_environment/01_project_configuration/03_lint.md:103
msgid "re_required_instance"
msgstr "re_required_instance"

#: src/06_development_environment/01_project_configuration/03_lint.md:103
msgid "regex required of instance"
msgstr "インスタンスの必須正規表現"

#: src/06_development_environment/01_project_configuration/03_lint.md:104
msgid "re_required_interface"
msgstr "re_required_interface"

#: src/06_development_environment/01_project_configuration/03_lint.md:104
msgid "regex required of `interface`"
msgstr "`interface` の必須正規表現"

#: src/06_development_environment/01_project_configuration/03_lint.md:105
msgid "re_required_modport"
msgstr "re_required_modport"

#: src/06_development_environment/01_project_configuration/03_lint.md:105
msgid "regex required of `modport`"
msgstr "`modport` の必須正規表現"

#: src/06_development_environment/01_project_configuration/03_lint.md:106
msgid "re_required_module"
msgstr "re_required_module"

#: src/06_development_environment/01_project_configuration/03_lint.md:106
msgid "regex required of `module`"
msgstr "`module` の必須正規表現"

#: src/06_development_environment/01_project_configuration/03_lint.md:107
msgid "re_required_package"
msgstr "re_required_package"

#: src/06_development_environment/01_project_configuration/03_lint.md:107
msgid "regex required of `package`"
msgstr "`package` の必須正規表現"

#: src/06_development_environment/01_project_configuration/03_lint.md:108
msgid "re_required_parameter"
msgstr "re_required_parameter"

#: src/06_development_environment/01_project_configuration/03_lint.md:108
msgid "regex required of `parameter`"
msgstr "`parameter` の必須正規表現"

#: src/06_development_environment/01_project_configuration/03_lint.md:109
msgid "re_required_port_inout"
msgstr "re_required_port_inout"

#: src/06_development_environment/01_project_configuration/03_lint.md:109
msgid "regex required of `inout` port"
msgstr "`inout` ポートの必須正規表現"

#: src/06_development_environment/01_project_configuration/03_lint.md:110
msgid "re_required_port_input"
msgstr "re_required_port_input"

#: src/06_development_environment/01_project_configuration/03_lint.md:110
msgid "regex required of `input` port"
msgstr "`input` ポートの必須正規表現"

#: src/06_development_environment/01_project_configuration/03_lint.md:111
msgid "re_required_port_modport"
msgstr "re_required_port_modport"

#: src/06_development_environment/01_project_configuration/03_lint.md:111
msgid "regex required of `modport` port"
msgstr "`modport` ポートの必須正規表現"

#: src/06_development_environment/01_project_configuration/03_lint.md:112
msgid "re_required_port_output"
msgstr "re_required_port_output"

#: src/06_development_environment/01_project_configuration/03_lint.md:112
msgid "regex required of `output` port"
msgstr "`output` ポートの必須正規表現"

#: src/06_development_environment/01_project_configuration/03_lint.md:113
msgid "re_required_reg"
msgstr "re_required_reg"

#: src/06_development_environment/01_project_configuration/03_lint.md:113
msgid "regex required of register type variable[^reg]"
msgstr "レジスタ変数[^reg]の必須正規表現"

#: src/06_development_environment/01_project_configuration/03_lint.md:114
msgid "re_required_struct"
msgstr "re_required_struct"

#: src/06_development_environment/01_project_configuration/03_lint.md:114
msgid "regex required of `struct`"
msgstr "`struct` の必須正規表現"

#: src/06_development_environment/01_project_configuration/03_lint.md:115
msgid "re_required_union"
msgstr "re_required_union"

#: src/06_development_environment/01_project_configuration/03_lint.md:115
msgid "regex required of `union`"
msgstr "`union` の必須正規表現"

#: src/06_development_environment/01_project_configuration/03_lint.md:116
msgid "re_required_var"
msgstr "re_required_var"

#: src/06_development_environment/01_project_configuration/03_lint.md:116
msgid "regex required of variable"
msgstr "変数の必須正規表現"

#: src/06_development_environment/01_project_configuration/03_lint.md:117
msgid "re_required_wire"
msgstr "re_required_wire"

#: src/06_development_environment/01_project_configuration/03_lint.md:117
msgid "regex required of wire type variable[^wire]"
msgstr "ワイヤ変数[^wire]の必須正規表現"

#: src/06_development_environment/01_project_configuration/03_lint.md:119
msgid "The available values are"
msgstr "設定可能な値は以下です。"

#: src/06_development_environment/01_project_configuration/03_lint.md:121
msgid "`\"snake\"` -- snake_case"
msgstr "`\"snake\"` -- snake_case"

#: src/06_development_environment/01_project_configuration/03_lint.md:122
msgid "`\"screaming_snake\"` -- SCREAMING_SNAKE_CASE"
msgstr "`\"screaming_snake\"` -- SCREAMING_SNAKE_CASE"

#: src/06_development_environment/01_project_configuration/03_lint.md:123
msgid "`\"lower_camel\"` -- lowerCamelCase"
msgstr "`\"lower_camel\"` -- lowerCamelCase"

#: src/06_development_environment/01_project_configuration/03_lint.md:124
msgid "`\"upper_camel\"` -- UpperCamelCase"
msgstr "`\"upper_camel\"` -- UpperCamelCase"

#: src/06_development_environment/01_project_configuration/03_lint.md:126
msgid ""
"Regular expression string like `\".*\"`. The available syntax is [here]"
"(https://docs.rs/regex/latest/regex/#syntax)."
msgstr ""
"`\".*\"`のような正規表現です。使用可能な構文は[こちら](https://docs.rs/regex/"
"latest/regex/#syntax)."

#: src/06_development_environment/01_project_configuration/03_lint.md:128
msgid ""
"Register type means that the variable is assigned in `always_ff`. It will be "
"mapped to flip-flop in synthesis phase."
msgstr ""
"レジスタ変数とは `always_ff` で代入される変数です。合成フェーズでフリップフ"
"ロップにマップされます。"

#: src/06_development_environment/01_project_configuration/03_lint.md:130
msgid ""
"Wire type means that the variable is assigned in `always_comb`. It will be "
"mapped to wire in synthesis phase."
msgstr ""
"ワイヤ変数とは `always_comb` で代入される変数です。合成フェーズでワイヤにマッ"
"プされます。"

#: src/06_development_environment/01_project_configuration/04_test.md:3
msgid ""
"`[test]` section specifies the configuration for integrated unit test like "
"below:"
msgstr ""
"`[test]` セクションは以下のように組み込みユニットテストの設定を指定します。"

#: src/06_development_environment/01_project_configuration/04_test.md:5
msgid ""
"```toml\n"
"[test]\n"
"simulator = \"vcs\"\n"
"```"
msgstr ""
"```toml\n"
"[test]\n"
"simulator = \"vcs\"\n"
"```"

#: src/06_development_environment/01_project_configuration/04_test.md:14
msgid "The `simulator` field"
msgstr "`simulator` フィールド"

#: src/06_development_environment/01_project_configuration/04_test.md:16
msgid ""
"The `simulator` field specifies default simulator. The available types are "
"below:"
msgstr ""
"`simulator` フィールドはデフォルトのシミュレータを指定します。以下のタイプを"
"指定できます。"

#: src/06_development_environment/01_project_configuration/04_test.md:19
msgid "`\"verilator\"`"
msgstr "`\"verilator\"`"

#: src/06_development_environment/01_project_configuration/04_test.md:20
msgid "`\"vcs\"`"
msgstr "`\"vcs\"`"

#: src/06_development_environment/01_project_configuration/04_test.md:21
msgid "`\"vivado\"`"
msgstr "`\"vivado\"`"

#: src/06_development_environment/01_project_configuration/04_test.md:23
msgid "The `include_files` field"
msgstr "`include_files` フィールド"

#: src/06_development_environment/01_project_configuration/04_test.md:25
msgid "The `include_files` field specifies extra files used for simulation."
msgstr ""
"`include_files` フィールドはシミュレーションに使う追加のファイルを指定しま"
"す。"

#: src/06_development_environment/01_project_configuration/04_test.md:27
msgid ""
"```toml\n"
"[test]\n"
"include_files = [\"test/mem.hex\"]\n"
"```"
msgstr ""
"```toml\n"
"[test]\n"
"include_files = [\"test/mem.hex\"]\n"
"```"

#: src/06_development_environment/01_project_configuration/04_test.md:32
msgid "The `waveform_target` field"
msgstr "`waveform_target` フィールド"

#: src/06_development_environment/01_project_configuration/04_test.md:34
msgid ""
"The `waveform_target` field specifies where the generated waveforms will be "
"placed at. The available types are below:"
msgstr "`waveform_target` フィールドは波形の生成先を指定します。"

#: src/06_development_environment/01_project_configuration/04_test.md:42
msgid ""
"```toml\n"
"[test]\n"
"waveform_target = {type = \"directory\", path = \"[dst dir]\"}\n"
"```"
msgstr ""
"```toml\n"
"[test]\n"
"waveform_target = {type = \"directory\", path = \"[dst dir]\"}\n"
"```"

#: src/06_development_environment/01_project_configuration/04_test.md:47
msgid "The `waveform_format` field"
msgstr "`waveform_format` フィールド"

#: src/06_development_environment/01_project_configuration/04_test.md:49
msgid ""
"The `waveform_format` field specifies in which format the waveform will be "
"dumped. The available formats are:"
msgstr ""
"`waveform_format` フィールドはダンプされる波形のフォーマットを指定します。指"
"定できる値は以下の通りです。"

#: src/06_development_environment/01_project_configuration/04_test.md:52
msgid ""
"`vcd` -- The default value and most readable format across all vendors. But "
"also not very feature rich"
msgstr ""
"`vcd` -- デフォルト値であり、多くのベンダーでサポートされていますが機能は限定"
"的です。"

#: src/06_development_environment/01_project_configuration/04_test.md:53
msgid ""
"`fst` -- This format has some more features, e.g. printing enum values "
"instead of integers. `gtkwave` and `surfer` can read this format."
msgstr ""
"`fst` -- 整数の代わりにenum値を表示するなどいくつかの機能をサポートしていま"
"す。`gtkwave` と `surfer` で扱うことができます。"

#: src/06_development_environment/01_project_configuration/04_test.md:55
msgid "The `[test.verilator]` section"
msgstr "`[test.verilator]` セクション"

#: src/06_development_environment/01_project_configuration/04_test.md:57
msgid "This section contains configurations of test by Verilator."
msgstr "このセクションはVerilatorによるテストの設定です。"

#: src/06_development_environment/01_project_configuration/04_test.md:61
#: src/06_development_environment/01_project_configuration/04_test.md:70
#: src/06_development_environment/01_project_configuration/04_test.md:79
msgid "compile_args"
msgstr "compile_args"

#: src/06_development_environment/01_project_configuration/04_test.md:61
#: src/06_development_environment/01_project_configuration/04_test.md:62
#: src/06_development_environment/01_project_configuration/04_test.md:70
#: src/06_development_environment/01_project_configuration/04_test.md:71
#: src/06_development_environment/01_project_configuration/04_test.md:79
#: src/06_development_environment/01_project_configuration/04_test.md:80
#: src/06_development_environment/01_project_configuration/04_test.md:81
msgid "\\[string\\]"
msgstr "\\[文字列\\]"

#: src/06_development_environment/01_project_configuration/04_test.md:61
msgid "additional arguments to `verilator` command"
msgstr "`verilator` コマンドへの追加の引数"

#: src/06_development_environment/01_project_configuration/04_test.md:62
#: src/06_development_environment/01_project_configuration/04_test.md:71
#: src/06_development_environment/01_project_configuration/04_test.md:81
msgid "simulate_args"
msgstr "simulate_args"

#: src/06_development_environment/01_project_configuration/04_test.md:62
#: src/06_development_environment/01_project_configuration/04_test.md:71
msgid "additional arguments to simulation binary"
msgstr "シミュレーションバイナリへの追加の引数"

#: src/06_development_environment/01_project_configuration/04_test.md:64
msgid "The `[test.vcs]` section"
msgstr "`[test.vcs]` セクション"

#: src/06_development_environment/01_project_configuration/04_test.md:66
msgid "This section contains configurations of test by VCS."
msgstr "このセクションはVCSによるテストの設定です。"

#: src/06_development_environment/01_project_configuration/04_test.md:70
msgid "additional arguments to `vcs` command"
msgstr "`vcs` コマンドへの追加の引数"

#: src/06_development_environment/01_project_configuration/04_test.md:73
msgid "The `[test.vivado]` section"
msgstr "`[test.vivado]` セクション"

#: src/06_development_environment/01_project_configuration/04_test.md:75
msgid "This section contains configurations of test by Vivado."
msgstr "このセクションはVivadoによるテストの設定です。"

#: src/06_development_environment/01_project_configuration/04_test.md:79
msgid "additional arguments to `xvlog` command"
msgstr "`xvlog` コマンドへの追加の引数"

#: src/06_development_environment/01_project_configuration/04_test.md:80
msgid "elaborate_args"
msgstr "elaborate_args"

#: src/06_development_environment/01_project_configuration/04_test.md:80
msgid "additional arguments to `xelab` command"
msgstr "`xelab` コマンドへの追加の引数"

#: src/06_development_environment/01_project_configuration/04_test.md:81
msgid "additional arguments to `xsim` command"
msgstr "`xsim` コマンドへの追加の引数"

#: src/06_development_environment/01_project_configuration/05_publish.md:3
msgid ""
"`[publish]` section specifies the configuration for publishing a project "
"like below:"
msgstr ""
"`[publish]` セクションは以下のようにプロジェクト公開の設定を指定します。"

#: src/06_development_environment/01_project_configuration/05_publish.md:5
msgid ""
"```toml\n"
"[publish]\n"
"bump_commit = true\n"
"bump_commit_message = \"Bump\"\n"
"```"
msgstr ""
"```toml\n"
"[publish]\n"
"bump_commit = true\n"
"bump_commit_message = \"Bump\"\n"
"```"

#: src/06_development_environment/01_project_configuration/05_publish.md:13
#: src/06_development_environment/08_language_server.md:9
#: src/06_development_environment/10_documentation.md:59
msgid "Default"
msgstr "デフォルト"

#: src/06_development_environment/01_project_configuration/05_publish.md:15
msgid "bump_commit"
msgstr "bump_commit"

#: src/06_development_environment/01_project_configuration/05_publish.md:15
#: src/06_development_environment/01_project_configuration/05_publish.md:16
#: src/06_development_environment/08_language_server.md:11
msgid "boolean"
msgstr "ブーリアン"

#: src/06_development_environment/01_project_configuration/05_publish.md:15
#: src/06_development_environment/01_project_configuration/05_publish.md:16
#: src/06_development_environment/08_language_server.md:11
msgid "false"
msgstr "false"

#: src/06_development_environment/01_project_configuration/05_publish.md:15
msgid "automatic commit after bump"
msgstr "バージョンアップ後の自動コミット"

#: src/06_development_environment/01_project_configuration/05_publish.md:16
msgid "publish_commit"
msgstr "publish_commit"

#: src/06_development_environment/01_project_configuration/05_publish.md:16
msgid "automatic commit after publish"
msgstr "公開後の自動コミット"

#: src/06_development_environment/01_project_configuration/05_publish.md:17
msgid "bump_commit_mesasge"
msgstr "bump_commit_mesasge"

#: src/06_development_environment/01_project_configuration/05_publish.md:17
msgid "\"chore: Bump version\""
msgstr "\"chore: Bump version\""

#: src/06_development_environment/01_project_configuration/05_publish.md:17
msgid "commit message after bump"
msgstr "バージョンアップ後のコミットメッセージ"

#: src/06_development_environment/01_project_configuration/05_publish.md:18
msgid "publish_commit_mesasge"
msgstr "publish_commit_mesasge"

#: src/06_development_environment/01_project_configuration/05_publish.md:18
msgid "\"chore: Publish\""
msgstr "\"chore: Publish\""

#: src/06_development_environment/01_project_configuration/05_publish.md:18
msgid "commit message after publish"
msgstr "公開後のコミットメッセージ"

#: src/06_development_environment/02_dependencies.md:3
msgid ""
"If you want to add other Veryl projects to dependencies of your project, you "
"can add them to `[dependencies]` section in `Veryl.toml`. The left hand side "
"of entry is the project name of the dependency, and the right hand side is "
"the source and version. `github` is a syntax sugger to refer a repository on "
"GitHub. Instead of it, `git` with a full URL can be used."
msgstr ""
"他の Veryl プロジェクトへの依存関係をプロジェクトに追加したい場合、`Veryl."
"toml` に `[dependencies]` セクションを追加します。エントリの左辺は依存関係の"
"プロジェクト名、右辺はソースパスとバージョンです。`github` はGitHub上のリポジ"
"トリを参照する糖衣構文です。代わりに `git` を用いてURL全体を指定することもで"
"きます。"

#: src/06_development_environment/02_dependencies.md:7
msgid ""
"```toml\n"
"[dependencies]\n"
"veryl_sample = {github = \"veryl-lang/veryl_sample\", version = \"0.1.0\"}\n"
"\n"
"# This is as the same as above\n"
"veryl_sample = {git = \"https://github.com/veryl-lang/veryl_sample\", "
"version = \"0.1.0\"}\n"
"```"
msgstr ""
"```toml\n"
"[dependencies]\n"
"veryl_sample = {github = \"veryl-lang/veryl_sample\", version = \"0.1.0\"}\n"
"\n"
"# これは上記と同じ\n"
"veryl_sample = {git = \"https://github.com/veryl-lang/veryl_sample\", "
"version = \"0.1.0\"}\n"
"```"

#: src/06_development_environment/02_dependencies.md:15
msgid ""
"By default, the namespace of the dependency is the same as the project name "
"of the dependency. If you want to specify a namespace through the left hand "
"side, you should specify the project name through `project` field."
msgstr ""
"デフォルトでは依存関係の名前空間はそのプロジェクト名と同じです。もし左辺の名"
"前を変更した場合は、`project` フィールドでプロジェクト名を指定する必要があり"
"ます。"

#: src/06_development_environment/02_dependencies.md:18
msgid ""
"```toml\n"
"[dependencies]\n"
"veryl_sample_alt = {github = \"veryl-lang/veryl_sample\", project = "
"\"veryl_sample\", version = \"0.2.0\"}\n"
"```"
msgstr ""
"```toml\n"
"[dependencies]\n"
"veryl_sample_alt = {github = \"veryl-lang/veryl_sample\", project = "
"\"veryl_sample\", version = \"0.2.0\"}\n"
"```"

#: src/06_development_environment/02_dependencies.md:23
msgid "Inner projects in a repository can be used like below:"
msgstr "リポジトリの内部プロジェクトは以下のように指定できます。"

#: src/06_development_environment/02_dependencies.md:25
msgid ""
"```toml\n"
"[dependencies]\n"
"inner_prj1 = {github = \"veryl-lang/veryl_sample\", version = \"0.1.0\"}\n"
"inner_prj2 = {github = \"veryl-lang/veryl_sample\", version = \"0.1.0\"}\n"
"inner_prj3 = {github = \"veryl-lang/veryl_sample\", version = \"0.1.0\"}\n"
"```"
msgstr ""
"```toml\n"
"[dependencies]\n"
"inner_prj1 = {github = \"veryl-lang/veryl_sample\", version = \"0.1.0\"}\n"
"inner_prj2 = {github = \"veryl-lang/veryl_sample\", version = \"0.1.0\"}\n"
"inner_prj3 = {github = \"veryl-lang/veryl_sample\", version = \"0.1.0\"}\n"
"```"

#: src/06_development_environment/02_dependencies.md:32
msgid "Usage of dependency"
msgstr "依存関係の使用"

#: src/06_development_environment/02_dependencies.md:34
msgid ""
"After adding dependencies to `Veryl.toml`, you can use `module`, `interface` "
"and `package` in the dependencies. The following example uses `delay` module "
"in the `veryl_sample` dependency."
msgstr ""
"`Veryl.toml` に依存関係を追加したあとは、その依存関係の `module`、"
"`interface`、`package`を使うことができます。以下は `veryl_sample` の依存関係"
"に含まれる `delay` モジュールを使った例です。"

#: src/06_development_environment/02_dependencies.md:53
msgid ""
"Note: The result of play button in the above code is not exact because it "
"doesn't use dependency resolution. Actually the module name becomes "
"`veryl_sample_delay`"
msgstr ""
"注：上記のコードのプレイボタンの結果は依存関係解決を行わないので正確ではあり"
"ません。実際のモジュール名は `veryl_sample_delay` になります。"

#: src/06_development_environment/02_dependencies.md:56
msgid "Version Requirement"
msgstr "バージョン要求"

#: src/06_development_environment/02_dependencies.md:58
msgid ""
"The `version` field of `[dependencies]` section shows version requirement. "
"For example, `version = \"0.1.0\"` means the latest version which has "
"compatibility with `0.1.0`. The compatibility is judged by [Semantic "
"Versioning](https://semver.org/). A version is constructed from the "
"following three parts."
msgstr ""
"`[dependencies]` セクションの `version` フィールドはバージョン要求を示しま"
"す。例えば、`version = \"0.1.0\"` は `0.1.0` と互換性のある最新バージョンを意"
"味します。互換性は[セマンティックバージョニング](https://semver.org/)で判定さ"
"れます。バージョンは以下の3つの部分からなります。"

#: src/06_development_environment/02_dependencies.md:63
msgid "`MAJOR` version when you make incompatible API changes"
msgstr "`メジャー` バージョンはAPI非互換な変更"

#: src/06_development_environment/02_dependencies.md:64
msgid ""
"`MINOR` version when you add functionality in a backwards compatible manner"
msgstr "`マイナー` バージョンは互換性のある機能追加"

#: src/06_development_environment/02_dependencies.md:65
msgid "`PATCH` version when you make backwards compatible bug fixes"
msgstr "`パッチ` バージョンは互換性のあるバグ修正"

#: src/06_development_environment/02_dependencies.md:67
msgid ""
"If `MAJOR` version is `0`, `MINOR` is interpreted as incompatible changes."
msgstr ""
"もし `メジャー` バージョンが `0` なら、`マイナー` が非互換変更と解釈されま"
"す。"

#: src/06_development_environment/02_dependencies.md:69
msgid ""
"If there are `0.1.0` and `0.1.1` and `0.2.0`, `0.1.1` will be selected. This "
"is because"
msgstr ""
"バージョン `0.1.0`、`0.1.1`、`0.2.0`があった場合、`0.1.1` が選択されます。こ"
"れは以下のように決定されます。"

#: src/06_development_environment/02_dependencies.md:72
msgid "`0.1.0` is compatible with `0.1.0`."
msgstr "`0.1.0` は `0.1.0` と互換性がある"

#: src/06_development_environment/02_dependencies.md:73
msgid "`0.1.1` is compatible with `0.1.0`."
msgstr "`0.1.1` は `0.1.0` と互換性がある"

#: src/06_development_environment/02_dependencies.md:74
msgid "`0.2.0` is not compatible with `0.1.0`."
msgstr "`0.2.0` は `0.1.0` と互換性がない"

#: src/06_development_environment/02_dependencies.md:75
msgid "`0.1.1` is the latest in the compatible versions."
msgstr "`0.1.1` は互換性のある最新バージョン"

#: src/06_development_environment/02_dependencies.md:77
msgid ""
"The `version` field allows other version requirement representation like "
"`=0.1.0`. Please see version requirement of Rust for detailed information: "
"[Specifying Dependencies](https://doc.rust-lang.org/cargo/reference/"
"specifying-dependencies.html#specifying-dependencies-from-cratesio)."
msgstr ""
"`version` フィールドは `=0.1.0` のような指定も可能です。詳細は Rust のバー"
"ジョン要求についてのドキュメントを参照してください。[Specifying Dependencies]"
"(https://doc.rust-lang.org/cargo/reference/specifying-dependencies."
"html#specifying-dependencies-from-cratesio)."

#: src/06_development_environment/02_dependencies.md:80
msgid "Relative path dependency"
msgstr "相対パス依存関係"

#: src/06_development_environment/02_dependencies.md:82
msgid ""
"For local development, dependency to a local file path is useful in some "
"cases. Relative path dependency can be specified like below:"
msgstr ""
"手元の環境で開発しているとき、ローカルファイルパスへの依存関係が使えると便利"
"なことがあります。相対パス依存関係は以下のように指定することができます。"

#: src/06_development_environment/02_dependencies.md:85
msgid ""
"```toml\n"
"[dependencies]\n"
"veryl_sample = {path = \"../../veryl_sample\"}\n"
"```"
msgstr ""
"```toml\n"
"[dependencies]\n"
"veryl_sample = {path = \"../../veryl_sample\"}\n"
"```"

#: src/06_development_environment/02_dependencies.md:90
msgid ""
"If there are relative path dependencies in a project, the project can't be "
"published through `veryl publish`."
msgstr ""
"プロジェクトに相対パス依存関係がある場合、そのプロジェクトは `veryl publish` "
"で公開することはできません。"

#: src/06_development_environment/02_dependencies.md:92
msgid "Override by local path"
msgstr "ローカルパスによる上書き"

#: src/06_development_environment/02_dependencies.md:94
msgid ""
"Sometimes, using dependencies of locally modified version becomes necessary. "
"In the case, overriding dependencies by local path can be used like below:"
msgstr ""
"場合によってはローカルで変更されたバージョンの依存関係を使う必要があることも"
"あります。そのような場合、以下のようにローカルパスによって依存関係を上書きす"
"ることができます。"

#: src/06_development_environment/02_dependencies.md:97
msgid ""
"```toml\n"
"[dependencies]\n"
"veryl_sample = {github = \"veryl-lang/veryl_sample\", version = \"0.1.0\", "
"path = \"../veryl_sample\"}\n"
"```"
msgstr ""
"```toml\n"
"[dependencies]\n"
"veryl_sample = {github = \"veryl-lang/veryl_sample\", version = \"0.1.0\", "
"path = \"../veryl_sample\"}\n"
"```"

#: src/06_development_environment/02_dependencies.md:102
msgid ""
"This means that if there is `../veryl_sample`, it is used, and if not, it is "
"pulled from the Git repository."
msgstr ""
"これは `../veryl_sample` が存在する場合はそれを使い、そうでない場合は Git か"
"ら取得する、という意味です。"

#: src/06_development_environment/03_publish_project.md:3
msgid ""
"To publish your project, `veryl publish` can be used. Publising means to "
"associate a version with a git revision."
msgstr ""
"プロジェクトを公開するには `veryl publish` コマンドを使います。公開とはバー"
"ジョン番号とgitのリビジョンを紐づけることです。"

#: src/06_development_environment/03_publish_project.md:12
msgid ""
"`veryl publish` generates `Veryl.pub` which contains published version "
"information like below."
msgstr ""
"`veryl publish` は以下のように公開されたバージョンの情報を含んだ `Veryl.pub` "
"というファイルを生成します。"

#: src/06_development_environment/03_publish_project.md:14
msgid ""
"```toml\n"
"[[releases]]\n"
"version = \"0.2.1\"\n"
"revision = \"297bc6b24c5ceca9e648c3ea5e01011c67d7efe7\"\n"
"```"
msgstr ""
"```toml\n"
"[[releases]]\n"
"version = \"0.2.1\"\n"
"revision = \"297bc6b24c5ceca9e648c3ea5e01011c67d7efe7\"\n"
"```"

#: src/06_development_environment/03_publish_project.md:20
msgid ""
"After generating `Veryl.pub`, publishing sequence is completed by git add, "
"commit and push. The git branch to be committed must be the default branch "
"because Veryl search `Veryl.pub` in the default branch."
msgstr ""
"`Veryl.pub` と生成した後、gitのadd、commit、pushを行えば公開手続きは完了で"
"す。gitブランチはデフォルトブランチでなければなりません。これは Veryl が "
"`Veryl.pub` をデフォルトブランチから探すためです。"

#: src/06_development_environment/03_publish_project.md:23
msgid ""
"```\n"
"$ git add Veryl.pub\n"
"$ git commit -m \"Publish\"\n"
"$ git push\n"
"```"
msgstr ""
"```\n"
"$ git add Veryl.pub\n"
"$ git commit -m \"Publish\"\n"
"$ git push\n"
"```"

#: src/06_development_environment/03_publish_project.md:29
msgid ""
"If you enable automatic commit by `publish_commit` in `[publish]` section of "
"`Veryl.toml`, git add and commit will be executed after publish."
msgstr ""
"`Veryl.toml` の `[publish]` セクションに `publish_commit` を設定して自動コ"
"ミットを有効にすれば、gitのaddとcommitが自動で実行されます。"

#: src/06_development_environment/03_publish_project.md:38
msgid "Version Bump"
msgstr "バージョンを上げる"

#: src/06_development_environment/03_publish_project.md:40
msgid ""
"You can bump version with publish at the same time by `--bump` option. As "
"the same as publish, `bump_commit` in `[publish]` section of `Veryl.toml` "
"can specify automatic commit after bump version."
msgstr ""
"`--bump` オプションを使うと公開と同時にバージョンを上げることもできます。公開"
"と同様に、`Veryl.toml` の`[publish]` セクションに `bump_commit` を設定すれば"
"自動でcommitされます。"

#: src/06_development_environment/03_publish_project.md:55
msgid ""
"The available configurations are [here]"
"(./01_project_configuration/05_publish.md)."
msgstr "全設定の説明は[こちら](./01_project_configuration/05_publish.md)。"

#: src/06_development_environment/04_directory_layout.md:3
msgid ""
"Veryl supports arbitrary directory layout. This is because the optimal "
"directory layout for an independent project and an integrated project within "
"other projects is different."
msgstr ""
"Veryl は任意のディレクトリ構成をサポートしています。これは独立したプロジェク"
"トと他のプロジェクトに組み込まれたプロジェクトでは最適なディレクトリ構成が異"
"なるためです。"

#: src/06_development_environment/04_directory_layout.md:6
msgid "In this section, we suggest some directory layout patterns."
msgstr "この節ではいくつかのディレクトリ構成パターンを示します。"

#: src/06_development_environment/04_directory_layout.md:8
msgid "Single source directory"
msgstr "単一のソースディレクトリ"

#: src/06_development_environment/04_directory_layout.md:10
msgid ""
"This pattern contains all sources in `src` directory. In `src`, you can "
"configure arbitrary sub directories."
msgstr ""
"このパターンでは全てのソースコードは `src` ディレクトリに配置されます。`src` "
"以下のサブディレクトリの構成は自由です。"

#: src/06_development_environment/04_directory_layout.md:26
msgid ""
"Veryl gathers all `*.veryl` files and generates codes at the same directory "
"as the source by default. You can show the behavior explicitly by the "
"following configuration."
msgstr ""
"Veryl は全ての `*.veryl` ファイルを収集し、デフォルトではソースと同じディレク"
"トリにコードを生成します。この挙動は以下の設定で明示することもできます。"

#: src/06_development_environment/04_directory_layout.md:29
msgid ""
"```toml\n"
"[build]\n"
"target = \"source\"\n"
"```"
msgstr ""
"```toml\n"
"[build]\n"
"target = \"source\"\n"
"```"

#: src/06_development_environment/04_directory_layout.md:34
msgid "After `veryl build`, the directory structure will become below:"
msgstr "`veryl build` を実行するとディレクトリ構成は以下のようになります。"

#: src/06_development_environment/04_directory_layout.md:54
msgid "Single source and target directory"
msgstr "単一のソースとターゲットディレクトリ"

#: src/06_development_environment/04_directory_layout.md:56
msgid ""
"If you want to place the generated codes into a directory, you can use "
"`target` configure in `[build]` section of `Veryl.toml`."
msgstr ""
"生成されたコードを1つのディレクトリに入れたい場合、`Veryl.toml` の `[build]` "
"セクションで `target` を以下のように設定します。"

#: src/06_development_environment/04_directory_layout.md:58
msgid ""
"```toml\n"
"[build]\n"
"target = {type = \"directory\", path = \"target\"}\n"
"```"
msgstr ""
"```toml\n"
"[build]\n"
"target = {type = \"directory\", path = \"target\"}\n"
"```"

#: src/06_development_environment/04_directory_layout.md:63
msgid "The directory layout of this configure will become below:"
msgstr "ディレクトリ構成は以下のようになります。"

#: src/06_development_environment/04_directory_layout.md:84
msgid "Multi source directory"
msgstr "マルチソースディレクトリ"

#: src/06_development_environment/04_directory_layout.md:86
msgid ""
"If you want to add a veryl project to the existing SystemVerilog project, "
"you can choose the following structure."
msgstr ""
"既存の SystemVerilog プロジェクトに Veryl のプロジェクトを組み込む場合、以下"
"のような構成にすることもできます。"

#: src/06_development_environment/04_directory_layout.md:110
msgid ""
"The generated `prj.f` lists all generated files. So you can use it along "
"with the existing SystemVerilog filelists."
msgstr ""
"生成された `prj.f` は生成されたソースコードを全てリストアップしているので、既"
"存の SystemVerilog ファイルリストと一緒に使うことができます。"

#: src/06_development_environment/04_directory_layout.md:112
msgid "About `.gitignore`"
msgstr "`.gitignore` について"

#: src/06_development_environment/04_directory_layout.md:114
msgid ""
"Veryl provides the following `.gitignore` as the default value. `.build` is "
"used to record build information by Veryl compiler."
msgstr ""
"Verylは以下の `.gitignore` をデフォルト値として提供します。`.build` ディレク"
"トリはVerylコンパイラがビルド情報を記録するために使用します。"

#: src/06_development_environment/04_directory_layout.md:121
msgid ""
"Other patterns can be added by each projects. The candidates of `.gitignore` "
"is below:"
msgstr ""
"それ以外のパターンはプロジェクトに合わせて追加できます。`.gitignore` の候補と"
"しては以下が考えられます。"

#: src/06_development_environment/04_directory_layout.md:124
msgid "`dependencies/`"
msgstr "`dependencies/`"

#: src/06_development_environment/04_directory_layout.md:125
msgid "`target/`"
msgstr "`target/`"

#: src/06_development_environment/04_directory_layout.md:126
msgid "`*.sv`"
msgstr "`*.sv`"

#: src/06_development_environment/04_directory_layout.md:127
msgid "`*.f`"
msgstr "`*.f`"

#: src/06_development_environment/05_formatter.md:3
msgid ""
"Source code can be formatted by `veryl fmt` command. Alternatively, language "
"server support formatting through `textDocument/formatting` request."
msgstr ""
"`veryl fmt` コマンドでソースコードをフォーマットできます。あるいは言語サーバ"
"の `textDocument/formatting` 要求によるフォーマットにも対応しています。"

#: src/06_development_environment/05_formatter.md:6
msgid ""
"The available configurations are [here](./01_project_configuration/02_format."
"md)."
msgstr "全設定の説明は[こちら](./01_project_configuration/02_format.md)。"

#: src/06_development_environment/06_linter.md:3
msgid ""
"Lint check is executed at `veryl check` or `veryl build`. Alternatively, "
"language server checks lint in real time."
msgstr ""
"`veryl check` あるいは `veryl build` でリントチェックができます。あるいは言語"
"サーバはリアルタイムでのチェックを行います。"

#: src/06_development_environment/06_linter.md:6
msgid ""
"The available configurations are [here](./01_project_configuration/03_lint."
"md)."
msgstr "全設定の説明は[こちら](./01_project_configuration/03_lint.md)。"

#: src/06_development_environment/07_simulator.md:3
msgid ""
"Test by RTL simulator is executed through `veryl test`. Supported simulators "
"are below:"
msgstr ""
"RTLシミュレータによるテストは `veryl test` で実行することができます。サポート"
"されているシミュレータは以下の通りです。"

#: src/06_development_environment/07_simulator.md:6
msgid "[Verilator](https://www.veripool.org/verilator/)"
msgstr "[Verilator](https://www.veripool.org/verilator/)"

#: src/06_development_environment/07_simulator.md:7
msgid ""
"[Synopsys VCS](https://www.synopsys.com/verification/simulation/vcs.html)"
msgstr ""
"[Synopsys VCS](https://www.synopsys.com/verification/simulation/vcs.html)"

#: src/06_development_environment/07_simulator.md:8
msgid ""
"[AMD Vivado Simulator](https://www.xilinx.com/products/design-tools/vivado/"
"verification.html)"
msgstr ""
"[AMD Vivado Simulator](https://www.xilinx.com/products/design-tools/vivado/"
"verification.html)"

#: src/06_development_environment/07_simulator.md:10
msgid ""
"Verilator is the default simulator. If no simulator is specified through "
"`Veryl.toml` and command-line option, it will be used."
msgstr ""
"Verilatorはデフォルトのシミュレータです。`Veryl.toml`やコマンドラインオプショ"
"ンでシミュレータが指定されていない場合に使用されます。"

#: src/06_development_environment/07_simulator.md:13
msgid ""
"The available configurations are [here](./01_project_configuration/04_test."
"md)."
msgstr "全設定の説明は[こちら](./01_project_configuration/04_test.md)。"

#: src/06_development_environment/07_simulator.md:15
msgid "cocotb"
msgstr "cocotb"

#: src/06_development_environment/07_simulator.md:17
msgid ""
"`cocotb` tests require `python3` environment in which `cocotb` is installed. "
"The supported version of `cocotb` is 1.9.0 only."
msgstr ""
"`cocotb` テストを実行するには `cocotb` がインストールされた `python3` の環境"
"が必要です。サポートされている `cocotb` のバージョンは 1.9.0 のみです。"

#: src/06_development_environment/07_simulator.md:20
msgid "For example, it can be installed by the following command."
msgstr "例えば以下のコマンドでインストールすることができます。"

#: src/06_development_environment/07_simulator.md:26
msgid "As simulator backend, Verilator is only supported."
msgstr "シミュレータバックエンドとしては Verilator のみサポートされています。"

#: src/06_development_environment/08_language_server.md:3
msgid ""
"`veryl-ls` is a language server binary. If you want to use it, editor "
"configuration or plugin to use it is required."
msgstr ""
"`veryl-ls` は言語サーバのバイナリです。使用するにはエディタの設定やプラグイン"
"が必要です。"

#: src/06_development_environment/08_language_server.md:6
msgid ""
"The available configurations are below. These can be specified by each "
"editor's config."
msgstr ""
"設定可能な項目は以下の通りです。これは各エディタの設定から指定できます。"

#: src/06_development_environment/08_language_server.md:11
msgid "useOperatorCompletion"
msgstr "useOperatorCompletion"

#: src/06_development_environment/08_language_server.md:11
msgid "use operator (e.g. '>:', '>>') completion"
msgstr "演算子（例 '>:', '>>'）の補完を有効にする"

#: src/06_development_environment/09_compatibility.md:3
msgid ""
"Some tools supporting SystemVerilog don't support some features. Code "
"generation can be customized by configuration of `Veryl.toml` to support "
"these tools."
msgstr ""
"いくつかのツールはサポートしていない SystemVerilog 構文があります。これをサ"
"ポートするために、 `Veryl.toml` の設定でコード生成をカスタマイズすることがで"
"きます。"

#: src/06_development_environment/09_compatibility.md:6
msgid "Vivado"
msgstr "Vivado"

#: src/06_development_environment/09_compatibility.md:8
msgid "String parameter"
msgstr "文字列パラメータ"

#: src/06_development_environment/09_compatibility.md:10
msgid "Vivado don't support `parameter` which is typed as `string`."
msgstr "Vivadoは `string` 型の `parameter` をサポートしていません。"

#: src/06_development_environment/09_compatibility.md:12
msgid ""
"```verilog\n"
"parameter string a = \"A\";\n"
"```"
msgstr ""
"```verilog\n"
"parameter string a = \"A\";\n"
"```"

#: src/06_development_environment/09_compatibility.md:16
msgid "So you can use `implicit_parameter_types` like below:"
msgstr "その場合は `implicit_parameter_types` を設定してください。"

#: src/06_development_environment/09_compatibility.md:23
msgid "By the configuration, the generated code becomes like below:"
msgstr "設定すると生成コードは以下のようになります。"

#: src/06_development_environment/09_compatibility.md:25
msgid ""
"```verilog\n"
"parameter a = \"A\";\n"
"```"
msgstr ""
"```verilog\n"
"parameter a = \"A\";\n"
"```"

#: src/06_development_environment/09_compatibility.md:29
msgid "Quartus"
msgstr "Quartus"

#: src/06_development_environment/09_compatibility.md:31
msgid "`inside` operator"
msgstr "`inside` 演算子"

#: src/06_development_environment/09_compatibility.md:33
msgid ""
"Quartus don't support `inside` operator. So you can use "
"`expand_inside_operation` like below:"
msgstr ""
"Quartus は `inside` 演算子をサポートしていません。その場合は "
"`expand_inside_operation` を設定してください。"

#: src/06_development_environment/09_compatibility.md:41
msgid ""
"By the configuration, operations using `inside` operator will be expanded to "
"logic using `==?` operator."
msgstr ""
"設定すると、 `inside` 演算子を使った演算は `==?` 演算子を使った論理に展開され"
"ます。"

#: src/06_development_environment/10_documentation.md:3
msgid ""
"Document of project can be generated by `veryl doc` command. All public "
"modules, interfaces and packages will be listed in it. (See [Visibility]"
"(../05_language_reference/11_visibility.md) )"
msgstr ""
"プロジェクトのドキュメントは `veryl doc` コマンドで生成することができます。全"
"てのパブリックなモジュールとインターフェース、パッケージがリストアップされま"
"す。（参照 [可視性](../05_language_reference/11_visibility.md)）"

#: src/06_development_environment/10_documentation.md:6
msgid ""
"If you want to add a detailed description, you can add documentation "
"comment. In the documentation comment, [Markdown](https://www.markdownguide."
"org) syntax can be used."
msgstr ""
"詳細な説明を書きたい場合はドキュメンテーションコメントを追加することもできま"
"す。ドキュメンテーションコメントでは[マークダウン](https://www.markdownguide."
"org)記法を使えます。"

#: src/06_development_environment/10_documentation.md:9
msgid "The following formats are supported too."
msgstr "以下のフォーマットもサポートされています。"

#: src/06_development_environment/10_documentation.md:11
msgid "Waveform description based on [WaveDrom](https://wavedrom.com)"
msgstr "[WaveDrom](https://wavedrom.com)による波形記述"

#: src/06_development_environment/10_documentation.md:12
msgid "Diagram description based on [Mermaid](https://mermaid.js.org)"
msgstr "[Mermaid](https://mermaid.js.org)によるダイアグラム記述"

#: src/06_development_environment/10_documentation.md:14
msgid "Each syntax can be used in `wavedrom` and `mermaid` code block."
msgstr ""
"それぞれの構文は `wavedrom` と `mermaid` コードブロック内で使用できます。"

#: src/06_development_environment/10_documentation.md:16
msgid "Please refer the following for the detailed syntax."
msgstr "詳細な構文は以下を参照してください。"

#: src/06_development_environment/10_documentation.md:18
msgid "[Tutorials | Mermaid](https://mermaid.js.org/ecosystem/tutorials.html)"
msgstr "[Tutorials | Mermaid](https://mermaid.js.org/ecosystem/tutorials.html)"

#: src/06_development_environment/10_documentation.md:19
msgid ""
"[Hitchhiker's Guide to the WaveDrom](https://wavedrom.com/tutorial.html)"
msgstr ""
"[Hitchhiker's Guide to the WaveDrom](https://wavedrom.com/tutorial.html)"

#: src/06_development_environment/10_documentation.md:21
msgid ""
"````veryl,playground\n"
"/// The detailed description of ModuleA\n"
"///\n"
"/// * list item0\n"
"/// * list item1\n"
"///\n"
"/// ```wavedrom\n"
"/// {signal: [\n"
"///   {name: 'clk', wave: 'p.....|...'},\n"
"///   {name: 'dat', wave: 'x.345x|=.x', data: ['head', 'body', 'tail', "
"'data']},\n"
"///   {name: 'req', wave: '0.1..0|1.0'},\n"
"///   {},\n"
"///   {name: 'ack', wave: '1.....|01.'}\n"
"///\n"
"/// ]}\n"
"/// ```\n"
"pub module ModuleA #(\n"
"    /// Data width\n"
"    param ParamA: u32 = 1,\n"
"    const ParamB: u32 = 1,\n"
") (\n"
"    i_clk : input  clock        , /// Clock\n"
"    i_rst : input  reset        , /// Reset\n"
"    i_data: input  logic<ParamA>, /// Data input\n"
"    o_data: output logic<ParamA>, /// Data output\n"
") {\n"
"    assign o_data = 0;\n"
"}\n"
"````"
msgstr ""
"```veryl,playground\n"
"/// ModuleAの詳細説明\n"
"///\n"
"/// * リスト要素0\n"
"/// * リスト要素1\n"
"///\n"
"/// ```wavedrom\n"
"/// {signal: [\n"
"///   {name: 'clk', wave: 'p.....|...'},\n"
"///   {name: 'dat', wave: 'x.345x|=.x', data: ['head', 'body', 'tail', "
"'data']},\n"
"///   {name: 'req', wave: '0.1..0|1.0'},\n"
"///   {},\n"
"///   {name: 'ack', wave: '1.....|01.'}\n"
"///\n"
"/// ]}\n"
"/// ```\n"
"pub module ModuleA #(\n"
"    /// データ幅\n"
"    param ParamA: u32 = 1,\n"
"    local ParamB: u32 = 1,\n"
") (\n"
"    i_clk : input  clock        , /// クロック\n"
"    i_rst : input  reset        , /// リセット\n"
"    i_data: input  logic<ParamA>, /// データ入力\n"
"    o_data: output logic<ParamA>, /// データ出力\n"
") {\n"
"    assign o_data = 0;\n"
"}\n"
"```"

#: src/06_development_environment/10_documentation.md:51
msgid ""
"The available configurations are below. These can be specified in `[doc]` "
"section of `Veryl.toml`."
msgstr ""
"設定可能な項目は以下の通りです。これは `Veryl.toml` の `[doc]` セクションで指"
"定できます。"

#: src/06_development_environment/10_documentation.md:54
msgid ""
"```toml\n"
"[doc]\n"
"path = \"document\"\n"
"```"
msgstr ""
"```toml\n"
"[doc]\n"
"path = \"document\"\n"
"```"

#: src/06_development_environment/10_documentation.md:61
msgid "path"
msgstr "path"

#: src/06_development_environment/10_documentation.md:61
msgid "\"doc\""
msgstr "\"doc\""

#: src/06_development_environment/10_documentation.md:61
msgid "path to output directory"
msgstr "出力ディレクトリへのパス"

#: src/06_development_environment/11_github_action.md:3
msgid ""
"The official GitHub action to download a prebuilt binary of Veryl is "
"provided."
msgstr ""
"ビルド済みのVerylバイナリをダウンロードするための公式GitHub actionが提供され"
"ています。"

#: src/06_development_environment/11_github_action.md:5
msgid ""
"[https://github.com/marketplace/actions/setup-veryl](https://github.com/"
"marketplace/actions/setup-veryl)"
msgstr ""
"[https://github.com/marketplace/actions/setup-veryl](https://github.com/"
"marketplace/actions/setup-veryl)"

#: src/06_development_environment/11_github_action.md:7
msgid "The examples of GitHub action script are below:"
msgstr "GitHub actionスクリプトの例は以下の通りです。"

#: src/06_development_environment/11_github_action.md:9
msgid "Format and build check"
msgstr "フォーマットとビルドチェック"

#: src/06_development_environment/11_github_action.md:12
#: src/06_development_environment/11_github_action.md:27
#: src/06_development_environment/11_github_action.md:47
msgid "name"
msgstr "name"

#: src/06_development_environment/11_github_action.md:12
msgid "Check"
msgstr "Check"

#: src/06_development_environment/11_github_action.md:13
#: src/06_development_environment/11_github_action.md:28
#: src/06_development_environment/11_github_action.md:48
msgid "push"
msgstr "push"

#: src/06_development_environment/11_github_action.md:13
#: src/06_development_environment/11_github_action.md:48
msgid "pull_request"
msgstr "pull_request"

#: src/06_development_environment/11_github_action.md:13
#: src/06_development_environment/11_github_action.md:28
#: src/06_development_environment/11_github_action.md:48
msgid "jobs"
msgstr "jobs"

#: src/06_development_environment/11_github_action.md:15
msgid "check"
msgstr "check"

#: src/06_development_environment/11_github_action.md:16
#: src/06_development_environment/11_github_action.md:31
#: src/06_development_environment/11_github_action.md:51
msgid "runs-on"
msgstr "runs-on"

#: src/06_development_environment/11_github_action.md:16
#: src/06_development_environment/11_github_action.md:31
msgid "ubuntu-latest"
msgstr "ubuntu-latest"

#: src/06_development_environment/11_github_action.md:17
#: src/06_development_environment/11_github_action.md:32
#: src/06_development_environment/11_github_action.md:52
msgid "steps"
msgstr "steps"

#: src/06_development_environment/11_github_action.md:18
#: src/06_development_environment/11_github_action.md:19
#: src/06_development_environment/11_github_action.md:33
#: src/06_development_environment/11_github_action.md:34
#: src/06_development_environment/11_github_action.md:36
#: src/06_development_environment/11_github_action.md:53
#: src/06_development_environment/11_github_action.md:54
#: src/06_development_environment/11_github_action.md:55
msgid "uses"
msgstr "uses"

#: src/06_development_environment/11_github_action.md:18
#: src/06_development_environment/11_github_action.md:33
#: src/06_development_environment/11_github_action.md:53
msgid "actions/checkout@v4"
msgstr "actions/checkout@v4"

#: src/06_development_environment/11_github_action.md:19
#: src/06_development_environment/11_github_action.md:34
#: src/06_development_environment/11_github_action.md:54
msgid "veryl-lang/setup-veryl@v1"
msgstr "veryl-lang/setup-veryl@v1"

#: src/06_development_environment/11_github_action.md:20
#: src/06_development_environment/11_github_action.md:21
#: src/06_development_environment/11_github_action.md:35
#: src/06_development_environment/11_github_action.md:56
msgid "run"
msgstr "run"

#: src/06_development_environment/11_github_action.md:20
#: src/06_development_environment/15_docker_image.md:41
msgid "veryl fmt --check"
msgstr "veryl fmt --check"

#: src/06_development_environment/11_github_action.md:21
msgid "veryl check"
msgstr "veryl check"

#: src/06_development_environment/11_github_action.md:24
msgid "Publish document through GitHub Pages"
msgstr "GitHub Pagesからドキュメントを公開する"

#: src/06_development_environment/11_github_action.md:27
msgid "Deploy"
msgstr "Deploy"

#: src/06_development_environment/11_github_action.md:30
msgid "deploy"
msgstr "deploy"

#: src/06_development_environment/11_github_action.md:35
msgid "veryl doc"
msgstr "veryl doc"

#: src/06_development_environment/11_github_action.md:36
msgid "peaceiris/actions-gh-pages@v3"
msgstr "peaceiris/actions-gh-pages@v3"

#: src/06_development_environment/11_github_action.md:37
msgid "with"
msgstr "with"

#: src/06_development_environment/11_github_action.md:38
msgid "github_token"
msgstr "github_token"

#: src/06_development_environment/11_github_action.md:38
msgid "${{ secrets.GITHUB_TOKEN }}"
msgstr "${{ secrets.GITHUB_TOKEN }}"

#: src/06_development_environment/11_github_action.md:39
msgid "publish_dir"
msgstr "publish_dir"

#: src/06_development_environment/11_github_action.md:39
msgid "doc"
msgstr "doc"

#: src/06_development_environment/11_github_action.md:42
msgid "Test by [Verilator](https://www.veripool.org/verilator/)"
msgstr "[Verilator](https://www.veripool.org/verilator/) によるテスト"

#: src/06_development_environment/11_github_action.md:44
msgid ""
"For this purpose, we provide GitHub action [veryl-lang/setup-verilator]"
"(https://github.com/marketplace/actions/setup-verilator)."
msgstr ""
"このために GitHub action [veryl-lang/setup-verilator](https://github.com/"
"marketplace/actions/setup-verilator) を公開しています。"

#: src/06_development_environment/11_github_action.md:50
msgid "test"
msgstr "test"

#: src/06_development_environment/11_github_action.md:51
msgid "ubuntu-22.04"
msgstr "ubuntu-22.04"

#: src/06_development_environment/11_github_action.md:55
msgid "veryl-lang/setup-verilator@v1"
msgstr "veryl-lang/setup-verilator@v1"

#: src/06_development_environment/11_github_action.md:56
msgid "veryl test --sim verilator"
msgstr "veryl test --sim verilator"

#: src/06_development_environment/12_source_map.md:3
msgid ""
"Source map is a file to be used for tracking location from SystemVerilog to "
"Veryl. By this file, a file path, line and column of SystemVerilog can be "
"translated into the position in Veryl."
msgstr ""
"ソースマップはSystemVerilogからVerylへ位置情報を追跡するために使用されるファ"
"イルです。このファイルによって、SystemVerilogのファイルパス・行・列をVeryl上"
"の位置に変換することができます。"

#: src/06_development_environment/12_source_map.md:6
msgid ""
"By default, Veryl generates source map at the same directory as generated "
"SystemVerilog with `.sv.map` extension. Source map generation can be "
"configured through [`sourcemap_target` field]"
"(./01_project_configuration/01_build.md#sourcemap-target) in `Veryl.toml`."
msgstr ""
"デフォルトではVerylは生成されたSystemVerilogと同じディレクトリに拡張子 `.sv."
"map` のソースマップを生成します。ソースマップの生成は `Veryl.toml` の "
"[`sourcemap_target` フィールド](./01_project_configuration/01_build."
"md#sourcemap-target)で制御することができます。"

#: src/06_development_environment/12_source_map.md:9
msgid ""
"The format of source map follows [Source Map Revision 3](https://sourcemaps."
"info/spec.html). The convention of linking generated code to source map is "
"almost the same as JavaScript, but relative path is used only:"
msgstr ""
"ソースマップの形式は [Source Map Revision 3](https://sourcemaps.info/spec."
"html) に従います。生成されたコードとマップのリンク方法はJavaScriptのものとほ"
"とんど同じですが、相対パスのみが使われます。"

#: src/06_development_environment/12_source_map.md:12
msgid ""
"```verilog\n"
"//# sourceMappingURL=<relative path>\n"
"```"
msgstr ""
"```verilog\n"
"//# sourceMappingURL=<relative path>\n"
"```"

#: src/06_development_environment/12_source_map.md:16
msgid ""
"So, if there is the above comment at the end of a SystemVerilog file, it "
"shows source map can be used."
msgstr ""
"従って、上記のコメントがSystemVerilogファイルの末尾にあればソースマップが利用"
"可能です。"

#: src/06_development_environment/12_source_map.md:18
msgid "sourcemap-resolver"
msgstr "sourcemap-resolver"

#: src/06_development_environment/12_source_map.md:20
msgid ""
"`sourcemap-resolver` which is shipped together Veryl compiler can be used to "
"annotate arbitrary text file like below:"
msgstr ""
"`sourcemap-resolver` は Veryl コンパイラに同梱されており、任意のテキストファ"
"イルに以下のような注釈を付けることができます。"

#: src/06_development_environment/12_source_map.md:27
msgid ""
"The first line is the original text, and the second line is added by "
"`sourcemap-resolver`. The usage examples are below:"
msgstr ""
"最初の行が元のテキストで、2行目が `sourcemap-resolver` により追加された行で"
"す。使用例は以下の通りです。"

#: src/06_development_environment/13_verylup.md:3
msgid ""
"[verylup](https://github.com/veryl-lang/verylup) is the official toolchain "
"installer of Veryl. It eases to update and switch toolchains."
msgstr ""
"[verylup](https://github.com/veryl-lang/verylup) はVerylの公式ツールチェーン"
"インストーラです。ツールチェーンの更新や切り替えを簡単に行うことができます。"

#: src/06_development_environment/13_verylup.md:6
msgid "Update toolchain"
msgstr "ツールチェーンの更新"

#: src/06_development_environment/13_verylup.md:8
msgid ""
"The following command updates Veryl toolchain and verylup to the latest "
"version."
msgstr "以下のコマンドはVerylツールチェーンとverylupを最新版に更新します。"

#: src/06_development_environment/13_verylup.md:14
msgid "Install a specific toolchain"
msgstr "特定のツールチェーンをインストール"

#: src/06_development_environment/13_verylup.md:16
msgid ""
"If you want to use a specific version of Veryl, `verylup install` can be "
"used."
msgstr ""
"もし特定のバージョンのVerylを使用したい場合は、`verylup install` を使うことが"
"できます。"

#: src/06_development_environment/13_verylup.md:22
msgid ""
"After installing it, `+` version specifier can be used in `veryl` command "
"like below:"
msgstr ""
"インストール後、`veryl` コマンドで `+` によるバージョン指定が可能になります。"

#: src/06_development_environment/13_verylup.md:28
msgid "Toolchain override for directories"
msgstr "ディレクトリ毎のツールチェーンオーバーライド"

#: src/06_development_environment/13_verylup.md:30
msgid ""
"If you want to use a specific version of Veryl for specific directories, "
"`verylup override` can be used."
msgstr ""
"もし特定にディレクトリで特定のバージョンのVerylを使用したい場合は、`verylup "
"override` を使うことができます。"

#: src/06_development_environment/13_verylup.md:36
msgid ""
"`verylup override` can be executed in arbitrary directories in a Veryl "
"project. After this command, the default toolchain becomes `0.12.0` in the "
"project."
msgstr ""
"`verylup override` はVerylプロジェクト内の任意のディレクトリで実行できます。"
"このコマンドを実行すると、そのプロジェクトのデフォルトのツールチェーンは "
"`0.12.0` になります。"

#: src/06_development_environment/13_verylup.md:39
msgid "Offline installation"
msgstr "オフラインインストール"

#: src/06_development_environment/13_verylup.md:41
msgid ""
"If you want to verylup on an environment without internet access, offline "
"installation can be used. The procedure of offline installation is below:"
msgstr ""
"インターネットアクセスのない環境にインストールしたい場合は、オフラインインス"
"トールが利用できます。オフラインインストールの手順は以下の通りです。"

#: src/06_development_environment/13_verylup.md:44
msgid ""
"Download the latest toolchain package from [Veryl release page](https://"
"github.com/veryl-lang/veryl/releases)."
msgstr ""
"最新のツールチェーンパッケージを[Veryl リリースページ](https://github.com/"
"veryl-lang/veryl/releases/latest)からダウンロードする"

#: src/06_development_environment/13_verylup.md:45
msgid ""
"Execute `veryl setup` with `--pkg` specification like the following command."
msgstr "以下のように`veryl setup` を `--pkg` 指定付きで実行する"

#: src/06_development_environment/13_verylup.md:51
msgid ""
"If you want to update/install toolchain, `--pkg` specification is required "
"as the same as setup."
msgstr ""
"ツールチェーンの更新やインストールもセットアップと同様に `--pkg` 指定が必要で"
"す。"

#: src/06_development_environment/13_verylup.md:58
msgid "Proxy"
msgstr "プロキシ"

#: src/06_development_environment/13_verylup.md:60
msgid ""
"Verylup refers the following environment variables for proxy configuration:"
msgstr "Verylupはプロキシ設定として以下の環境変数を参照します。"

#: src/06_development_environment/13_verylup.md:62
msgid "`HTTPS_PROXY`"
msgstr "`HTTPS_PROXY`"

#: src/06_development_environment/13_verylup.md:63
msgid "`https_proxy`"
msgstr "`https_proxy`"

#: src/06_development_environment/13_verylup.md:64
msgid "`ALL_PROXY`"
msgstr "`ALL_PROXY`"

#: src/06_development_environment/13_verylup.md:65
msgid "`all_proxy`"
msgstr "`all_proxy`"

#: src/06_development_environment/13_verylup.md:67
msgid "As proxy protocol, `http` and `socks5` are supported."
msgstr ""
"プロキシのプロトコルとしては `http` と `socks5` がサポートされています。"

#: src/06_development_environment/13_verylup.md:69
msgid "Proxy config"
msgstr "プロキシ設定"

#: src/06_development_environment/13_verylup.md:71
msgid ""
"Instead of environment variables, you can specify proxy configuration for "
"verylup only."
msgstr "環境変数の代わりにverylupだけのプロキシ設定を指定することができます。"

#: src/06_development_environment/13_verylup.md:73
msgid ""
"```\n"
"verylup config set proxy socks5://127.0.0.1:1086\n"
"```"
msgstr ""
"```\n"
"verylup config set proxy socks5://127.0.0.1:1086\n"
"```"

#: src/06_development_environment/13_verylup.md:77
msgid "Nightly channel"
msgstr "ナイトリーチャンネル"

#: src/06_development_environment/13_verylup.md:79
msgid ""
"To use the latest features easily, nightly channel is available. Nightly "
"channel is built daily from the master branch."
msgstr ""
"最新の機能を簡単に試すために、ナイトリーチャンネルが利用できます。ナイトリー"
"チャンネルはマスターブランチから毎日ビルドされます。"

#: src/06_development_environment/13_verylup.md:86
msgid ""
"By default, nightly channel is not enabled after installation. So the "
"following ways can be used to enable it."
msgstr ""
"デフォルトではナイトリーチャンネルはインストールしても有効になりません。以下"
"の方法で有効にすることができます。"

#: src/06_development_environment/13_verylup.md:89
msgid ""
"```\n"
"// Use +nightly\n"
"veryl +nightly build\n"
"\n"
"// Set default to nightly\n"
"verylup default nightly\n"
"\n"
"// Override by nightly for a specific project\n"
"verylup override set nightly\n"
"```"
msgstr ""
"```\n"
"// +nightly を使う\n"
"veryl +nightly build\n"
"\n"
"// デフォルトをナイトリーにする\n"
"verylup default nightly\n"
"\n"
"// 特定のプロジェクトをナイトリーで上書きする\n"
"verylup override set nightly\n"
"```"

#: src/06_development_environment/13_verylup.md:100
msgid "For Veryl Developer"
msgstr "Veryl開発者向け"

#: src/06_development_environment/13_verylup.md:102
msgid ""
"For Veryl developer, a special toolchain target `local` is prepared. If "
"`verylup install local` is executed in your local Veryl repository, the "
"built toolchain is installed as `local` toolchain. `local` becomes the "
"default toolchain if it exists."
msgstr ""
"Veryl の開発者向けに、特別なツールチェーン `local` が用意されています。"
"`verylup install local` をローカルのVerylリポジトリ上で実行すると、ビルドした"
"ツールチェーンを `local` ツールチェーンとしてインストールします。`local` ツー"
"ルチェーンが存在するときはデフォルトのツールチェーンになります。"

#: src/06_development_environment/13_verylup.md:106
msgid ""
"```\n"
"// Build and install the toolchain from local Veryl repository\n"
"verylup install local\n"
"\n"
"// Use the built toolchain\n"
"veryl build\n"
"\n"
"// Use the latest toolchain\n"
"veryl +latest build\n"
"```"
msgstr ""
"```\n"
"// ローカルのVerylリポジトリでビルドしたツールチェーンをインストール\n"
"verylup install local\n"
"\n"
"// ビルドしたツールチェーンを使う\n"
"veryl build\n"
"\n"
"// 最新のツールチェーンを使う\n"
"veryl +latest build\n"
"```"

#: src/06_development_environment/14_migrate_to_new_version.md:3
msgid ""
"Sometimes, new version of Veryl introduces some breaking changes. `veryl "
"migrate` migrates the existing project to new version automatically. By `--"
"check` option, you can check how changes will be applied before the actual "
"migration."
msgstr ""
"Verylの新しいバージョンが破壊的な変更を伴うことがあります。`veryl migrate` は"
"既存のプロジェクトを新バージョンに自動的に移行します。`--check` オプションに"
"よりどのような変更が適用されるか事前に確認することもできます。"

#: src/06_development_environment/14_migrate_to_new_version.md:12
msgid ""
"`veryl migrate` migrates only single major (or minor until 1.0) version. "
"Therefore, multi version migration can be done like below:"
msgstr ""
"`veryl migrate` は単一のメジャーバージョン（1.0まではマイナーバージョン）しか"
"移行しません。複数のバージョンを移行するには以下のようにしてください。"

#: src/06_development_environment/15_docker_image.md:3
msgid "The official Docker image is provided through Docker Hub."
msgstr ""
"公式のDockerイメージはDocker Hubを通して提供されています。"

#: src/06_development_environment/15_docker_image.md:5
msgid ""
"[https://hub.docker.com/r/veryllang/veryl](https://hub.docker.com/r/"
"veryllang/veryl)"
msgstr ""
"[https://hub.docker.com/r/veryllang/veryl](https://hub.docker.com/r/"
"veryllang/veryl)"

#: src/06_development_environment/15_docker_image.md:7
msgid ""
"The image can be used as the base image for your custormized image, GitLab "
"CI/CD and so on. Here is some examples to use the image."
msgstr ""
"イメージはカスタムイメージのベースや、GitLab CI/CDのために使うことができます。"
"以下に使用例をいくつか示します。"

#: src/06_development_environment/15_docker_image.md:10
msgid "`docker` command"
msgstr "`docker` コマンド"

#: src/06_development_environment/15_docker_image.md:12
msgid "You can pull the image from `veryllang/veryl`."
msgstr ""
"イメージを `veryllang/veryl` からプルできます。"

#: src/06_development_environment/15_docker_image.md:18
msgid "`Dockerfile`"
msgstr "`Dockerfile`"

#: src/06_development_environment/15_docker_image.md:20
msgid ""
"If you want to use the image as a base of your Docker image, the following "
"`FROM` directive can be used."
msgstr ""
"Dockerイメージのベースとして使用する場合は、以下の `FROM` ディレクティブを使用できます。"

#: src/06_development_environment/15_docker_image.md:26
msgid "GitLab CI/CD"
msgstr "GitLab CI/CD"

#: src/06_development_environment/15_docker_image.md:28
msgid "The following is an example of `.gitlab-ci.yml` for GitLab CI/CD."
msgstr ""
"GitLab CI/CD のための `.gitlab-ci.yml` の例は以下になります。"

#: src/06_development_environment/15_docker_image.md:31
msgid "image"
msgstr "image"

#: src/06_development_environment/15_docker_image.md:31
msgid "\"veryllang/veryl\""
msgstr "\"veryllang/veryl\""

#: src/06_development_environment/15_docker_image.md:32
#: src/06_development_environment/15_docker_image.md:34
#: src/06_development_environment/15_docker_image.md:39
msgid "build"
msgstr "build"

#: src/06_development_environment/15_docker_image.md:34
#: src/06_development_environment/15_docker_image.md:39
msgid "stage"
msgstr "stage"

#: src/06_development_environment/15_docker_image.md:35
#: src/06_development_environment/15_docker_image.md:40
msgid "script"
msgstr "script"

#: src/06_development_environment/15_docker_image.md:36
msgid "veryl build"
msgstr "veryl build"

#: src/06_development_environment/15_docker_image.md:37
msgid "fmt"
msgstr "fmt"

#: src/07_appendix/01_formal_syntax.md:3
msgid ""
"Veryl's parser is based on parser generator [parol](https://github.com/"
"jsinger67/parol). The following syntex definition of parol is formal syntax."
msgstr ""
"Veryl のパーサはパーサジェネレータ [parol](https://github.com/jsinger67/"
"parol)を使っています。以下の parol の構文定義が正式な構文です。"

#: src/07_appendix/01_formal_syntax.md:6
msgid ""
"```\n"
"\n"
"%start Veryl\n"
"%title \"Veryl grammar\"\n"
"%comment \"Empty grammar generated by `parol`\"\n"
"%user_type VerylToken = crate::veryl_token::VerylToken\n"
"%user_type Token = crate::veryl_token::Token\n"
"\n"
"%on HashLBracketTerm %push Attr\n"
"%on ColonColonLAngleTerm %push Generic\n"
"%on EscapedRBraceTerm %pop\n"
"%on EmbedTerm %enter EmbedHeader\n"
"\n"
"%scanner EmbedHeader {\n"
"    %on TripleLBraceTerm %enter EmbedBody\n"
"}\n"
"\n"
"%scanner EmbedBody {\n"
"    %auto_newline_off\n"
"    %auto_ws_off\n"
"\n"
"    %on LBraceTerm %push EmbedBodyInner\n"
"    %on EscapedLBraceTerm %push INITIAL\n"
"    %on TripleRBraceTerm %enter INITIAL\n"
"}\n"
"\n"
"%scanner EmbedBodyInner {\n"
"    %auto_newline_off\n"
"    %auto_ws_off\n"
"\n"
"    %on LBraceTerm %push EmbedBodyInner\n"
"    %on EscapedLBraceTerm %push INITIAL\n"
"    %on RBraceTerm %pop\n"
"}\n"
"\n"
"%scanner Generic {\n"
"    %on ColonColonLAngleTerm %push Generic\n"
"    %on RAngleTerm %pop\n"
"}\n"
"\n"
"%scanner Attr {\n"
"    %on RBracketTerm %pop\n"
"}\n"
"\n"
"%%\n"
"\n"
"// "
"----------------------------------------------------------------------------\n"
"// Terminal\n"
"// "
"----------------------------------------------------------------------------\n"
"\n"
"// Longest match should be first\n"
"\n"
"CommentsTerm          : <INITIAL, Generic, "
"EmbedHeader,                            Attr>\"(?:(?:(?://.*(?:\\r\\n|\\r|"
"\\n)?)|(?:(?ms)/\\*/?([^/]|[^*]/)*\\*/))\\s*)+\"                  : Token;\n"
"StringLiteralTerm     : <INITIAL, "
"Generic,                                         Attr>\"\\u{0022}(?:\\"
"\\[\\u{0022}\\\\/bfnrt]|u[0-9a-fA-F]{4}|[^\\u{0022}\\\\\\u0000-\\u001F])*"
"\\u{0022}\": Token;\n"
"ExponentTerm          : <INITIAL, "
"Generic                                              >/[0-9]+(?:_[0-9]+)*\\."
"[0-9]+(?:_[0-9]+)*[eE][+-]?[0-9]+(?:_[0-9]+)*/                   : Token;\n"
"FixedPointTerm        : <INITIAL, "
"Generic                                              >/[0-9]+(?:_[0-9]+)*\\."
"[0-9]+(?:_[0-9]+)*/                                              : Token;\n"
"BasedTerm             : <INITIAL, "
"Generic                                              >/(?:[0-9]+(?:"
"_[0-9]+)*)?'s?[bodh][0-9a-fA-FxzXZ]+(?:_[0-9a-fA-FxzXZ]+)*/              : "
"Token;\n"
"AllBitTerm            : <INITIAL, "
"Generic                                              >/(?:[0-9]+(?:"
"_[0-9]+)*)?'[01xzXZ]/                                                    : "
"Token;\n"
"BaseLessTerm          : <INITIAL, "
"Generic                                              >/[0-9]+(?:"
"_[0-9]+)*/                                                                  : "
"Token;\n"
"MinusColonTerm        : "
"<INITIAL                                                       "
">'-:'                                                                                  : "
"Token;\n"
"MinusGTTerm           : "
"<INITIAL                                                       >'-"
">'                                                                                  : "
"Token;\n"
"LTMinusTerm           : "
"<INITIAL                                                       "
">'<-'                                                                                  : "
"Token;\n"
"PlusColonTerm         : "
"<INITIAL                                                       "
">'+:'                                                                                  : "
"Token;\n"
"AssignmentOperatorTerm: "
"<INITIAL                                                       >\"\\+=|-=|"
"\\*=|/=|%=|&=|\\|=|\\^=|<<=|>>=|<<<=|>>>="
"\"                                       : Token;\n"
"DiamondOperatorTerm   : "
"<INITIAL                                                       "
">'<>'                                                                                  : "
"Token;\n"
"Operator12Term        : "
"<INITIAL                                                       >\"\\*\\*"
"\"                                                                                : "
"Token;\n"
"Operator11Term        : "
"<INITIAL                                                       >\"/|%"
"\"                                                                                 : "
"Token;\n"
"Operator10Term        : "
"<INITIAL                                                       >\"\\+|-"
"\"                                                                                : "
"Token;\n"
"Operator09Term        : "
"<INITIAL                                                       >\"<<<|>>>|<<|"
">>\"                                                                       : "
"Token;\n"
"Operator08Term        : "
"<INITIAL                                                       >\"<=|>=|<:|>:"
"\"                                                                         : "
"Token;\n"
"Operator07Term        : "
"<INITIAL                                                       >\"===|==\\?|!"
"==|!=\\?|==|!="
"\"                                                             : Token;\n"
"Operator03Term        : "
"<INITIAL                                                       >\"&&"
"\"                                                                                  : "
"Token;\n"
"Operator02Term        : "
"<INITIAL                                                       >\"\\|\\|"
"\"                                                                                : "
"Token;\n"
"Operator06Term        : "
"<INITIAL                                                       >\"&"
"\"                                                                                   : "
"Token;\n"
"Operator05Term        : "
"<INITIAL                                                       >\"\\^~|\\^|~"
"\\^"
"\"                                                                          : "
"Token;\n"
"Operator04Term        : "
"<INITIAL                                                       >\"\\|"
"\"                                                                                  : "
"Token;\n"
"UnaryOperatorTerm     : "
"<INITIAL                                                       >\"~&|~\\||!|~"
"\"                                                                          : "
"Token;\n"
"ColonColonLAngleTerm  : <INITIAL, "
"Generic                                              >'::"
"<'                                                                                 : "
"Token;\n"
"ColonColonTerm        : <INITIAL, "
"Generic                                              "
">'::'                                                                                  : "
"Token;\n"
"ColonTerm             : <INITIAL, "
"Generic                                              "
">':'                                                                                   : "
"Token;\n"
"CommaTerm             : <INITIAL, "
"Generic,                                         "
"Attr>','                                                                                   : "
"Token;\n"
"DotDotEquTerm         : <INITIAL, "
"Generic                                              >'.."
"='                                                                                 : "
"Token;\n"
"DotDotTerm            : <INITIAL, "
"Generic                                              "
">'..'                                                                                  : "
"Token;\n"
"DotTerm               : <INITIAL, "
"Generic                                              "
">'.'                                                                                   : "
"Token;\n"
"EquTerm               : <INITIAL, "
"Generic                                              "
">'='                                                                                   : "
"Token;\n"
"HashLBracketTerm      : "
"<INITIAL                                                       "
">'#['                                                                                  : "
"Token;\n"
"HashTerm              : <INITIAL, "
"Generic                                              "
">'#'                                                                                   : "
"Token;\n"
"LAngleTerm            : <INITIAL, "
"Generic                                              "
">'<'                                                                                   : "
"Token;\n"
"QuestionTerm          : "
"<INITIAL                                                       "
">'?'                                                                                   : "
"Token;\n"
"QuoteLBraceTerm       : <INITIAL, "
"Generic                                              >"
"\"'\\{\"                                                                                 : "
"Token;\n"
"QuoteTerm             : "
"<INITIAL                                                       >"
"\"'\"                                                                                   : "
"Token;\n"
"EscapedLBraceTerm     : <                               EmbedBody, "
"EmbedBodyInner      "
">'\\{'                                                                                  : "
"Token;\n"
"TripleLBraceTerm      : <                  "
"EmbedHeader                                 "
">'{{{'                                                                                 : "
"Token;\n"
"LBraceTerm            : <INITIAL, Generic,              EmbedBody, "
"EmbedBodyInner, "
"Attr>'{'                                                                                   : "
"Token;\n"
"LBracketTerm          : <INITIAL, "
"Generic,                                         "
"Attr>'['                                                                                   : "
"Token;\n"
"LParenTerm            : <INITIAL, Generic, "
"EmbedHeader,                            "
"Attr>'('                                                                                   : "
"Token;\n"
"RAngleTerm            : <INITIAL, "
"Generic                                              "
">'>'                                                                                   : "
"Token;\n"
"EscapedRBraceTerm     : "
"<INITIAL                                                       "
">'\\}'                                                                                  : "
"Token;\n"
"TripleRBraceTerm      : <                               "
"EmbedBody                      "
">'}}}'                                                                                 : "
"Token;\n"
"RBraceTerm            : <INITIAL, Generic,                         "
"EmbedBodyInner, "
"Attr>'}'                                                                                   : "
"Token;\n"
"RBracketTerm          : <INITIAL, "
"Generic,                                         "
"Attr>']'                                                                                   : "
"Token;\n"
"RParenTerm            : <INITIAL, Generic, "
"EmbedHeader,                            "
"Attr>')'                                                                                   : "
"Token;\n"
"SemicolonTerm         : <INITIAL, "
"Generic                                              "
">';'                                                                                   : "
"Token;\n"
"StarTerm              : <INITIAL, "
"Generic                                              "
">'*'                                                                                   : "
"Token;\n"
"\n"
"// Keywords are reflected to syntax highlight definitions through "
"highlightgen tool.\n"
"// Please refer support/highlightgen/README.md if you want to add a "
"keyword.\n"
"\n"
"AliasTerm             : <INITIAL, "
"Generic                                             "
">'alias'                                                                               : "
"Token; // Keyword: Statement\n"
"AlwaysCombTerm        : <INITIAL, "
"Generic                                             "
">'always_comb'                                                                         : "
"Token; // Keyword: Statement\n"
"AlwaysFfTerm          : <INITIAL, "
"Generic                                             "
">'always_ff'                                                                           : "
"Token; // Keyword: Statement\n"
"AssignTerm            : <INITIAL, "
"Generic                                             "
">'assign'                                                                              : "
"Token; // Keyword: Statement\n"
"AsTerm                : <INITIAL, "
"Generic                                             "
">'as'                                                                                  : "
"Token; // Keyword: Statement\n"
"BindTerm              : <INITIAL, "
"Generic                                             "
">'bind'                                                                                : "
"Token; // Keyword: Statement\n"
"BitTerm               : <INITIAL, "
"Generic                                             "
">'bit'                                                                                 : "
"Token; // Keyword: Type\n"
"BoolTerm              : <INITIAL, "
"Generic                                             "
">'bool'                                                                                : "
"Token; // Keyword: Type\n"
"CaseTerm              : <INITIAL, "
"Generic                                             "
">'case'                                                                                : "
"Token; // Keyword: Conditional\n"
"ClockTerm             : <INITIAL, "
"Generic                                             "
">'clock'                                                                               : "
"Token; // Keyword: Type\n"
"ClockPosedgeTerm      : <INITIAL, "
"Generic                                             "
">'clock_posedge'                                                                       : "
"Token; // Keyword: Type\n"
"ClockNegedgeTerm      : <INITIAL, "
"Generic                                             "
">'clock_negedge'                                                                       : "
"Token; // Keyword: Type\n"
"ConnectTerm           : <INITIAL, "
"Generic                                             "
">'connect'                                                                             : "
"Token; // Keyword: Statement\n"
"ConstTerm             : <INITIAL, "
"Generic                                             "
">'const'                                                                               : "
"Token; // Keyword: Statement\n"
"ConverseTerm          : <INITIAL, "
"Generic                                             "
">'converse'                                                                            : "
"Token; // Keyword: Direction\n"
"DefaultTerm           : <INITIAL, "
"Generic                                             "
">'default'                                                                             : "
"Token; // Keyword: Conditional\n"
"ElseTerm              : <INITIAL, "
"Generic                                             "
">'else'                                                                                : "
"Token; // Keyword: Conditional\n"
"EmbedTerm             : "
"<INITIAL                                                      "
">'embed'                                                                               : "
"Token; // Keyword: Structure\n"
"EnumTerm              : <INITIAL, "
"Generic                                             "
">'enum'                                                                                : "
"Token; // Keyword: Structure\n"
"F32Term               : <INITIAL, "
"Generic                                             "
">'f32'                                                                                 : "
"Token; // Keyword: Type\n"
"F64Term               : <INITIAL, "
"Generic                                             "
">'f64'                                                                                 : "
"Token; // Keyword: Type\n"
"FalseTerm             : <INITIAL, "
"Generic                                             "
">'false'                                                                               : "
"Token; // Keyword: Literal\n"
"FinalTerm             : <INITIAL, "
"Generic                                             "
">'final'                                                                               : "
"Token; // Keyword: Statement\n"
"ForTerm               : <INITIAL, "
"Generic                                             "
">'for'                                                                                 : "
"Token; // Keyword: Repeat\n"
"FunctionTerm          : <INITIAL, "
"Generic                                             "
">'function'                                                                            : "
"Token; // Keyword: Structure\n"
"I8Term                : <INITIAL, "
"Generic                                             "
">'i8'                                                                                  : "
"Token; // Keyword: Type\n"
"I16Term               : <INITIAL, "
"Generic                                             "
">'i16'                                                                                 : "
"Token; // Keyword: Type\n"
"I32Term               : <INITIAL, "
"Generic                                             "
">'i32'                                                                                 : "
"Token; // Keyword: Type\n"
"I64Term               : <INITIAL, "
"Generic                                             "
">'i64'                                                                                 : "
"Token; // Keyword: Type\n"
"IfResetTerm           : <INITIAL, "
"Generic                                             "
">'if_reset'                                                                            : "
"Token; // Keyword: Conditional\n"
"IfTerm                : <INITIAL, "
"Generic                                             "
">'if'                                                                                  : "
"Token; // Keyword: Conditional\n"
"ImportTerm            : <INITIAL, "
"Generic                                             "
">'import'                                                                              : "
"Token; // Keyword: Statement\n"
"IncludeTerm           : <INITIAL, "
"Generic                                             "
">'include'                                                                             : "
"Token; // Keyword: Structure\n"
"InitialTerm           : <INITIAL, "
"Generic                                             "
">'initial'                                                                             : "
"Token; // Keyword: Statement\n"
"InoutTerm             : <INITIAL, "
"Generic                                             "
">'inout'                                                                               : "
"Token; // Keyword: Direction\n"
"InputTerm             : <INITIAL, "
"Generic                                             "
">'input'                                                                               : "
"Token; // Keyword: Direction\n"
"InsideTerm            : <INITIAL, "
"Generic                                             "
">'inside'                                                                              : "
"Token; // Keyword: Conditional\n"
"InstTerm              : <INITIAL, "
"Generic                                             "
">'inst'                                                                                : "
"Token; // Keyword: Statement\n"
"InterfaceTerm         : <INITIAL, "
"Generic                                             "
">'interface'                                                                           : "
"Token; // Keyword: Structure\n"
"InTerm                : <INITIAL, "
"Generic                                             "
">'in'                                                                                  : "
"Token; // Keyword: Repeat\n"
"LetTerm               : <INITIAL, "
"Generic                                             "
">'let'                                                                                 : "
"Token; // Keyword: Statement\n"
"LogicTerm             : <INITIAL, "
"Generic                                             "
">'logic'                                                                               : "
"Token; // Keyword: Type\n"
"LsbTerm               : <INITIAL, "
"Generic                                             "
">'lsb'                                                                                 : "
"Token; // Keyword: Literal\n"
"ModportTerm           : <INITIAL, "
"Generic                                             "
">'modport'                                                                             : "
"Token; // Keyword: Structure\n"
"ModuleTerm            : <INITIAL, "
"Generic                                             "
">'module'                                                                              : "
"Token; // Keyword: Structure\n"
"MsbTerm               : <INITIAL, "
"Generic                                             "
">'msb'                                                                                 : "
"Token; // Keyword: Literal\n"
"OutputTerm            : <INITIAL, "
"Generic                                             "
">'output'                                                                              : "
"Token; // Keyword: Direction\n"
"OutsideTerm           : <INITIAL, "
"Generic                                             "
">'outside'                                                                             : "
"Token; // Keyword: Conditional\n"
"PackageTerm           : <INITIAL, "
"Generic                                             "
">'package'                                                                             : "
"Token; // Keyword: Structure\n"
"ParamTerm             : <INITIAL, "
"Generic                                             "
">'param'                                                                               : "
"Token; // Keyword: Statement\n"
"ProtoTerm             : <INITIAL, "
"Generic                                             "
">'proto'                                                                               : "
"Token; // Keyword: Structure\n"
"PubTerm               : <INITIAL, "
"Generic                                             "
">'pub'                                                                                 : "
"Token; // Keyword: Structure\n"
"RepeatTerm            : <INITIAL, "
"Generic                                             "
">'repeat'                                                                              : "
"Token; // Keyword: Repeat\n"
"ResetTerm             : <INITIAL, "
"Generic                                             "
">'reset'                                                                               : "
"Token; // Keyword: Type\n"
"ResetAsyncHighTerm    : <INITIAL, "
"Generic                                             "
">'reset_async_high'                                                                    : "
"Token; // Keyword: Type\n"
"ResetAsyncLowTerm     : <INITIAL, "
"Generic                                             "
">'reset_async_low'                                                                     : "
"Token; // Keyword: Type\n"
"ResetSyncHighTerm     : <INITIAL, "
"Generic                                             "
">'reset_sync_high'                                                                     : "
"Token; // Keyword: Type\n"
"ResetSyncLowTerm      : <INITIAL, "
"Generic                                             "
">'reset_sync_low'                                                                      : "
"Token; // Keyword: Type\n"
"ReturnTerm            : <INITIAL, "
"Generic                                             "
">'return'                                                                              : "
"Token; // Keyword: Statement\n"
"RevTerm               : <INITIAL, "
"Generic                                             "
">'rev'                                                                                 : "
"Token; // Keyword: Repeat\n"
"BreakTerm             : <INITIAL, "
"Generic                                             "
">'break'                                                                               : "
"Token; // Keyword: Statement\n"
"SameTerm              : <INITIAL, "
"Generic                                             "
">'same'                                                                                : "
"Token; // Keyword: Direction\n"
"SignedTerm            : <INITIAL, "
"Generic                                             "
">'signed'                                                                              : "
"Token; // Keyword: Type\n"
"StepTerm              : <INITIAL, "
"Generic                                             "
">'step'                                                                                : "
"Token; // Keyword: Repeat\n"
"StringTerm            : <INITIAL, "
"Generic                                             "
">'string'                                                                              : "
"Token; // Keyword: Type\n"
"StructTerm            : <INITIAL, "
"Generic                                             "
">'struct'                                                                              : "
"Token; // Keyword: Structure\n"
"SwitchTerm            : <INITIAL, "
"Generic                                             "
">'switch'                                                                              : "
"Token; // Keyword: Conditional\n"
"TriTerm               : <INITIAL, "
"Generic                                             "
">'tri'                                                                                 : "
"Token; // Keyword: Type\n"
"TrueTerm              : <INITIAL, "
"Generic                                             "
">'true'                                                                                : "
"Token; // Keyword: Literal\n"
"TypeTerm              : <INITIAL, "
"Generic                                             "
">'type'                                                                                : "
"Token; // Keyword: Statement\n"
"U8Term                : <INITIAL, "
"Generic                                             "
">'u8'                                                                                  : "
"Token; // Keyword: Type\n"
"U16Term               : <INITIAL, "
"Generic                                             "
">'u16'                                                                                 : "
"Token; // Keyword: Type\n"
"U32Term               : <INITIAL, "
"Generic                                             "
">'u32'                                                                                 : "
"Token; // Keyword: Type\n"
"U64Term               : <INITIAL, "
"Generic                                             "
">'u64'                                                                                 : "
"Token; // Keyword: Type\n"
"UnionTerm             : <INITIAL, "
"Generic                                             "
">'union'                                                                               : "
"Token; // Keyword: Structure\n"
"UnsafeTerm            : <INITIAL, "
"Generic                                             "
">'unsafe'                                                                              : "
"Token; // Keyword: Structure\n"
"VarTerm               : <INITIAL, "
"Generic                                             "
">'var'                                                                                 : "
"Token; // Keyword: Statement\n"
"DollarIdentifierTerm  : <INITIAL, "
"Generic                                             >/\\$[a-zA-Z_][0-9a-zA-Z_"
"$]*/                                                           : Token;\n"
"IdentifierTerm        : <INITIAL, Generic, "
"EmbedHeader,                           Attr>/(?:r#)?[a-zA-Z_][0-9a-zA-Z_"
"$]*/                                                      : Token;\n"
"AnyTerm               : <                              EmbedBody, "
"EmbedBodyInner      >/(?:[^{}\\\\]|\\"
"\\[^{])+/                                                                 : "
"Token;\n"
"\n"
"// "
"----------------------------------------------------------------------------\n"
"// Token\n"
"// "
"----------------------------------------------------------------------------\n"
"\n"
"Comments: [ CommentsTerm ];\n"
"\n"
"StartToken: Comments;\n"
"\n"
"StringLiteralToken: StringLiteralTerm: Token Comments;\n"
"\n"
"ExponentToken  : ExponentTerm  : Token Comments;\n"
"FixedPointToken: FixedPointTerm: Token Comments;\n"
"BasedToken     : BasedTerm     : Token Comments;\n"
"BaseLessToken  : BaseLessTerm  : Token Comments;\n"
"AllBitToken    : AllBitTerm    : Token Comments;\n"
"\n"
"AssignmentOperatorToken: AssignmentOperatorTerm: Token Comments;\n"
"DiamondOperatorToken   : DiamondOperatorTerm   : Token Comments;\n"
"Operator02Token        : Operator02Term        : Token Comments;\n"
"Operator03Token        : Operator03Term        : Token Comments;\n"
"Operator04Token        : Operator04Term        : Token Comments;\n"
"Operator05Token        : Operator05Term        : Token Comments;\n"
"Operator06Token        : Operator06Term        : Token Comments;\n"
"Operator07Token        : Operator07Term        : Token Comments;\n"
"Operator08Token        : Operator08Term        : Token Comments;\n"
"Operator09Token        : Operator09Term        : Token Comments;\n"
"Operator10Token        : Operator10Term        : Token Comments;\n"
"Operator11Token        : Operator11Term        : Token Comments;\n"
"Operator12Token        : Operator12Term        : Token Comments;\n"
"UnaryOperatorToken     : UnaryOperatorTerm     : Token Comments;\n"
"\n"
"ColonToken           : ColonTerm           : Token Comments;\n"
"ColonColonLAngleToken: ColonColonLAngleTerm: Token Comments;\n"
"ColonColonToken      : ColonColonTerm      : Token Comments;\n"
"CommaToken           : CommaTerm           : Token Comments;\n"
"DotDotToken          : DotDotTerm          : Token Comments;\n"
"DotDotEquToken       : DotDotEquTerm       : Token Comments;\n"
"DotToken             : DotTerm             : Token Comments;\n"
"EquToken             : EquTerm             : Token Comments;\n"
"HashLBracketToken    : HashLBracketTerm    : Token Comments;\n"
"HashToken            : HashTerm            : Token Comments;\n"
"QuestionToken        : QuestionTerm        : Token Comments;\n"
"QuoteLBraceToken     : QuoteLBraceTerm     : Token Comments;\n"
"QuoteToken           : QuoteTerm           : Token Comments;\n"
"LAngleToken          : LAngleTerm          : Token Comments;\n"
"EmbedLBraceToken     : LBraceTerm          : Token         ;\n"
"EscapedLBraceToken   : EscapedLBraceTerm   : Token         ;\n"
"TripleLBraceToken    : TripleLBraceTerm    : Token         ;\n"
"LBraceToken          : LBraceTerm          : Token Comments;\n"
"LBracketToken        : LBracketTerm        : Token Comments;\n"
"LParenToken          : LParenTerm          : Token Comments;\n"
"LTMinusToken         : LTMinusTerm         : Token Comments;\n"
"MinusColonToken      : MinusColonTerm      : Token Comments;\n"
"MinusGTToken         : MinusGTTerm         : Token Comments;\n"
"PlusColonToken       : PlusColonTerm       : Token Comments;\n"
"RAngleToken          : RAngleTerm          : Token Comments;\n"
"EmbedRBraceToken     : RBraceTerm          : Token         ;\n"
"EscapedRBraceToken   : EscapedRBraceTerm   : Token         ;\n"
"TripleRBraceToken    : TripleRBraceTerm    : Token Comments;\n"
"RBraceToken          : RBraceTerm          : Token Comments;\n"
"RBracketToken        : RBracketTerm        : Token Comments;\n"
"RParenToken          : RParenTerm          : Token Comments;\n"
"SemicolonToken       : SemicolonTerm       : Token Comments;\n"
"StarToken            : StarTerm            : Token Comments;\n"
"\n"
"AliasToken         : AliasTerm         : Token Comments;\n"
"AlwaysCombToken    : AlwaysCombTerm    : Token Comments;\n"
"AlwaysFfToken      : AlwaysFfTerm      : Token Comments;\n"
"AsToken            : AsTerm            : Token Comments;\n"
"AssignToken        : AssignTerm        : Token Comments;\n"
"BindToken          : BindTerm          : Token Comments;\n"
"BitToken           : BitTerm           : Token Comments;\n"
"BoolToken          : BoolTerm          : Token Comments;\n"
"CaseToken          : CaseTerm          : Token Comments;\n"
"ClockToken         : ClockTerm         : Token Comments;\n"
"ClockPosedgeToken  : ClockPosedgeTerm  : Token Comments;\n"
"ClockNegedgeToken  : ClockNegedgeTerm  : Token Comments;\n"
"ConnectToken       : ConnectTerm       : Token Comments;\n"
"ConstToken         : ConstTerm         : Token Comments;\n"
"ConverseToken      : ConverseTerm      : Token Comments;\n"
"DefaultToken       : DefaultTerm       : Token Comments;\n"
"ElseToken          : ElseTerm          : Token Comments;\n"
"EmbedToken         : EmbedTerm         : Token Comments;\n"
"EnumToken          : EnumTerm          : Token Comments;\n"
"F32Token           : F32Term           : Token Comments;\n"
"F64Token           : F64Term           : Token Comments;\n"
"FalseToken         : FalseTerm         : Token Comments;\n"
"FinalToken         : FinalTerm         : Token Comments;\n"
"ForToken           : ForTerm           : Token Comments;\n"
"FunctionToken      : FunctionTerm      : Token Comments;\n"
"I8Token            : I8Term            : Token Comments;\n"
"I16Token           : I16Term           : Token Comments;\n"
"I32Token           : I32Term           : Token Comments;\n"
"I64Token           : I64Term           : Token Comments;\n"
"IfResetToken       : IfResetTerm       : Token Comments;\n"
"IfToken            : IfTerm            : Token Comments;\n"
"ImportToken        : ImportTerm        : Token Comments;\n"
"IncludeToken       : IncludeTerm       : Token Comments;\n"
"InitialToken       : InitialTerm       : Token Comments;\n"
"InoutToken         : InoutTerm         : Token Comments;\n"
"InputToken         : InputTerm         : Token Comments;\n"
"InsideToken        : InsideTerm        : Token Comments;\n"
"InstToken          : InstTerm          : Token Comments;\n"
"InterfaceToken     : InterfaceTerm     : Token Comments;\n"
"InToken            : InTerm            : Token Comments;\n"
"LetToken           : LetTerm           : Token Comments;\n"
"LogicToken         : LogicTerm         : Token Comments;\n"
"LsbToken           : LsbTerm           : Token Comments;\n"
"ModportToken       : ModportTerm       : Token Comments;\n"
"ModuleToken        : ModuleTerm        : Token Comments;\n"
"MsbToken           : MsbTerm           : Token Comments;\n"
"OutputToken        : OutputTerm        : Token Comments;\n"
"OutsideToken       : OutsideTerm       : Token Comments;\n"
"PackageToken       : PackageTerm       : Token Comments;\n"
"ParamToken         : ParamTerm         : Token Comments;\n"
"ProtoToken         : ProtoTerm         : Token Comments;\n"
"PubToken           : PubTerm           : Token Comments;\n"
"RepeatToken        : RepeatTerm        : Token Comments;\n"
"ResetToken         : ResetTerm         : Token Comments;\n"
"ResetAsyncHighToken: ResetAsyncHighTerm: Token Comments;\n"
"ResetAsyncLowToken : ResetAsyncLowTerm : Token Comments;\n"
"ResetSyncHighToken : ResetSyncHighTerm : Token Comments;\n"
"ResetSyncLowToken  : ResetSyncLowTerm  : Token Comments;\n"
"ReturnToken        : ReturnTerm        : Token Comments;\n"
"RevToken           : RevTerm           : Token Comments;\n"
"BreakToken         : BreakTerm         : Token Comments;\n"
"SameToken          : SameTerm          : Token Comments;\n"
"SignedToken        : SignedTerm        : Token Comments;\n"
"StepToken          : StepTerm          : Token Comments;\n"
"StringToken        : StringTerm        : Token Comments;\n"
"StructToken        : StructTerm        : Token Comments;\n"
"SwitchToken        : SwitchTerm        : Token Comments;\n"
"TriToken           : TriTerm           : Token Comments;\n"
"TrueToken          : TrueTerm          : Token Comments;\n"
"TypeToken          : TypeTerm          : Token Comments;\n"
"U8Token            : U8Term            : Token Comments;\n"
"U16Token           : U16Term           : Token Comments;\n"
"U32Token           : U32Term           : Token Comments;\n"
"U64Token           : U64Term           : Token Comments;\n"
"UnionToken         : UnionTerm         : Token Comments;\n"
"UnsafeToken        : UnsafeTerm        : Token Comments;\n"
"VarToken           : VarTerm           : Token Comments;\n"
"\n"
"DollarIdentifierToken: DollarIdentifierTerm: Token Comments;\n"
"IdentifierToken      : IdentifierTerm      : Token Comments;\n"
"\n"
"AnyToken: AnyTerm: Token;\n"
"\n"
"// "
"----------------------------------------------------------------------------\n"
"// VerylToken\n"
"// "
"----------------------------------------------------------------------------\n"
"\n"
"// Start\n"
"Start: StartToken: VerylToken;\n"
"\n"
"// StringLiteral\n"
"StringLiteral: StringLiteralToken: VerylToken;\n"
"\n"
"// Number\n"
"Exponent  : ExponentToken  : VerylToken;\n"
"FixedPoint: FixedPointToken: VerylToken;\n"
"Based     : BasedToken     : VerylToken;\n"
"BaseLess  : BaseLessToken  : VerylToken;\n"
"AllBit    : AllBitToken    : VerylToken;\n"
"\n"
"// Operator\n"
"AssignmentOperator: AssignmentOperatorToken: VerylToken;\n"
"DiamondOperator   : DiamondOperatorToken   : VerylToken;\n"
"Operator02        : Operator02Token        : VerylToken;\n"
"Operator03        : Operator03Token        : VerylToken;\n"
"Operator04        : Operator04Token        : VerylToken;\n"
"Operator05        : Operator05Token        : VerylToken;\n"
"Operator06        : Operator06Token        : VerylToken;\n"
"Operator07        : Operator07Token        : VerylToken;\n"
"Operator08        : Operator08Token        : VerylToken;\n"
"Operator09        : Operator09Token        : VerylToken;\n"
"Operator10        : Operator10Token        : VerylToken;\n"
"Operator11        : Operator11Token        : VerylToken;\n"
"Operator12        : Operator12Token        : VerylToken;\n"
"UnaryOperator     : UnaryOperatorToken     : VerylToken;\n"
"\n"
"// Symbol\n"
"Colon           : ColonToken           : VerylToken;\n"
"ColonColonLAngle: ColonColonLAngleToken: VerylToken;\n"
"ColonColon      : ColonColonToken      : VerylToken;\n"
"Comma           : CommaToken           : VerylToken;\n"
"DotDot          : DotDotToken          : VerylToken;\n"
"DotDotEqu       : DotDotEquToken       : VerylToken;\n"
"Dot             : DotToken             : VerylToken;\n"
"Equ             : EquToken             : VerylToken;\n"
"HashLBracket    : HashLBracketToken    : VerylToken;\n"
"Hash            : HashToken            : VerylToken;\n"
"Question        : QuestionToken        : VerylToken;\n"
"QuoteLBrace     : QuoteLBraceToken     : VerylToken;\n"
"Quote           : QuoteToken           : VerylToken;\n"
"LAngle          : LAngleToken          : VerylToken;\n"
"EmbedLBrace     : EmbedLBraceToken     : VerylToken;\n"
"EscapedLBrace   : EscapedLBraceToken   : VerylToken;\n"
"TripleLBrace    : TripleLBraceToken    : VerylToken;\n"
"LBrace          : LBraceToken          : VerylToken;\n"
"LBracket        : LBracketToken        : VerylToken;\n"
"LParen          : LParenToken          : VerylToken;\n"
"LTMinus         : LTMinusToken         : VerylToken;\n"
"MinusColon      : MinusColonToken      : VerylToken;\n"
"MinusGT         : MinusGTToken         : VerylToken;\n"
"PlusColon       : PlusColonToken       : VerylToken;\n"
"RAngle          : RAngleToken          : VerylToken;\n"
"EmbedRBrace     : EmbedRBraceToken     : VerylToken;\n"
"EscapedRBrace   : EscapedRBraceToken   : VerylToken;\n"
"TripleRBrace    : TripleRBraceToken    : VerylToken;\n"
"RBrace          : RBraceToken          : VerylToken;\n"
"RBracket        : RBracketToken        : VerylToken;\n"
"RParen          : RParenToken          : VerylToken;\n"
"Semicolon       : SemicolonToken       : VerylToken;\n"
"Star            : StarToken            : VerylToken;\n"
"\n"
"// Keyword\n"
"Alias         : AliasToken         : VerylToken;\n"
"AlwaysComb    : AlwaysCombToken    : VerylToken;\n"
"AlwaysFf      : AlwaysFfToken      : VerylToken;\n"
"As            : AsToken            : VerylToken;\n"
"Assign        : AssignToken        : VerylToken;\n"
"Bind          : BindToken          : VerylToken;\n"
"Bit           : BitToken           : VerylToken;\n"
"Bool          : BoolToken          : VerylToken;\n"
"Break         : BreakToken         : VerylToken;\n"
"Case          : CaseToken          : VerylToken;\n"
"Clock         : ClockToken         : VerylToken;\n"
"ClockPosedge  : ClockPosedgeToken  : VerylToken;\n"
"ClockNegedge  : ClockNegedgeToken  : VerylToken;\n"
"Connect       : ConnectToken       : VerylToken;\n"
"Const         : ConstToken         : VerylToken;\n"
"Converse      : ConverseToken      : VerylToken;\n"
"Defaul        : DefaultToken       : VerylToken; // avoid to conflict with "
"Rust's Default trait\n"
"Else          : ElseToken          : VerylToken;\n"
"Embed         : EmbedToken         : VerylToken;\n"
"Enum          : EnumToken          : VerylToken;\n"
"F32           : F32Token           : VerylToken;\n"
"F64           : F64Token           : VerylToken;\n"
"False         : FalseToken         : VerylToken;\n"
"Final         : FinalToken         : VerylToken;\n"
"For           : ForToken           : VerylToken;\n"
"Function      : FunctionToken      : VerylToken;\n"
"I8            : I8Token            : VerylToken;\n"
"I16           : I16Token           : VerylToken;\n"
"I32           : I32Token           : VerylToken;\n"
"I64           : I64Token           : VerylToken;\n"
"If            : IfToken            : VerylToken;\n"
"IfReset       : IfResetToken       : VerylToken;\n"
"Import        : ImportToken        : VerylToken;\n"
"In            : InToken            : VerylToken;\n"
"Include       : IncludeToken       : VerylToken;\n"
"Initial       : InitialToken       : VerylToken;\n"
"Inout         : InoutToken         : VerylToken;\n"
"Input         : InputToken         : VerylToken;\n"
"Inside        : InsideToken        : VerylToken;\n"
"Inst          : InstToken          : VerylToken;\n"
"Interface     : InterfaceToken     : VerylToken;\n"
"Let           : LetToken           : VerylToken;\n"
"Logic         : LogicToken         : VerylToken;\n"
"Lsb           : LsbToken           : VerylToken;\n"
"Modport       : ModportToken       : VerylToken;\n"
"Module        : ModuleToken        : VerylToken;\n"
"Msb           : MsbToken           : VerylToken;\n"
"Output        : OutputToken        : VerylToken;\n"
"Outside       : OutsideToken       : VerylToken;\n"
"Package       : PackageToken       : VerylToken;\n"
"Param         : ParamToken         : VerylToken;\n"
"Proto         : ProtoToken         : VerylToken;\n"
"Pub           : PubToken           : VerylToken;\n"
"Repeat        : RepeatToken        : VerylToken;\n"
"Reset         : ResetToken         : VerylToken;\n"
"ResetAsyncHigh: ResetAsyncHighToken: VerylToken;\n"
"ResetAsyncLow : ResetAsyncLowToken : VerylToken;\n"
"ResetSyncHigh : ResetSyncHighToken : VerylToken;\n"
"ResetSyncLow  : ResetSyncLowToken  : VerylToken;\n"
"Return        : ReturnToken        : VerylToken;\n"
"Rev           : RevToken           : VerylToken;\n"
"Same          : SameToken          : VerylToken;\n"
"Signed        : SignedToken        : VerylToken;\n"
"Step          : StepToken          : VerylToken;\n"
"Strin         : StringToken        : VerylToken; // avoid to conflict with "
"Rust's String struct\n"
"Struct        : StructToken        : VerylToken;\n"
"Switch        : SwitchToken        : VerylToken;\n"
"Tri           : TriToken           : VerylToken;\n"
"True          : TrueToken          : VerylToken;\n"
"Type          : TypeToken          : VerylToken;\n"
"U8            : U8Token            : VerylToken;\n"
"U16           : U16Token           : VerylToken;\n"
"U32           : U32Token           : VerylToken;\n"
"U64           : U64Token           : VerylToken;\n"
"Union         : UnionToken         : VerylToken;\n"
"Unsafe        : UnsafeToken        : VerylToken;\n"
"Var           : VarToken           : VerylToken;\n"
"\n"
"// Identifier\n"
"DollarIdentifier: DollarIdentifierToken: VerylToken;\n"
"Identifier      : IdentifierToken      : VerylToken;\n"
"\n"
"Any: AnyToken: VerylToken;\n"
"\n"
"// "
"----------------------------------------------------------------------------\n"
"// Number\n"
"// "
"----------------------------------------------------------------------------\n"
"\n"
"Number: IntegralNumber\n"
"      | RealNumber\n"
"      ;\n"
"\n"
"IntegralNumber: Based\n"
"              | BaseLess\n"
"              | AllBit\n"
"              ;\n"
"\n"
"RealNumber: FixedPoint\n"
"          | Exponent\n"
"          ;\n"
"\n"
"// "
"----------------------------------------------------------------------------\n"
"// Complex Identifier\n"
"// "
"----------------------------------------------------------------------------\n"
"\n"
"HierarchicalIdentifier: Identifier { Select } { Dot Identifier "
"{ Select } };\n"
"ScopedIdentifier      : ( DollarIdentifier | Identifier "
"[ WithGenericArgument ] ) { ColonColon Identifier "
"[ WithGenericArgument ] };\n"
"ExpressionIdentifier  : ScopedIdentifier [ Width ] { Select } { Dot "
"Identifier { Select } };\n"
"\n"
"// "
"----------------------------------------------------------------------------\n"
"// Expression\n"
"// "
"----------------------------------------------------------------------------\n"
"\n"
"Expression  : IfExpression;\n"
"IfExpression: { If Expression Question Expression Colon } Expression01;\n"
"Expression01: Expression02 { Operator02 Expression02 };\n"
"Expression02: Expression03 { Operator03 Expression03 };\n"
"Expression03: Expression04 { Operator04 Expression04 };\n"
"Expression04: Expression05 { Operator05 Expression05 };\n"
"Expression05: Expression06 { Operator06 Expression06 };\n"
"Expression06: Expression07 { Operator07 Expression07 };\n"
"Expression07: Expression08 { Operator08 Expression08 };\n"
"Expression08: Expression09 { Operator09 Expression09 };\n"
"Expression09: Expression10 { Operator10 Expression10 };\n"
"Expression10: Expression11 { ( Operator11 | Star ) Expression11 };\n"
"Expression11: Expression12 { Operator12 Expression12 };\n"
"Expression12: Expression13 [ As CastingType ];\n"
"Expression13: { ( UnaryOperator | Operator10 | Operator06 | Operator04 | "
"Operator05 ) } Factor;\n"
"\n"
"Factor: Number\n"
"      | BooleanLiteral\n"
"      | IdentifierFactor\n"
"      | LParen Expression RParen\n"
"      | LBrace ConcatenationList RBrace\n"
"      | QuoteLBrace ArrayLiteralList RBrace\n"
"      | CaseExpression\n"
"      | SwitchExpression\n"
"      | StringLiteral\n"
"      | ( Msb | Lsb )\n"
"      | InsideExpression\n"
"      | OutsideExpression\n"
"      | TypeExpression\n"
"      | FactorTypeFactor\n"
"      ;\n"
"\n"
"BooleanLiteral: True | False;\n"
"\n"
"IdentifierFactor: ExpressionIdentifier [ FunctionCall | "
"StructConstructor ];\n"
"\n"
"FactorTypeFactor: { TypeModifier } FactorType;\n"
"\n"
"FunctionCall: LParen [ ArgumentList ] RParen;\n"
"\n"
"ArgumentList: ArgumentItem { Comma ArgumentItem } [ Comma ];\n"
"\n"
"ArgumentItem: ArgumentExpression [ Colon Expression ];\n"
"\n"
"ArgumentExpression: Expression;\n"
"\n"
"StructConstructor: QuoteLBrace StructConstructorList [ DotDot Defaul LParen "
"Expression RParen ] RBrace;\n"
"\n"
"StructConstructorList: StructConstructorItem { Comma StructConstructorItem } "
"[ Comma ];\n"
"\n"
"StructConstructorItem: Identifier Colon Expression;\n"
"\n"
"ConcatenationList: ConcatenationItem { Comma ConcatenationItem } [ Comma ];\n"
"\n"
"ConcatenationItem: Expression [ Repeat Expression ];\n"
"\n"
"ArrayLiteralList: ArrayLiteralItem { Comma ArrayLiteralItem } [ Comma ];\n"
"\n"
"ArrayLiteralItem: ( Expression [ Repeat Expression ] | Defaul Colon "
"Expression );\n"
"\n"
"CaseExpression: Case Expression LBrace CaseCondition Colon Expression Comma "
"{ CaseCondition Colon Expression Comma } Defaul Colon Expression [ Comma ] "
"RBrace;\n"
"\n"
"SwitchExpression: Switch LBrace SwitchCondition Colon Expression Comma "
"{ SwitchCondition Colon Expression Comma } Defaul Colon Expression [ Comma ] "
"RBrace;\n"
"\n"
"TypeExpression: Type LParen Expression RParen;\n"
"\n"
"InsideExpression: Inside Expression LBrace RangeList RBrace;\n"
"\n"
"OutsideExpression: Outside Expression LBrace RangeList RBrace;\n"
"\n"
"RangeList: RangeItem { Comma RangeItem } [ Comma ];\n"
"\n"
"RangeItem: Range;\n"
"\n"
"// "
"----------------------------------------------------------------------------\n"
"// Select / Width / Array / Range\n"
"// "
"----------------------------------------------------------------------------\n"
"\n"
"Select: LBracket Expression [ SelectOperator Expression ] RBracket;\n"
"\n"
"SelectOperator: Colon\n"
"              | PlusColon\n"
"              | MinusColon\n"
"              | Step\n"
"              ;\n"
"\n"
"Width: LAngle Expression { Comma Expression } RAngle;\n"
"\n"
"Array: LBracket Expression { Comma Expression } RBracket;\n"
"\n"
"Range: Expression [ RangeOperator Expression ];\n"
"\n"
"RangeOperator: DotDot\n"
"             | DotDotEqu\n"
"             ;\n"
"\n"
"// "
"----------------------------------------------------------------------------\n"
"// ScalarType / ArrayType / CastingType\n"
"// "
"----------------------------------------------------------------------------\n"
"\n"
"FixedType: U8 | U16 | U32 | U64 | I8 | I16| I32 | I64 | F32 | F64 | Bool | "
"Strin;\n"
"\n"
"VariableType: Clock\n"
"            | ClockPosedge\n"
"            | ClockNegedge\n"
"            | Reset\n"
"            | ResetAsyncHigh\n"
"            | ResetAsyncLow\n"
"            | ResetSyncHigh\n"
"            | ResetSyncLow\n"
"            | Logic\n"
"            | Bit;\n"
"\n"
"UserDefinedType: ScopedIdentifier;\n"
"\n"
"TypeModifier: Tri | Signed | Defaul;\n"
"\n"
"FactorType: ( VariableType [ Width ] | FixedType );\n"
"\n"
"ScalarType: { TypeModifier } ( UserDefinedType [ Width ] | FactorType );\n"
"\n"
"ArrayType: ScalarType [ Array ];\n"
"\n"
"CastingType: U8\n"
"           | U16\n"
"           | U32\n"
"           | U64\n"
"           | I8\n"
"           | I16\n"
"           | I32\n"
"           | I64\n"
"           | F32\n"
"           | F64\n"
"           | Bool\n"
"           | Clock\n"
"           | ClockPosedge\n"
"           | ClockNegedge\n"
"           | Reset\n"
"           | ResetAsyncHigh\n"
"           | ResetAsyncLow\n"
"           | ResetSyncHigh\n"
"           | ResetSyncLow\n"
"           | UserDefinedType\n"
"           | Based\n"
"           | BaseLess\n"
"           ;\n"
"\n"
"// "
"----------------------------------------------------------------------------\n"
"// ClockDomain\n"
"// "
"----------------------------------------------------------------------------\n"
"\n"
"ClockDomain: Quote Identifier;\n"
"\n"
"// "
"----------------------------------------------------------------------------\n"
"// Statement\n"
"// "
"----------------------------------------------------------------------------\n"
"\n"
"StatementBlock: LBrace { StatementBlockGroup } RBrace;\n"
"\n"
"StatementBlockGroup: { Attribute } ( LBrace { StatementBlockGroup } RBrace | "
"StatementBlockItem );\n"
"\n"
"StatementBlockItem: VarDeclaration | LetStatement | ConstDeclaration | "
"Statement;\n"
"\n"
"Statement: IdentifierStatement\n"
"         | IfStatement\n"
"         | IfResetStatement\n"
"         | ReturnStatement\n"
"         | BreakStatement\n"
"         | ForStatement\n"
"         | CaseStatement\n"
"         | SwitchStatement\n"
"         ;\n"
"\n"
"LetStatement: Let Identifier Colon [ ClockDomain ] ArrayType Equ Expression "
"Semicolon;\n"
"\n"
"IdentifierStatement: ExpressionIdentifier ( FunctionCall | Assignment ) "
"Semicolon;\n"
"\n"
"Assignment: ( Equ | AssignmentOperator | DiamondOperator ) Expression;\n"
"\n"
"IfStatement: If Expression StatementBlock { Else If Expression "
"StatementBlock } [ Else StatementBlock ];\n"
"\n"
"IfResetStatement: IfReset StatementBlock { Else If Expression "
"StatementBlock } [ Else StatementBlock ];\n"
"\n"
"ReturnStatement: Return Expression Semicolon;\n"
"\n"
"BreakStatement: Break Semicolon;\n"
"\n"
"ForStatement: For Identifier Colon ScalarType In [ Rev ] Range [ Step "
"AssignmentOperator Expression ] StatementBlock;\n"
"\n"
"CaseStatement: Case Expression LBrace { CaseItem } RBrace;\n"
"\n"
"CaseItem: ( CaseCondition | Defaul ) Colon ( Statement | StatementBlock );\n"
"\n"
"CaseCondition: RangeItem { Comma RangeItem } ;\n"
"\n"
"SwitchStatement: Switch LBrace { SwitchItem } RBrace;\n"
"\n"
"SwitchItem: ( SwitchCondition | Defaul ) Colon ( Statement | "
"StatementBlock );\n"
"\n"
"SwitchCondition: Expression { Comma Expression } ;\n"
"\n"
"// "
"----------------------------------------------------------------------------\n"
"// Attribute\n"
"// "
"----------------------------------------------------------------------------\n"
"\n"
"Attribute: HashLBracket Identifier [ LParen AttributeList RParen ] "
"RBracket ;\n"
"\n"
"AttributeList: AttributeItem { Comma AttributeItem } [ Comma ];\n"
"\n"
"AttributeItem: Identifier\n"
"             | StringLiteral\n"
"             ;\n"
"\n"
"// "
"----------------------------------------------------------------------------\n"
"// Declaration\n"
"// "
"----------------------------------------------------------------------------\n"
"\n"
"LetDeclaration: Let Identifier Colon [ ClockDomain ] ArrayType Equ "
"Expression Semicolon;\n"
"\n"
"VarDeclaration: Var Identifier Colon [ ClockDomain ] ArrayType Semicolon;\n"
"\n"
"ConstDeclaration: Const Identifier Colon ( ArrayType | Type ) Equ Expression "
"Semicolon;\n"
"\n"
"TypeDefDeclaration: Type Identifier Equ ArrayType Semicolon;\n"
"\n"
"AlwaysFfDeclaration: AlwaysFf [ AlwaysFfEventList ] StatementBlock;\n"
"\n"
"AlwaysFfEventList: LParen AlwaysFfClock [ Comma AlwaysFfReset ] RParen;\n"
"\n"
"AlwaysFfClock: HierarchicalIdentifier;\n"
"\n"
"AlwaysFfReset: HierarchicalIdentifier;\n"
"\n"
"AlwaysCombDeclaration: AlwaysComb StatementBlock;\n"
"\n"
"AssignDeclaration: Assign AssignDestination Equ Expression Semicolon;\n"
"\n"
"AssignDestination: HierarchicalIdentifier\n"
"                 | LBrace AssignConcatenationList RBrace;\n"
"\n"
"AssignConcatenationList: AssignConcatenationItem { Comma "
"AssignConcatenationItem } [ Comma ];\n"
"\n"
"AssignConcatenationItem: HierarchicalIdentifier;\n"
"\n"
"ConnectDeclaration: Connect HierarchicalIdentifier DiamondOperator "
"Expression Semicolon;\n"
"\n"
"ModportDeclaration: Modport Identifier LBrace [ ModportList ] [ DotDot "
"ModportDefault ] RBrace;\n"
"\n"
"ModportList: ModportGroup { Comma ModportGroup } [ Comma ];\n"
"\n"
"ModportGroup: { Attribute } ( LBrace ModportList RBrace | ModportItem );\n"
"\n"
"ModportItem: Identifier Colon Direction;\n"
"\n"
"ModportDefault: Input\n"
"              | Output\n"
"              | Same LParen Identifier RParen\n"
"              | Converse LParen Identifier RParen;\n"
"\n"
"EnumDeclaration: Enum Identifier [ Colon ScalarType ] LBrace EnumList "
"RBrace;\n"
"\n"
"EnumList: EnumGroup { Comma EnumGroup } [ Comma ];\n"
"\n"
"EnumGroup: { Attribute } ( LBrace EnumList RBrace | EnumItem );\n"
"\n"
"EnumItem: Identifier [ Equ Expression ];\n"
"\n"
"StructUnion: Struct | Union;\n"
"\n"
"StructUnionDeclaration: StructUnion Identifier [ WithGenericParameter ] "
"LBrace StructUnionList RBrace;\n"
"\n"
"StructUnionList: StructUnionGroup { Comma StructUnionGroup } [ Comma ];\n"
"\n"
"StructUnionGroup: { Attribute } ( LBrace StructUnionList RBrace | "
"StructUnionItem );\n"
"\n"
"StructUnionItem: Identifier Colon ScalarType;\n"
"\n"
"InitialDeclaration: Initial StatementBlock;\n"
"\n"
"FinalDeclaration: Final StatementBlock;\n"
"\n"
"// "
"----------------------------------------------------------------------------\n"
"// InstDeclaration/BindDeclaration\n"
"// "
"----------------------------------------------------------------------------\n"
"\n"
"InstDeclaration: Inst ComponentInstantiation Semicolon;\n"
"\n"
"BindDeclaration: Bind ScopedIdentifier LTMinus ComponentInstantiation "
"Semicolon;\n"
"\n"
"ComponentInstantiation: Identifier Colon [ ClockDomain ] ScopedIdentifier "
"[ Array ] [ InstParameter ] [ InstPort ];\n"
"\n"
"InstParameter: Hash LParen [ InstParameterList ] RParen;\n"
"\n"
"InstParameterList: InstParameterGroup { Comma InstParameterGroup } "
"[ Comma ];\n"
"\n"
"InstParameterGroup: { Attribute } ( LBrace InstParameterList RBrace | "
"InstParameterItem );\n"
"\n"
"InstParameterItem: Identifier [ Colon Expression ];\n"
"\n"
"InstPort: LParen [ InstPortList ] RParen;\n"
"\n"
"InstPortList: InstPortGroup { Comma InstPortGroup } [ Comma ];\n"
"\n"
"InstPortGroup: { Attribute } ( LBrace InstPortList RBrace | InstPortItem );\n"
"\n"
"InstPortItem: Identifier [ Colon Expression ];\n"
"\n"
"// "
"----------------------------------------------------------------------------\n"
"// WithParameter\n"
"// "
"----------------------------------------------------------------------------\n"
"\n"
"WithParameter: Hash LParen [ WithParameterList ] RParen;\n"
"\n"
"WithParameterList: WithParameterGroup { Comma WithParameterGroup } "
"[ Comma ];\n"
"\n"
"WithParameterGroup: { Attribute } ( LBrace WithParameterList RBrace | "
"WithParameterItem );\n"
"\n"
"WithParameterItem: ( Param | Const ) Identifier Colon ( ArrayType | Type ) "
"[ Equ Expression ];\n"
"\n"
"// "
"----------------------------------------------------------------------------\n"
"// WithGenericParameter\n"
"// "
"----------------------------------------------------------------------------\n"
"\n"
"GenericBound: Type\n"
"            | Inst ScopedIdentifier\n"
"            | GenericProtoBound;\n"
"\n"
"WithGenericParameter: ColonColonLAngle WithGenericParameterList RAngle;\n"
"\n"
"WithGenericParameterList: WithGenericParameterItem { Comma "
"WithGenericParameterItem } [ Comma ];\n"
"\n"
"WithGenericParameterItem: Identifier Colon GenericBound [ Equ "
"WithGenericArgumentItem ];\n"
"\n"
"GenericProtoBound: ScopedIdentifier | FixedType;\n"
"\n"
"// "
"----------------------------------------------------------------------------\n"
"// WithGenericArgument\n"
"// "
"----------------------------------------------------------------------------\n"
"\n"
"WithGenericArgument: ColonColonLAngle [ WithGenericArgumentList ] RAngle;\n"
"\n"
"WithGenericArgumentList: WithGenericArgumentItem { Comma "
"WithGenericArgumentItem } [ Comma ];\n"
"\n"
"WithGenericArgumentItem: ExpressionIdentifier\n"
"                       | FixedType\n"
"                       | Number\n"
"                       | BooleanLiteral\n"
"                       ;\n"
"\n"
"// "
"----------------------------------------------------------------------------\n"
"// PortDeclaration\n"
"// "
"----------------------------------------------------------------------------\n"
"\n"
"PortDeclaration: LParen [ PortDeclarationList ] RParen;\n"
"\n"
"PortDeclarationList: PortDeclarationGroup { Comma PortDeclarationGroup } "
"[ Comma ];\n"
"\n"
"PortDeclarationGroup: { Attribute } ( LBrace PortDeclarationList RBrace | "
"PortDeclarationItem );\n"
"\n"
"PortDeclarationItem: Identifier Colon ( PortTypeConcrete | "
"PortTypeAbstract );\n"
"\n"
"PortTypeConcrete: Direction [ ClockDomain ] ArrayType [ Equ "
"PortDefaultValue ];\n"
"\n"
"PortDefaultValue: Expression;\n"
"\n"
"PortTypeAbstract: [ ClockDomain ] Interface [ ColonColon Identifier ] "
"[ Array ];\n"
"\n"
"Direction: Input\n"
"         | Output\n"
"         | Inout\n"
"         | Modport\n"
"         | Import\n"
"         ;\n"
"\n"
"// "
"----------------------------------------------------------------------------\n"
"// Function\n"
"// "
"----------------------------------------------------------------------------\n"
"\n"
"FunctionDeclaration: Function Identifier [ WithGenericParameter ] "
"[ PortDeclaration ] [ MinusGT ScalarType ] StatementBlock;\n"
"\n"
"// "
"----------------------------------------------------------------------------\n"
"// Import\n"
"// "
"----------------------------------------------------------------------------\n"
"\n"
"ImportDeclaration: Import ScopedIdentifier [ ColonColon Star ] Semicolon;\n"
"\n"
"// "
"----------------------------------------------------------------------------\n"
"// Unsafe\n"
"// "
"----------------------------------------------------------------------------\n"
"\n"
"UnsafeBlock: Unsafe LParen Identifier RParen LBrace { GenerateGroup } "
"RBrace;\n"
"\n"
"// "
"----------------------------------------------------------------------------\n"
"// Module/Interface\n"
"// "
"----------------------------------------------------------------------------\n"
"\n"
"ModuleDeclaration: Module Identifier [ WithGenericParameter ] [ For "
"ScopedIdentifier ] [ WithParameter ] [ PortDeclaration ] LBrace "
"{ ModuleGroup } RBrace;\n"
"\n"
"ModuleGroup: { Attribute } ( LBrace { ModuleGroup } RBrace | ModuleItem );\n"
"\n"
"ModuleItem: GenerateItem;\n"
"\n"
"InterfaceDeclaration: Interface Identifier [ WithGenericParameter ] [ For "
"ScopedIdentifier ] [ WithParameter ] LBrace { InterfaceGroup } RBrace;\n"
"\n"
"InterfaceGroup: { Attribute } ( LBrace { InterfaceGroup } RBrace | "
"InterfaceItem );\n"
"\n"
"InterfaceItem: GenerateItem | ModportDeclaration;\n"
"\n"
"GenerateIfDeclaration: If Expression GenerateNamedBlock { Else If Expression "
"GenerateOptionalNamedBlock } [ Else GenerateOptionalNamedBlock ];\n"
"\n"
"GenerateForDeclaration: For Identifier In [ Rev ] Range [ Step "
"AssignmentOperator Expression ] GenerateNamedBlock;\n"
"\n"
"GenerateBlockDeclaration: GenerateNamedBlock;\n"
"\n"
"GenerateNamedBlock: Colon Identifier LBrace { GenerateGroup } RBrace;\n"
"\n"
"GenerateOptionalNamedBlock: [ Colon Identifier ] LBrace { GenerateGroup } "
"RBrace;\n"
"\n"
"GenerateGroup: { Attribute } ( LBrace { GenerateGroup } RBrace | "
"GenerateItem );\n"
"\n"
"GenerateItem: LetDeclaration\n"
"            | VarDeclaration\n"
"            | InstDeclaration\n"
"            | BindDeclaration\n"
"            | ConstDeclaration\n"
"            | AlwaysFfDeclaration\n"
"            | AlwaysCombDeclaration\n"
"            | AssignDeclaration\n"
"            | ConnectDeclaration\n"
"            | FunctionDeclaration\n"
"            | GenerateIfDeclaration\n"
"            | GenerateForDeclaration\n"
"            | GenerateBlockDeclaration\n"
"            | TypeDefDeclaration\n"
"            | EnumDeclaration\n"
"            | StructUnionDeclaration\n"
"            | ImportDeclaration\n"
"            | AliasDeclaration\n"
"            | InitialDeclaration\n"
"            | FinalDeclaration\n"
"            | UnsafeBlock\n"
"            | EmbedDeclaration\n"
"            ;\n"
"\n"
"// "
"----------------------------------------------------------------------------\n"
"// Package\n"
"// "
"----------------------------------------------------------------------------\n"
"\n"
"PackageDeclaration: Package Identifier [ WithGenericParameter ] [ For "
"ScopedIdentifier ] LBrace { PackageGroup } RBrace;\n"
"\n"
"PackageGroup: { Attribute } ( LBrace { PackageGroup } RBrace | "
"PackageItem );\n"
"\n"
"PackageItem: ConstDeclaration\n"
"           | TypeDefDeclaration\n"
"           | EnumDeclaration\n"
"           | StructUnionDeclaration\n"
"           | FunctionDeclaration\n"
"           | ImportDeclaration\n"
"           | AliasDeclaration\n"
"           | EmbedDeclaration\n"
"           ;\n"
"\n"
"// "
"----------------------------------------------------------------------------\n"
"// Alias\n"
"// "
"----------------------------------------------------------------------------\n"
"\n"
"AliasDeclaration: Alias ( Module | Interface | Package ) Identifier Equ "
"ScopedIdentifier Semicolon;\n"
"\n"
"// "
"----------------------------------------------------------------------------\n"
"// Proto\n"
"// "
"----------------------------------------------------------------------------\n"
"\n"
"ProtoDeclaration: Proto ( ProtoModuleDeclaration | ProtoInterfaceDeclaration "
"| ProtoPackageDeclaration );\n"
"\n"
"ProtoModuleDeclaration: Module Identifier [ WithParameter ] "
"[ PortDeclaration ] Semicolon;\n"
"\n"
"ProtoInterfaceDeclaration: Interface Identifier [ WithParameter ] LBrace "
"{ ProtoInterfaceItem } RBrace;\n"
"\n"
"ProtoInterfaceItem: VarDeclaration\n"
"                  | ProtoConstDeclaration\n"
"                  | ProtoFunctionDeclaration\n"
"                  | ProtoTypeDefDeclaration\n"
"                  | ProtoAliasDeclaration\n"
"                  | ModportDeclaration\n"
"                  | ImportDeclaration\n"
"                  ;\n"
"\n"
"ProtoPackageDeclaration: Package Identifier LBrace { ProtoPacakgeItem } "
"RBrace;\n"
"\n"
"ProtoPacakgeItem: ProtoConstDeclaration\n"
"                | ProtoTypeDefDeclaration\n"
"                | EnumDeclaration\n"
"                | StructUnionDeclaration\n"
"                | ProtoFunctionDeclaration\n"
"                | ProtoAliasDeclaration\n"
"                | ImportDeclaration\n"
"                ;\n"
"\n"
"ProtoConstDeclaration: Const Identifier Colon ( ArrayType | Type ) "
"Semicolon;\n"
"\n"
"ProtoTypeDefDeclaration: Type Identifier [ Equ ArrayType ] Semicolon;\n"
"\n"
"ProtoFunctionDeclaration: Function Identifier [ WithGenericParameter ] "
"[ PortDeclaration ] [ MinusGT ScalarType ] Semicolon;\n"
"\n"
"ProtoAliasDeclaration: Alias ( Module | Interface | Package ) Identifier "
"Colon ScopedIdentifier Semicolon;\n"
"\n"
"// "
"----------------------------------------------------------------------------\n"
"// Embed\n"
"// "
"----------------------------------------------------------------------------\n"
"\n"
"EmbedDeclaration: Embed LParen Identifier RParen Identifier EmbedContent;\n"
"\n"
"EmbedContent: TripleLBrace { EmbedItem } TripleRBrace;\n"
"\n"
"EmbedScopedIdentifier: EscapedLBrace ScopedIdentifier EscapedRBrace;\n"
"\n"
"EmbedItem: EmbedLBrace { EmbedItem } EmbedRBrace\n"
"         | EmbedScopedIdentifier\n"
"         | Any;\n"
"\n"
"// "
"----------------------------------------------------------------------------\n"
"// Include\n"
"// "
"----------------------------------------------------------------------------\n"
"\n"
"IncludeDeclaration: Include LParen Identifier Comma StringLiteral RParen "
"Semicolon;\n"
"\n"
"// "
"----------------------------------------------------------------------------\n"
"// Description\n"
"// "
"----------------------------------------------------------------------------\n"
"\n"
"DescriptionGroup: { Attribute } ( LBrace { DescriptionGroup } RBrace | "
"DescriptionItem );\n"
"\n"
"DescriptionItem: [ Pub ] PublicDescriptionItem\n"
"               | ImportDeclaration\n"
"               | BindDeclaration\n"
"               | EmbedDeclaration\n"
"               | IncludeDeclaration\n"
"               ;\n"
"\n"
"PublicDescriptionItem: ModuleDeclaration\n"
"                     | InterfaceDeclaration\n"
"                     | PackageDeclaration\n"
"                     | AliasDeclaration\n"
"                     | ProtoDeclaration\n"
"                     ;\n"
"\n"
"// "
"----------------------------------------------------------------------------\n"
"// SourceCode\n"
"// "
"----------------------------------------------------------------------------\n"
"\n"
"Veryl: Start { DescriptionGroup };\n"
"```"
msgstr ""

#: src/07_appendix/02_semantic_error.md:3
msgid "duplicated_identifier"
msgstr "duplicated_identifier"

#: src/07_appendix/02_semantic_error.md:5
msgid "invalid_allow"
msgstr "invalid_allow"

#: src/07_appendix/02_semantic_error.md:7
msgid "invalid_direction"
msgstr "invalid_direction"

#: src/07_appendix/02_semantic_error.md:9
msgid "invalid_identifier"
msgstr "invalid_identifier"

#: src/07_appendix/02_semantic_error.md:11
msgid "invalid_lsb"
msgstr "invalid_lsb"

#: src/07_appendix/02_semantic_error.md:13
msgid "invalid_msb"
msgstr "invalid_msb"

#: src/07_appendix/02_semantic_error.md:15
msgid "invalid_number_character"
msgstr "invalid_number_character"

#: src/07_appendix/02_semantic_error.md:17
msgid "invalid_statement"
msgstr "invalid_statement"

#: src/07_appendix/02_semantic_error.md:19
msgid "invalid_system_function"
msgstr "invalid_system_function"

#: src/07_appendix/02_semantic_error.md:21
msgid "invalid_type_declaration"
msgstr "invalid_type_declaration"

#: src/07_appendix/02_semantic_error.md:23
msgid ""
"This error is reported when `struct`, `enum` and `union` data types are "
"defined within interface declarations."
msgstr ""
"このエラーは `struct`、`enum`、`union`のデータ型がインターフェース宣言内で定"
"義されたことを示します。"

#: src/07_appendix/02_semantic_error.md:25
msgid "mismatch_arity"
msgstr "mismatch_arity"

#: src/07_appendix/02_semantic_error.md:27
msgid "mismatch_attribute_args"
msgstr "mismatch_attribute_args"

#: src/07_appendix/02_semantic_error.md:29
msgid "mismatch_type"
msgstr "mismatch_type"

#: src/07_appendix/02_semantic_error.md:31
msgid "missing_if_reset"
msgstr "missing_if_reset"

#: src/07_appendix/02_semantic_error.md:33
msgid "missing_port"
msgstr "missing_port"

#: src/07_appendix/02_semantic_error.md:35
msgid "missing_reset_signal"
msgstr "missing_reset_signal"

#: src/07_appendix/02_semantic_error.md:37
msgid "missing_reset_statement"
msgstr "missing_reset_statement"

#: src/07_appendix/02_semantic_error.md:39
msgid "too_large_enum_variant"
msgstr "too_large_enum_variant"

#: src/07_appendix/02_semantic_error.md:41
msgid "too_large_number"
msgstr "too_large_number"

#: src/07_appendix/02_semantic_error.md:43
msgid "too_much_enum_variant"
msgstr "too_much_enum_variant"

#: src/07_appendix/02_semantic_error.md:45
msgid "undefined_identifier"
msgstr "undefined_identifier"

#: src/07_appendix/02_semantic_error.md:47
msgid "unknown_attribute"
msgstr "unknown_attribute"

#: src/07_appendix/02_semantic_error.md:49
msgid "unknown_member"
msgstr "unknown_member"

#: src/07_appendix/02_semantic_error.md:51
msgid "unknown_msb"
msgstr "unknown_msb"

#: src/07_appendix/02_semantic_error.md:53
msgid "unknown_port"
msgstr "unknown_port"

#: src/07_appendix/02_semantic_error.md:55
msgid "unused_variable"
msgstr "unused_variable"

#~ msgid "This section contains configurations of test."
#~ msgstr "このセクションはテストの設定です。"

#~ msgid "simulator"
#~ msgstr "simulator"

#~ msgid "simulator name[^sim]"
#~ msgstr "シミュレータ名[^sim]"

#~ msgid "default simulator"
#~ msgstr "デフォルトのシミュレータ"

#~ msgid ""
#~ "```toml\n"
#~ "[project]\n"
#~ "name = \"hello\"\n"
#~ "version = \"0.1.0\"\n"
#~ "```"
#~ msgstr ""
#~ "```toml\n"
#~ "[project]\n"
#~ "name = \"hello\"\n"
#~ "version = \"0.1.0\"\n"
#~ "```"

#~ msgid "`const`: means constant value can be passed"
#~ msgstr "`const`: 定数値を渡すことができる"

#~ msgid "named prototype"
#~ msgstr "名前付きプロトタイプ"

#~ msgid "After the command, the following directory and file will be created."
#~ msgstr ""
#~ "コマンドを実行すると、以下のようなディレクトリとファイルが作成されます。"

#~ msgid "case_function_ref"
#~ msgstr "case_function_ref"

#~ msgid "case style of `ref` argument"
#~ msgstr "`ref` 引数のケーススタイル"

#~ msgid "prefix_function_ref"
#~ msgstr "prefix_function_ref"

#~ msgid "prefix of `ref` argument"
#~ msgstr "`ref` 引数のプレフィックス"

#~ msgid "suffix_function_ref"
#~ msgstr "suffix_function_ref"

#~ msgid "suffix of `ref` argument"
#~ msgstr "`ref` 引数のサフィックス"

#~ msgid "re_forbidden_function_ref"
#~ msgstr "re_forbidden_function_ref"

#~ msgid "regex forbidden of `ref` argument"
#~ msgstr "`ref` 引数の禁止正規表現"

#~ msgid "re_required_function_ref"
#~ msgstr "re_required_function_ref"

#~ msgid "regex required of `ref` argument"
#~ msgstr "`ref` 引数の必須正規表現"

#~ msgid ""
#~ "```toml\n"
#~ "[dependencies]\n"
#~ "\"https://github.com/veryl-lang/sample\" = {version = \"0.1.0\", name = "
#~ "\"veryl_sample_alt\"}\n"
#~ "```"
#~ msgstr ""
#~ "```toml\n"
#~ "[dependencies]\n"
#~ "\"https://github.com/veryl-lang/sample\" = {version = \"0.1.0\", name = "
#~ "\"veryl_sample_alt\"}\n"
#~ "```"

#~ msgid ""
#~ "If you want to use many versions of the same dependency path, you can "
#~ "specify each name."
#~ msgstr ""
#~ "同じ依存関係の複数のバージョンを使う場合は、以下のようにそれぞれの名前を指"
#~ "定できます。"

#~ msgid ""
#~ "```toml\n"
#~ "[dependencies]\n"
#~ "\"../../library/path\" = \"0.1.0\"\n"
#~ "```"
#~ msgstr ""
#~ "```toml\n"
#~ "[dependencies]\n"
#~ "\"../../library/path\" = \"0.1.0\"\n"
#~ "```"

#~ msgid ""
#~ "Veryl doesn't provide the default `.gitignore`. This is because which "
#~ "files should be ignored is different by each projects."
#~ msgstr ""
#~ "Veryl はデフォルトの `.gitignore` を提供しません。これはプロジェクト毎にど"
#~ "のファイルを無視する必要があるかが変わるためです。"

#~ msgid ""
#~ "`export` declaration exports symbols from the package to other. `export "
#~ "*` represents to export all symbols."
#~ msgstr ""
#~ "`export` 宣言は宣言したパッケージからシンボルをエクスポートします。全ての"
#~ "シンボルをエクスポートするには `export *` を使用します。"

#~ msgid "generic package"
#~ msgstr "ジェネリックパッケージ"

#~ msgid "![diagnostics](./img/diagnostics.gif)"
#~ msgstr "![diagnostics](./img/diagnostics.gif)"

#~ msgid "If the video does not play[^1]"
#~ msgstr "ビデオが再生されない場合[^1]"

#~ msgid "![format](./img/format.gif)"
#~ msgstr "![format](./img/format.gif)"

#~ msgid ""
#~ "Some browsers by default pause the playback of GIF animations. Please "
#~ "check your browser settings."
#~ msgstr ""
#~ "いくつかのブラウザはデフォルトでGIF動画の再生を停止しています。ブラウザの"
#~ "設定を確認してください。"

#~ msgid "`{}`"
#~ msgstr "`{}`"

#~ msgid "SV Attribute"
#~ msgstr "SV アトリビュート"

#~ msgid ""
#~ "Note: If you want install without internet connection, you can download "
#~ "from [release page](https://github.com/veryl-lang/veryl/releases/latest) "
#~ "directly instead of verylup."
#~ msgstr ""
#~ "注: インターネット接続なしにインストールしたい場合は[リリースページ]"
#~ "(https://github.com/veryl-lang/veryl/releases/latest)から直接ダウンロード"
#~ "することもできます。"

#~ msgid ""
#~ "You can install Veryl by downloading binary. If you have Rust development "
#~ "environment, you can use `cargo` instead of it."
#~ msgstr ""
#~ "Veryl バイナリをダウンロードしてインストールできます。もし Rust ユーザであ"
#~ "れば `cargo` コマンドでインストールすることもできます。"

#~ msgid "Choose a way of installation"
#~ msgstr "インストール方法の選択"

#~ msgid "To build Veryl, Rust 1.77.0+ is required."
#~ msgstr "Verylをビルドするには Rust 1.77.0 以上が必要です。"

#~ msgid ""
#~ "Waveform description based on [WaveDrom](https://wavedrom.com) is "
#~ "supported too. In a `wavedrom` code block, the syntax of WaveDrom can be "
#~ "written. Please refer [Tutorial](https://wavedrom.com/tutorial.html) for "
#~ "the detailed syntax."
#~ msgstr ""
#~ "[WaveDrom](https://wavedrom.com) による波形記述もサポートされています。"
#~ "`wavedrom` コードブロック内で、WaveDromの構文を記述することができます。構"
#~ "文の詳細は [チュートリアル](https://wavedrom.com/tutorial.html) を参照して"
#~ "ください。"

#~ msgid "If `--wave` option is specified, waveforms are generated."
#~ msgstr "`--wave` オプションが指定された場合、波形を生成します。"

#~ msgid "Case"
#~ msgstr "case"

#~ msgid "`case` can be used as statement. The right-hand of arm is statement."
#~ msgstr "`case` は文として使うこともできます。条件の右側は文になります。"

#~ msgid "`+` `-` `!` `~` `&` `~&` "
#~ msgstr "`+` `-` `!` `~` `&` `~&` "

#~ msgid "\\|"
#~ msgstr "\\|"

#~ msgid "~\\|"
#~ msgstr "~\\|"

#~ msgid " `^` `~^` `^~` (unary)"
#~ msgstr " `^` `~^` `^~` (単項)"

#~ msgid " (binary)"
#~ msgstr " (二項)"

#~ msgid "\\|\\|"
#~ msgstr "\\|\\|"

#~ msgid "\\|="
#~ msgstr "\\|="

#~ msgid " `<<=` `>>=` `<<<=` `>>>=`"
#~ msgstr " `<<=` `>>=` `<<<=` `>>>=`"

#~ msgid ""
#~ "[`clock_type`](01_project_configuration.md#the-clock_type-field) --- The "
#~ "type of clock."
#~ msgstr ""
#~ "[`clock_type`](01_project_configuration.md#the-clock_type-field) --- ク"
#~ "ロックタイプ"

#~ msgid ""
#~ "[`reset_type`](01_project_configuration.md#the-reset_type-field) --- The "
#~ "type of reset."
#~ msgstr ""
#~ "[`reset_type`](01_project_configuration.md#the-reset_type-field) --- リ"
#~ "セットタイプ"

#~ msgid ""
#~ "[`filelist_type`](01_project_configuration.md#the-filelist_type-field) "
#~ "--- The type of filelist."
#~ msgstr ""
#~ "[`filelist_type`](01_project_configuration.md#the-filelist_type-field) "
#~ "--- ファイルリストのタイプ"

#~ msgid ""
#~ "[`target`](01_project_configuration.md#the-target-field) --- The way of "
#~ "output."
#~ msgstr ""
#~ "[`target`](01_project_configuration.md#the-target-field) --- 出力方法"

#~ msgid ""
#~ "[`implicit_parameter_types`](01_project_configuration.md#the-"
#~ "implicit_parameter_types-field) --- Whether implicit parameter type is "
#~ "enabled."
#~ msgstr ""
#~ "[`implicit_parameter_types`](01_project_configuration.md#the-"
#~ "implicit_parameter_types-field) --- 暗黙のパラメータ型を有効にするかどうか"

#~ msgid ""
#~ "[`omit_project_prefix`](01_project_configuration.md#the-"
#~ "omit_project_prefix-field) --- Whether omit project prefix."
#~ msgstr ""
#~ "[`omit_project_prefix`](01_project_configuration.md#the-"
#~ "omit_project_prefix-field) --- プロジェクト名のプレフィックスを省略するか"
#~ "どうか"

#~ msgid ""
#~ "[`strip_comments`](01_project_configuration.md#the-strip_comments-field) "
#~ "--- Whether strip comments."
#~ msgstr ""
#~ "[`strip_comments`](01_project_configuration.md#the-strip_comments-field) "
#~ "--- コメントを削除するかどうか"

#~ msgid ""
#~ "The available configurations are below. These can be specified in "
#~ "`[format]` section of `Veryl.toml`."
#~ msgstr ""
#~ "設定可能な項目は以下の通りです。これは `Veryl.toml` の `[format]` セクショ"
#~ "ンで指定できます。"

#~ msgid ""
#~ "The available configurations are below. These can be specified in "
#~ "`[lint]` section of `Veryl.toml`."
#~ msgstr ""
#~ "設定可能な項目は以下の通りです。これは `Veryl.toml` の `[lint]` セクション"
#~ "で指定できます。"

#~ msgid ""
#~ "The available configurations are below. These can be specified in "
#~ "`[test]` section of `Veryl.toml`."
#~ msgstr ""
#~ "設定可能な項目は以下の通りです。これは `Veryl.toml` の `[test]` セクション"
#~ "で指定できます。"

#~ msgid ""
#~ "```veryl,playground\n"
#~ "embed (\"inline\") sv{{{\n"
#~ "    module ModuleSv;\n"
#~ "    endmodule\n"
#~ "}}}\n"
#~ "```"
#~ msgstr ""
#~ "```veryl,playground\n"
#~ "embed (\"inline\") sv{{{\n"
#~ "    module ModuleSv;\n"
#~ "    endmodule\n"
#~ "}}}\n"
#~ "```"

#~ msgid ""
#~ "Veryl has symplified syntax based on SystemVerilog / Rust. \"Symplified\" "
#~ "has two meanings. One is for parser, and another is for human."
#~ msgstr ""
#~ "Veryl の構文は SystemVerilog と Rust をベースに簡素化したものです。ここで "
#~ "\"簡素\" とは2つの意味があります。1つはパーサにとって、もう1つは人間にとっ"
#~ "てです。"

#~ msgid ""
#~ "SystemVerilog has very complicated syntax (see IEEE Std 1800-2017 Annex "
#~ "A). This causes difficulty of SystemVerilog tool implementation. Veryl "
#~ "keeps simple syntax to make tool implementation easier. So explicit "
#~ "syntax with keyword and symbol is adopted instead of context dependent "
#~ "syntax and shorthand notation. For example, \"off-side rule\" like "
#~ "Python, \"automatic semicolon insertion\" like ECMAScript / Go will not "
#~ "be supported."
#~ msgstr ""
#~ "SystemVerilog の構文は非常に複雑であり（IEEE Std 1800-2017 Annex A を参"
#~ "照）、このことがツール実装を困難にしています。Veryl はパースしやすい簡素な"
#~ "構文を採用することで、ツール実装のしやすさを重視しています。そのため文脈依"
#~ "存の構文や省略記法よりキーワードや記号による明示的な構文を採用します。例え"
#~ "ば Python における \"オフサイドルール\" や ECMAScript / Go における \"自動"
#~ "セミコロン挿入\"は採用されません。"

#~ msgid ""
#~ "SystemVerilog has various syntax. Some syntaxes are inherited from "
#~ "Verilog, and some syntaxes are added from SystemVerilog. Additionally "
#~ "some syntaxes can be written, but cannot be used actually because major "
#~ "EDA tools don't support them. So user should learn many syntaxes and "
#~ "whether each syntax can be used or not. Veryl will not support old "
#~ "Verilog style, unrecommended description, and so on."
#~ msgstr ""
#~ "SystemVerilog には Verilog から引き継いだ構文や SystemVerilog で新たに追加"
#~ "された構文など多様な構文があります。さらに、いくつかの構文は書くことができ"
#~ "るものの、主要なEDAツールでサポートされていないため事実上使用できません。"
#~ "そのためユーザはそれぞれの構文が使用可能かどうかを学ぶ必要があります。"
#~ "Veryl は古い Verilog スタイルの構文や非推奨記述をサポートしません。"

#~ msgid ""
#~ "HDL alternative languages should be transpiler to the tradisional HDLs "
#~ "like Verilog / VHDL because major EDA tools support them. Veryl is a "
#~ "transpiler to SystemVerilog."
#~ msgstr ""
#~ "HDL の代替言語は主要な EDA ツールがサポートしている Verylog / VHDL のよう"
#~ "な伝統的な HDL へのトランスパイラである必要があります。Veryl は "
#~ "SystemVerilog へのトランスパイラです。"

#~ msgid ""
#~ "Transpiler to Verilog has wide EDA tool support including OSS EDA tools. "
#~ "But even if there are rich data strucuture like `struct` / `interface` in "
#~ "HDL alternatives, transpiled Verilog can't have it. If HDL alternatives "
#~ "have rich code generateion mechanism, transpiled Verilog will be expanded "
#~ "to the very long code. For these reason, debugging the transpiled code "
#~ "becomes difficult."
#~ msgstr ""
#~ "Verilog へのトランスパイラであれば OSS の EDA ツールを含め多くの EDA ツー"
#~ "ルにサポートされています。しかし代替 HDL 上で `struct` や `interface` のよ"
#~ "うなリッチなデータ構造を表現しても、トランスパイルされた Verilog ではそれ"
#~ "らを表現できません。代替 HDL が高度なコード生成機構を持っていても、 "
#~ "Verilog ではそれらが展開された非常に長いコードになってしまいます。そのため"
#~ "トランスパイルされたコードのデバッグは困難です。"

#~ msgid ""
#~ "Veryl will has almost all the same semantics as SystemVerilog. So "
#~ "transpiled code will be human readable SystemVerilog."
#~ msgstr ""
#~ "Veryl は SystemVerilog とほとんど同じセマンティクスを持っています。そのた"
#~ "めトランスパイルされたコードは人間が読みやすい SystemVerilog になります。"

#~ msgid ""
#~ "Additionally Veryl have interoperability with SystemVerilog. Veryl can "
#~ "use SystemVerilog's module / interface / struct / enum in the code, and "
#~ "vice versa."
#~ msgstr ""
#~ "さらに Veryl は SystemVerilog と相互運用可能です。Veryl では "
#~ "SystemVerilog の module / interface / struct / enum を使えますし、逆も可能"
#~ "です。"

#~ msgid ""
#~ "Modern programming languages have development support tools like linter, "
#~ "formatter, and language server by default. Veryl will have them too from "
#~ "the beginning of development."
#~ msgstr ""
#~ "モダンなプログラミング言語ではリンタやフォーマッタ、言語サーバといったサ"
#~ "ポートツールが標準で揃っています。Veryl でもそれらを最初からサポートしま"
#~ "す。"

#~ msgid "Language server"
#~ msgstr "言語サーバ"

#~ msgid "Package manager"
#~ msgstr "パッケージマネージャ"
